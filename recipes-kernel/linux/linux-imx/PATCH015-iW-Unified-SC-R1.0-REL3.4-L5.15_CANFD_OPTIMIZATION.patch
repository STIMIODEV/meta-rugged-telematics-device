diff -Naur A/arch/arm/mach-imx/mach-iwg26i.c B/arch/arm/mach-imx/mach-iwg26i.c
--- A/arch/arm/mach-imx/mach-iwg26i.c	2023-06-26 14:34:48.695944605 +0530
+++ B/arch/arm/mach-imx/mach-iwg26i.c	2023-06-26 15:44:28.335797021 +0530
@@ -213,7 +213,7 @@
 	printk ("\n");
 	printk ("Board Info :\n");
 	printk ("\tBSP Version : %s\n", BSP_VERSION);
-	printk ("\tDevice Name and Release : iW-Unified-SC-01-R3.0-REL3.3-Linux5.15\n");
+	printk ("\tDevice Name and Release : iW-Unified-SC-01-R3.0-REL3.4-Linux5.15\n");
 	printk ("\tCPU Unique ID\t: 0x%08x%08x \n", unique_id2, unique_id1);
 	printk ("\n");
 
diff -Naur A/drivers/net/can/m_can/built-in.a B/drivers/net/can/m_can/built-in.a
--- A/drivers/net/can/m_can/built-in.a	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/built-in.a	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1,5 @@
+!<thin>
+//                                              10        `
+m_can.o/
+
+/0              0           0     0     644     20788     `
diff -Naur A/drivers/net/can/m_can/.built-in.a.cmd B/drivers/net/can/m_can/.built-in.a.cmd
--- A/drivers/net/can/m_can/.built-in.a.cmd	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/.built-in.a.cmd	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1 @@
+cmd_drivers/net/can/m_can/built-in.a := echo >/dev/null; rm -f drivers/net/can/m_can/built-in.a; arm-poky-linux-gnueabi-ar cDPrST drivers/net/can/m_can/built-in.a drivers/net/can/m_can/m_can.o
diff -Naur A/drivers/net/can/m_can/Makefile B/drivers/net/can/m_can/Makefile
--- A/drivers/net/can/m_can/Makefile	2023-06-26 14:34:49.963944560 +0530
+++ B/drivers/net/can/m_can/Makefile	2023-06-26 15:23:54.203840598 +0530
@@ -4,10 +4,5 @@
 #
 
 obj-$(CONFIG_CAN_M_CAN) += m_can.o
-obj-$(CONFIG_CAN_M_CAN_PCI) += m_can_pci.o
 obj-$(CONFIG_CAN_M_CAN_PLATFORM) += m_can_platform.o
 obj-$(CONFIG_CAN_M_CAN_TCAN4X5X) += tcan4x5x.o
-
-tcan4x5x-objs :=
-tcan4x5x-objs += tcan4x5x-core.o
-tcan4x5x-objs += tcan4x5x-regmap.o
diff -Naur A/drivers/net/can/m_can/m_can.c B/drivers/net/can/m_can/m_can.c
--- A/drivers/net/can/m_can/m_can.c	2023-06-26 14:34:49.967944560 +0530
+++ B/drivers/net/can/m_can/m_can.c	2023-06-26 15:23:54.203840598 +0530
@@ -5,10 +5,10 @@
 // Copyright (C) 2018-19 Texas Instruments Incorporated - http://www.ti.com/
 
 /* Bosch M_CAN user manual can be obtained from:
- * https://github.com/linux-can/can-doc/tree/master/m_can
+ * http://www.bosch-semiconductors.de/media/pdf_1/ipmodules_1/m_can/
+ * mcan_users_manual_v302.pdf
  */
 
-#include <linux/bitfield.h>
 #include <linux/interrupt.h>
 #include <linux/io.h>
 #include <linux/kernel.h>
@@ -21,13 +21,10 @@
 #include <linux/iopoll.h>
 #include <linux/can/dev.h>
 #include <linux/pinctrl/consumer.h>
-#include <linux/phy/phy.h>
 
 #include "m_can.h"
-
-bool iw_mcan_prop = false; /* Flag added for Telematics Device */
-bool mode = false; /* Flag added for determining when TCAN has to go to standby mode */
-int iw_ie_reg = 0; /* Variable to hold the runtime value of Interrupt Enable Register */
+bool iw_mcan_prop = false; /* Flag added for Rugged Telematics Device */
+bool mode = false;         /* Flag added for determining when tcan has to go to standby mode */
 
 /* registers definition */
 enum m_can_reg {
@@ -88,82 +85,85 @@
 #define MRAM_CFG_LEN	8
 
 /* Core Release Register (CREL) */
-#define CREL_REL_MASK		GENMASK(31, 28)
-#define CREL_STEP_MASK		GENMASK(27, 24)
-#define CREL_SUBSTEP_MASK	GENMASK(23, 20)
+#define CREL_REL_SHIFT		28
+#define CREL_REL_MASK		(0xF << CREL_REL_SHIFT)
+#define CREL_STEP_SHIFT		24
+#define CREL_STEP_MASK		(0xF << CREL_STEP_SHIFT)
+#define CREL_SUBSTEP_SHIFT	20
+#define CREL_SUBSTEP_MASK	(0xF << CREL_SUBSTEP_SHIFT)
 
 /* Data Bit Timing & Prescaler Register (DBTP) */
 #define DBTP_TDC		BIT(23)
-#define DBTP_DBRP_MASK		GENMASK(20, 16)
-#define DBTP_DTSEG1_MASK	GENMASK(12, 8)
-#define DBTP_DTSEG2_MASK	GENMASK(7, 4)
-#define DBTP_DSJW_MASK		GENMASK(3, 0)
+#define DBTP_DBRP_SHIFT		16
+#define DBTP_DBRP_MASK		(0x1f << DBTP_DBRP_SHIFT)
+#define DBTP_DTSEG1_SHIFT	8
+#define DBTP_DTSEG1_MASK	(0x1f << DBTP_DTSEG1_SHIFT)
+#define DBTP_DTSEG2_SHIFT	4
+#define DBTP_DTSEG2_MASK	(0xf << DBTP_DTSEG2_SHIFT)
+#define DBTP_DSJW_SHIFT		0
+#define DBTP_DSJW_MASK		(0xf << DBTP_DSJW_SHIFT)
 
 /* Transmitter Delay Compensation Register (TDCR) */
-#define TDCR_TDCO_MASK		GENMASK(14, 8)
-#define TDCR_TDCF_MASK		GENMASK(6, 0)
+#define TDCR_TDCO_SHIFT		8
+#define TDCR_TDCO_MASK		(0x7F << TDCR_TDCO_SHIFT)
+#define TDCR_TDCF_SHIFT		0
+#define TDCR_TDCF_MASK		(0x7F << TDCR_TDCF_SHIFT)
 
 /* Test Register (TEST) */
 #define TEST_LBCK		BIT(4)
 
-/* CC Control Register (CCCR) */
+/* CC Control Register(CCCR) */
+#define CCCR_CMR_MASK		0x3
+#define CCCR_CMR_SHIFT		10
+#define CCCR_CMR_CANFD		0x1
+#define CCCR_CMR_CANFD_BRS	0x2
+#define CCCR_CMR_CAN		0x3
+#define CCCR_CME_MASK		0x3
+#define CCCR_CME_SHIFT		8
+#define CCCR_CME_CAN		0
+#define CCCR_CME_CANFD		0x1
+#define CCCR_CME_CANFD_BRS	0x2
 #define CCCR_TXP		BIT(14)
 #define CCCR_TEST		BIT(7)
-#define CCCR_DAR		BIT(6)
 #define CCCR_MON		BIT(5)
 #define CCCR_CSR		BIT(4)
 #define CCCR_CSA		BIT(3)
 #define CCCR_ASM		BIT(2)
 #define CCCR_CCE		BIT(1)
 #define CCCR_INIT		BIT(0)
-/* for version 3.0.x */
-#define CCCR_CMR_MASK		GENMASK(11, 10)
-#define CCCR_CMR_CANFD		0x1
-#define CCCR_CMR_CANFD_BRS	0x2
-#define CCCR_CMR_CAN		0x3
-#define CCCR_CME_MASK		GENMASK(9, 8)
-#define CCCR_CME_CAN		0
-#define CCCR_CME_CANFD		0x1
-#define CCCR_CME_CANFD_BRS	0x2
+#define CCCR_CANFD		0x10
 /* for version >=3.1.x */
 #define CCCR_EFBI		BIT(13)
 #define CCCR_PXHD		BIT(12)
-#define CCCR_BRSE		BIT(9)
-#define CCCR_FDOE		BIT(8)
-/* for version >=3.2.x */
+#define CCCR_BRSE               BIT(9)
+#define CCCR_FDOE               BIT(8)
+/* only for version >=3.2.x */
 #define CCCR_NISO		BIT(15)
-/* for version >=3.3.x */
-#define CCCR_WMM		BIT(11)
-#define CCCR_UTSU		BIT(10)
 
 /* Nominal Bit Timing & Prescaler Register (NBTP) */
-#define NBTP_NSJW_MASK		GENMASK(31, 25)
-#define NBTP_NBRP_MASK		GENMASK(24, 16)
-#define NBTP_NTSEG1_MASK	GENMASK(15, 8)
-#define NBTP_NTSEG2_MASK	GENMASK(6, 0)
-
-/* Timestamp Counter Configuration Register (TSCC) */
-#define TSCC_TCP_MASK		GENMASK(19, 16)
-#define TSCC_TSS_MASK		GENMASK(1, 0)
-#define TSCC_TSS_DISABLE	0x0
-#define TSCC_TSS_INTERNAL	0x1
-#define TSCC_TSS_EXTERNAL	0x2
-
-/* Timestamp Counter Value Register (TSCV) */
-#define TSCV_TSC_MASK		GENMASK(15, 0)
+#define NBTP_NSJW_SHIFT		25
+#define NBTP_NSJW_MASK		(0x7f << NBTP_NSJW_SHIFT)
+#define NBTP_NBRP_SHIFT		16
+#define NBTP_NBRP_MASK		(0x1ff << NBTP_NBRP_SHIFT)
+#define NBTP_NTSEG1_SHIFT	8
+#define NBTP_NTSEG1_MASK	(0xff << NBTP_NTSEG1_SHIFT)
+#define NBTP_NTSEG2_SHIFT	0
+#define NBTP_NTSEG2_MASK	(0x7f << NBTP_NTSEG2_SHIFT)
 
-/* Error Counter Register (ECR) */
+/* Error Counter Register(ECR) */
 #define ECR_RP			BIT(15)
-#define ECR_REC_MASK		GENMASK(14, 8)
-#define ECR_TEC_MASK		GENMASK(7, 0)
+#define ECR_REC_SHIFT		8
+#define ECR_REC_MASK		(0x7f << ECR_REC_SHIFT)
+#define ECR_TEC_SHIFT		0
+#define ECR_TEC_MASK		0xff
 
-/* Protocol Status Register (PSR) */
+/* Protocol Status Register(PSR) */
 #define PSR_BO		BIT(7)
 #define PSR_EW		BIT(6)
 #define PSR_EP		BIT(5)
-#define PSR_LEC_MASK	GENMASK(2, 0)
+#define PSR_LEC_MASK	0x7
 
-/* Interrupt Register (IR) */
+/* Interrupt Register(IR) */
 #define IR_ALL_INT	0xffffffff
 
 /* Renamed bits for versions > 3.1.x */
@@ -208,20 +208,19 @@
 
 /* Interrupts for version 3.0.x */
 #define IR_ERR_LEC_30X	(IR_STE	| IR_FOE | IR_ACKE | IR_BE | IR_CRCE)
-#define IR_ERR_BUS_30X	(IR_ERR_LEC_30X | IR_WDI | IR_BEU | IR_BEC | \
-			 IR_TOO | IR_MRAF | IR_TSW | IR_TEFL | IR_RF1L | \
-			 IR_RF0L)
+#define IR_ERR_BUS_30X	(IR_ERR_LEC_30X | IR_WDI | IR_ELO | IR_BEU | \
+		IR_BEC | IR_TOO | IR_MRAF | IR_TSW | IR_TEFL | \
+		IR_RF1L | IR_RF0L)
 #define IR_ERR_ALL_30X	(IR_ERR_STATE | IR_ERR_BUS_30X)
-
 /* Interrupts for version >= 3.1.x */
 #ifdef CONFIG_MX6ULL_IWG26I
 #define IR_ERR_LEC_31X	(IR_PED | IR_PEA | IR_RF0N | IR_RF1N )
 #else /* CONFIG_MX6ULL_IWG26I */
 #define IR_ERR_LEC_31X	(IR_PED | IR_PEA)
 #endif /* CONFIG_MX6ULL_IWG26I */
-#define IR_ERR_BUS_31X      (IR_ERR_LEC_31X | IR_WDI | IR_BEU | IR_BEC | \
-			 IR_TOO | IR_MRAF | IR_TSW | IR_TEFL | IR_RF1L | \
-			 IR_RF0L)
+#define IR_ERR_BUS_31X      (IR_ERR_LEC_31X | IR_WDI | IR_ELO | IR_BEU | \
+		IR_BEC | IR_TOO | IR_MRAF | IR_TSW | IR_TEFL | \
+		IR_RF1L | IR_RF0L)
 #define IR_ERR_ALL_31X	(IR_ERR_STATE | IR_ERR_BUS_31X)
 
 /* Interrupt Line Select (ILS) */
@@ -233,49 +232,59 @@
 #define ILE_EINT0	BIT(0)
 
 /* Rx FIFO 0/1 Configuration (RXF0C/RXF1C) */
-#define RXFC_FWM_MASK	GENMASK(30, 24)
-#define RXFC_FS_MASK	GENMASK(22, 16)
-#define RXFC_FS_SHIFT   16
+#define RXFC_FWM_SHIFT	24
+#define RXFC_FWM_MASK	(0x7f << RXFC_FWM_SHIFT)
+#define RXFC_FS_SHIFT	16
+#define RXFC_FS_MASK	(0x7f << RXFC_FS_SHIFT)
 
 /* Rx FIFO 0/1 Status (RXF0S/RXF1S) */
 #define RXFS_RFL	BIT(25)
 #define RXFS_FF		BIT(24)
-#define RXFS_FPI_MASK	GENMASK(21, 16)
-#define RXFS_FGI_MASK	GENMASK(13, 8)
-#define RXFS_FFL_MASK	GENMASK(6, 0)
+#define RXFS_FPI_SHIFT	16
+#define RXFS_FPI_MASK	0x3f0000
+#define RXFS_FGI_SHIFT	8
+#define RXFS_FGI_MASK	0x3f00
+#define RXFS_FFL_MASK	0x7f
 #define RXFS_FFL_MASK_ELEMENTS	0x7f
 
 /* Rx Buffer / FIFO Element Size Configuration (RXESC) */
-#define RXESC_RBDS_MASK		GENMASK(10, 8)
-#define RXESC_F1DS_MASK		GENMASK(6, 4)
-#define RXESC_F0DS_MASK		GENMASK(2, 0)
-#define RXESC_64B		0x7
-
-/* Tx Buffer Configuration (TXBC) */
-#define TXBC_TFQS_MASK		GENMASK(29, 24)
-#define TXBC_NDTB_MASK		GENMASK(21, 16)
+#define M_CAN_RXESC_8BYTES	0x0
+#define M_CAN_RXESC_64BYTES	0x777
+
+/* Tx Buffer Configuration(TXBC) */
+#define TXBC_NDTB_SHIFT		16
+#define TXBC_NDTB_MASK		(0x3f << TXBC_NDTB_SHIFT)
+#define TXBC_TFQS_SHIFT		24
+#define TXBC_TFQS_MASK		(0x3f << TXBC_TFQS_SHIFT)
 
 /* Tx FIFO/Queue Status (TXFQS) */
 #define TXFQS_TFQF		BIT(21)
-#define TXFQS_TFQPI_MASK	GENMASK(20, 16)
-#define TXFQS_TFGI_MASK		GENMASK(12, 8)
-#define TXFQS_TFFL_MASK		GENMASK(5, 0)
-
-/* Tx Buffer Element Size Configuration (TXESC) */
-#define TXESC_TBDS_MASK		GENMASK(2, 0)
-#define TXESC_TBDS_64B		0x7
+#define TXFQS_TFQPI_SHIFT	16
+#define TXFQS_TFQPI_MASK	(0x1f << TXFQS_TFQPI_SHIFT)
+#define TXFQS_TFGI_SHIFT	8
+#define TXFQS_TFGI_MASK		(0x1f << TXFQS_TFGI_SHIFT)
+#define TXFQS_TFFL_SHIFT	0
+#define TXFQS_TFFL_MASK		(0x3f << TXFQS_TFFL_SHIFT)
+
+/* Tx Buffer Element Size Configuration(TXESC) */
+#define TXESC_TBDS_8BYTES	0x0
+#define TXESC_TBDS_64BYTES	0x7
 
 /* Tx Event FIFO Configuration (TXEFC) */
-#define TXEFC_EFS_MASK		GENMASK(21, 16)
+#define TXEFC_EFS_SHIFT		16
+#define TXEFC_EFS_MASK		(0x3f << TXEFC_EFS_SHIFT)
 
 /* Tx Event FIFO Status (TXEFS) */
 #define TXEFS_TEFL		BIT(25)
 #define TXEFS_EFF		BIT(24)
-#define TXEFS_EFGI_MASK		GENMASK(12, 8)
-#define TXEFS_EFFL_MASK		GENMASK(5, 0)
+#define TXEFS_EFGI_SHIFT	8
+#define	TXEFS_EFGI_MASK		(0x1f << TXEFS_EFGI_SHIFT)
+#define TXEFS_EFFL_SHIFT	0
+#define TXEFS_EFFL_MASK		(0x3f << TXEFS_EFFL_SHIFT)
 
 /* Tx Event FIFO Acknowledge (TXEFA) */
-#define TXEFA_EFAI_MASK		GENMASK(4, 0)
+#define TXEFA_EFAI_SHIFT	0
+#define TXEFA_EFAI_MASK		(0x1f << TXEFA_EFAI_SHIFT)
 
 /* Message RAM Configuration (in bytes) */
 #define SIDF_ELEMENT_SIZE	4
@@ -289,7 +298,7 @@
 /* Message RAM Elements */
 #define M_CAN_FIFO_ID		0x0
 #define M_CAN_FIFO_DLC		0x4
-#define M_CAN_FIFO_DATA		0x8
+#define M_CAN_FIFO_DATA(n)	(0x8 + ((n) << 2))
 
 /* Rx Buffer Element */
 /* R0 */
@@ -300,7 +309,6 @@
 #define RX_BUF_ANMF		BIT(31)
 #define RX_BUF_FDF		BIT(21)
 #define RX_BUF_BRS		BIT(20)
-#define RX_BUF_RXTS_MASK	GENMASK(15, 0)
 
 /* Tx Buffer Element */
 /* T0 */
@@ -311,22 +319,15 @@
 #define TX_BUF_EFC		BIT(23)
 #define TX_BUF_FDF		BIT(21)
 #define TX_BUF_BRS		BIT(20)
-#define TX_BUF_MM_MASK		GENMASK(31, 24)
-#define TX_BUF_DLC_MASK		GENMASK(19, 16)
+#define TX_BUF_MM_SHIFT		24
+#define TX_BUF_MM_MASK		(0xff << TX_BUF_MM_SHIFT)
 
 /* Tx event FIFO Element */
 /* E1 */
-#define TX_EVENT_MM_MASK	GENMASK(31, 24)
-#define TX_EVENT_TXTS_MASK	GENMASK(15, 0)
+#define TX_EVENT_MM_SHIFT	TX_BUF_MM_SHIFT
+#define TX_EVENT_MM_MASK	(0xff << TX_EVENT_MM_SHIFT)
 
-/* The ID and DLC registers are adjacent in M_CAN FIFO memory,
- * and we can save a (potentially slow) bus round trip by combining
- * reads and writes to them.
- */
-struct id_and_dlc {
-	u32 id;
-	u32 dlc;
-};
+#define IR_ALL_INT_CUSTOM_NO_TX (IR_ALL_INT & ~(IR_TEFL | IR_TEFF | IR_TEFN | IR_TCF | IR_TC | IR_TFE | IR_TEFW | IR_PED))
 
 static inline u32 m_can_read(struct m_can_classdev *cdev, enum m_can_reg reg)
 {
@@ -334,50 +335,41 @@
 }
 
 static inline void m_can_write(struct m_can_classdev *cdev, enum m_can_reg reg,
-			       u32 val)
+		u32 val)
 {
 	cdev->ops->write_reg(cdev, reg, val);
 }
 
-static int
-m_can_fifo_read(struct m_can_classdev *cdev,
-		u32 fgi, unsigned int offset, void *val, size_t val_count)
+static u32 m_can_fifo_read(struct m_can_classdev *cdev,
+		u32 fgi, unsigned int offset)
 {
 	u32 addr_offset = cdev->mcfg[MRAM_RXF0].off + fgi * RXF0_ELEMENT_SIZE +
 		offset;
 
-	if (val_count == 0)
-		return 0;
-
-	return cdev->ops->read_fifo(cdev, addr_offset, val, val_count);
+	return cdev->ops->read_fifo(cdev, addr_offset);
 }
 
-static int
-m_can_fifo_write(struct m_can_classdev *cdev,
-		 u32 fpi, unsigned int offset, const void *val, size_t val_count)
+static void m_can_fifo_write(struct m_can_classdev *cdev,
+		u32 fpi, unsigned int offset, u32 val)
 {
 	u32 addr_offset = cdev->mcfg[MRAM_TXB].off + fpi * TXB_ELEMENT_SIZE +
 		offset;
 
-	if (val_count == 0)
-		return 0;
-
-	return cdev->ops->write_fifo(cdev, addr_offset, val, val_count);
+	cdev->ops->write_fifo(cdev, addr_offset, val);
 }
 
-static inline int m_can_fifo_write_no_off(struct m_can_classdev *cdev,
-					  u32 fpi, u32 val)
+static inline void m_can_fifo_write_no_off(struct m_can_classdev *cdev,
+		u32 fpi, u32 val)
 {
-	return cdev->ops->write_fifo(cdev, fpi, &val, 1);
+	cdev->ops->write_fifo(cdev, fpi, val);
 }
 
-static int
-m_can_txe_fifo_read(struct m_can_classdev *cdev, u32 fgi, u32 offset, u32 *val)
+static u32 m_can_txe_fifo_read(struct m_can_classdev *cdev, u32 fgi, u32 offset)
 {
 	u32 addr_offset = cdev->mcfg[MRAM_TXE].off + fgi * TXE_ELEMENT_SIZE +
 		offset;
 
-	return cdev->ops->read_fifo(cdev, addr_offset, val, 1);
+	return cdev->ops->read_fifo(cdev, addr_offset);
 }
 
 static inline bool m_can_tx_fifo_full(struct m_can_classdev *cdev)
@@ -385,7 +377,7 @@
 	return !!(m_can_read(cdev, M_CAN_TXFQS) & TXFQS_TFQF);
 }
 
-static void m_can_config_endisable(struct m_can_classdev *cdev, bool enable)
+void m_can_config_endisable(struct m_can_classdev *cdev, bool enable)
 {
 	u32 cccr = m_can_read(cdev, M_CAN_CCCR);
 	u32 timeout = 10;
@@ -394,8 +386,12 @@
 	/* Clear the Clock stop request if it was set */
 	if (cccr & CCCR_CSR)
 		cccr &= ~CCCR_CSR;
-
+		
 	if (enable) {
+		/* Clear the Clock stop request if it was set */
+		if (cccr & CCCR_CSR)
+			cccr &= ~CCCR_CSR;
+
 		/* enable m_can configuration */
 		m_can_write(cdev, M_CAN_CCCR, cccr | CCCR_INIT);
 		udelay(5);
@@ -404,7 +400,6 @@
 	} else {
 		m_can_write(cdev, M_CAN_CCCR, cccr & ~(CCCR_INIT | CCCR_CCE));
 	}
-
 	/* there's a delay for module initialization */
 	if (enable)
 		val = CCCR_INIT | CCCR_CCE;
@@ -430,20 +425,6 @@
 	m_can_write(cdev, M_CAN_ILE, 0x0);
 }
 
-/* Retrieve internal timestamp counter from TSCV.TSC, and shift it to 32-bit
- * width.
- */
-static u32 m_can_get_timestamp(struct m_can_classdev *cdev)
-{
-	u32 tscv;
-	u32 tsc;
-
-	tscv = m_can_read(cdev, M_CAN_TSCV);
-	tsc = FIELD_GET(TSCV_TSC_MASK, tscv);
-
-	return (tsc << 16);
-}
-
 static void m_can_clean(struct net_device *net)
 {
 	struct m_can_classdev *cdev = netdev_priv(net);
@@ -453,87 +434,59 @@
 
 		net->stats.tx_errors++;
 		if (cdev->version > 30)
-			putidx = FIELD_GET(TXFQS_TFQPI_MASK,
-					   m_can_read(cdev, M_CAN_TXFQS));
-
-		can_free_echo_skb(cdev->net, putidx, NULL);
+			putidx = ((m_can_read(cdev, M_CAN_TXFQS) &
+						TXFQS_TFQPI_MASK) >> TXFQS_TFQPI_SHIFT);
 		cdev->tx_skb = NULL;
 	}
 }
 
-/* For peripherals, pass skb to rx-offload, which will push skb from
- * napi. For non-peripherals, RX is done in napi already, so push
- * directly. timestamp is used to ensure good skb ordering in
- * rx-offload and is ignored for non-peripherals.
- */
-static void m_can_receive_skb(struct m_can_classdev *cdev,
-			      struct sk_buff *skb,
-			      u32 timestamp)
-{
-	if (cdev->is_peripheral) {
-		struct net_device_stats *stats = &cdev->net->stats;
-		int err;
-
-		err = can_rx_offload_queue_sorted(&cdev->offload, skb,
-						  timestamp);
-		if (err)
-			stats->rx_fifo_errors++;
-	} else {
-		netif_receive_skb(skb);
-	}
-}
-
-static int m_can_read_fifo(struct net_device *dev, u32 rxfs)
+static void m_can_read_fifo(struct net_device *dev, u32 rxfs)
 {
 	struct net_device_stats *stats = &dev->stats;
 	struct m_can_classdev *cdev = netdev_priv(dev);
 	struct canfd_frame *cf;
 	struct sk_buff *skb;
-	struct id_and_dlc fifo_header;
-	u32 fgi;
-	u32 timestamp = 0;
-	int err;
+	u32 id, fgi, dlc;
+	int i;
 
 	/* calculate the fifo get index for where to read data */
-	fgi = FIELD_GET(RXFS_FGI_MASK, rxfs);
-	err = m_can_fifo_read(cdev, fgi, M_CAN_FIFO_ID, &fifo_header, 2);
-	if (err)
-		goto out_fail;
-
-	if (fifo_header.dlc & RX_BUF_FDF)
+	fgi = (rxfs & RXFS_FGI_MASK) >> RXFS_FGI_SHIFT;
+	dlc = m_can_fifo_read(cdev, fgi, M_CAN_FIFO_DLC);
+	if (dlc & RX_BUF_FDF)
 		skb = alloc_canfd_skb(dev, &cf);
 	else
 		skb = alloc_can_skb(dev, (struct can_frame **)&cf);
 	if (!skb) {
 		stats->rx_dropped++;
-		return 0;
+		return;
 	}
 
-	if (fifo_header.dlc & RX_BUF_FDF)
-		cf->len = can_fd_dlc2len((fifo_header.dlc >> 16) & 0x0F);
+	if (dlc & RX_BUF_FDF)
+		cf->len = can_fd_dlc2len((dlc >> 16) & 0x0F);
 	else
-		cf->len = can_cc_dlc2len((fifo_header.dlc >> 16) & 0x0F);
+		cf->len = can_cc_dlc2len((dlc >> 16) & 0x0F);
 
-	if (fifo_header.id & RX_BUF_XTD)
-		cf->can_id = (fifo_header.id & CAN_EFF_MASK) | CAN_EFF_FLAG;
+	id = m_can_fifo_read(cdev, fgi, M_CAN_FIFO_ID);
+	if (id & RX_BUF_XTD)
+		cf->can_id = (id & CAN_EFF_MASK) | CAN_EFF_FLAG;
 	else
-		cf->can_id = (fifo_header.id >> 18) & CAN_SFF_MASK;
+		cf->can_id = (id >> 18) & CAN_SFF_MASK;
 
-	if (fifo_header.id & RX_BUF_ESI) {
+	if (id & RX_BUF_ESI) {
 		cf->flags |= CANFD_ESI;
 		netdev_dbg(dev, "ESI Error\n");
 	}
 
-	if (!(fifo_header.dlc & RX_BUF_FDF) && (fifo_header.id & RX_BUF_RTR)) {
+	if (!(dlc & RX_BUF_FDF) && (id & RX_BUF_RTR)) {
 		cf->can_id |= CAN_RTR_FLAG;
 	} else {
-		if (fifo_header.dlc & RX_BUF_BRS)
+		if (dlc & RX_BUF_BRS)
 			cf->flags |= CANFD_BRS;
 
-		err = m_can_fifo_read(cdev, fgi, M_CAN_FIFO_DATA,
-				      cf->data, DIV_ROUND_UP(cf->len, 4));
-		if (err)
-			goto out_free_skb;
+		for (i = 0; i < cf->len; i += 4)
+			*(u32 *)(cf->data + i) =
+				m_can_fifo_read(cdev, fgi,
+						M_CAN_FIFO_DATA(i / 4));
 	}
 
 	/* acknowledge rx fifo 0 */
@@ -542,17 +495,7 @@
 	stats->rx_packets++;
 	stats->rx_bytes += cf->len;
 
-	timestamp = FIELD_GET(RX_BUF_RXTS_MASK, fifo_header.dlc);
-
-	m_can_receive_skb(cdev, skb, timestamp);
-
-	return 0;
-
-out_free_skb:
-	kfree_skb(skb);
-out_fail:
-	netdev_err(dev, "FIFO read returned %d\n", err);
-	return err;
+	netif_receive_skb(skb);
 }
 
 static int m_can_do_rx_poll(struct net_device *dev, int quota)
@@ -560,7 +503,6 @@
 	struct m_can_classdev *cdev = netdev_priv(dev);
 	u32 pkts = 0;
 	u32 rxfs;
-	int err;
 
 	rxfs = m_can_read(cdev, M_CAN_RXF0S);
 	if (!(rxfs & RXFS_FFL_MASK)) {
@@ -574,9 +516,10 @@
 	}
 
 	while ((rxfs & RXFS_FFL_MASK) && (quota > 0)) {
-		err = m_can_read_fifo(dev, rxfs);
-		if (err)
-			return err;
+		if (rxfs & RXFS_RFL)
+			netdev_warn(dev, "Rx FIFO 0 Message Lost\n");
+
+		m_can_read_fifo(dev, rxfs);
 
 		quota--;
 		pkts++;
@@ -591,11 +534,9 @@
 
 static int m_can_handle_lost_msg(struct net_device *dev)
 {
-	struct m_can_classdev *cdev = netdev_priv(dev);
 	struct net_device_stats *stats = &dev->stats;
 	struct sk_buff *skb;
 	struct can_frame *frame;
-	u32 timestamp = 0;
 
 	netdev_err(dev, "msg lost in rxf0\n");
 
@@ -609,22 +550,18 @@
 	frame->can_id |= CAN_ERR_CRTL;
 	frame->data[1] = CAN_ERR_CRTL_RX_OVERFLOW;
 
-	if (cdev->is_peripheral)
-		timestamp = m_can_get_timestamp(cdev);
-
-	m_can_receive_skb(cdev, skb, timestamp);
+	netif_receive_skb(skb);
 
 	return 1;
 }
 
 static int m_can_handle_lec_err(struct net_device *dev,
-				enum m_can_lec_type lec_type)
+		enum m_can_lec_type lec_type)
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
 	struct net_device_stats *stats = &dev->stats;
 	struct can_frame *cf;
 	struct sk_buff *skb;
-	u32 timestamp = 0;
 
 	cdev->can.can_stats.bus_error++;
 	stats->rx_errors++;
@@ -640,64 +577,68 @@
 	cf->can_id |= CAN_ERR_PROT | CAN_ERR_BUSERROR;
 
 	switch (lec_type) {
-	case LEC_STUFF_ERROR:
-		netdev_dbg(dev, "stuff error\n");
-		cf->data[2] |= CAN_ERR_PROT_STUFF;
-		break;
-	case LEC_FORM_ERROR:
-		netdev_dbg(dev, "form error\n");
-		cf->data[2] |= CAN_ERR_PROT_FORM;
-		break;
-	case LEC_ACK_ERROR:
-		netdev_dbg(dev, "ack error\n");
-		cf->data[3] = CAN_ERR_PROT_LOC_ACK;
-		break;
-	case LEC_BIT1_ERROR:
-		netdev_dbg(dev, "bit1 error\n");
-		cf->data[2] |= CAN_ERR_PROT_BIT1;
-		break;
-	case LEC_BIT0_ERROR:
-		netdev_dbg(dev, "bit0 error\n");
-		cf->data[2] |= CAN_ERR_PROT_BIT0;
-		break;
-	case LEC_CRC_ERROR:
-		netdev_dbg(dev, "CRC error\n");
-		cf->data[3] = CAN_ERR_PROT_LOC_CRC_SEQ;
-		break;
-	default:
-		break;
+		case LEC_STUFF_ERROR:
+			netdev_dbg(dev, "stuff error\n");
+			cf->data[2] |= CAN_ERR_PROT_STUFF;
+			break;
+		case LEC_FORM_ERROR:
+			netdev_dbg(dev, "form error\n");
+			cf->data[2] |= CAN_ERR_PROT_FORM;
+			break;
+		case LEC_ACK_ERROR:
+			netdev_dbg(dev, "ack error\n");
+			cf->data[3] = CAN_ERR_PROT_LOC_ACK;
+			break;
+		case LEC_BIT1_ERROR:
+			netdev_dbg(dev, "bit1 error\n");
+			cf->data[2] |= CAN_ERR_PROT_BIT1;
+			break;
+		case LEC_BIT0_ERROR:
+			netdev_dbg(dev, "bit0 error\n");
+			cf->data[2] |= CAN_ERR_PROT_BIT0;
+			break;
+		case LEC_CRC_ERROR:
+			netdev_dbg(dev, "CRC error\n");
+			cf->data[3] = CAN_ERR_PROT_LOC_CRC_SEQ;
+			break;
+		default:
+			break;
 	}
 
 	stats->rx_packets++;
-	stats->rx_bytes += cf->len;
-
-	if (cdev->is_peripheral)
-		timestamp = m_can_get_timestamp(cdev);
-
-	m_can_receive_skb(cdev, skb, timestamp);
+	stats->rx_bytes += cf->can_dlc;
+	netif_receive_skb(skb);
 
 	return 1;
 }
 
 static int __m_can_get_berr_counter(const struct net_device *dev,
-				    struct can_berr_counter *bec)
+		struct can_berr_counter *bec)
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
 	unsigned int ecr;
 
 	ecr = m_can_read(cdev, M_CAN_ECR);
-	bec->rxerr = FIELD_GET(ECR_REC_MASK, ecr);
-	bec->txerr = FIELD_GET(ECR_TEC_MASK, ecr);
+	bec->rxerr = (ecr & ECR_REC_MASK) >> ECR_REC_SHIFT;
+	bec->txerr = (ecr & ECR_TEC_MASK) >> ECR_TEC_SHIFT;
 
 	return 0;
 }
 
 static int m_can_clk_start(struct m_can_classdev *cdev)
 {
+	int err;
+
 	if (cdev->pm_clock_support == 0)
 		return 0;
 
-	return pm_runtime_resume_and_get(cdev->dev);
+	err = pm_runtime_get_sync(cdev->dev);
+	if (err < 0) {
+		pm_runtime_put_noidle(cdev->dev);
+		return err;
+	}
+
+	return 0;
 }
 
 static void m_can_clk_stop(struct m_can_classdev *cdev)
@@ -707,7 +648,7 @@
 }
 
 static int m_can_get_berr_counter(const struct net_device *dev,
-				  struct can_berr_counter *bec)
+		struct can_berr_counter *bec)
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
 	int err;
@@ -724,7 +665,7 @@
 }
 
 static int m_can_handle_state_change(struct net_device *dev,
-				     enum can_state new_state)
+		enum can_state new_state)
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
 	struct net_device_stats *stats = &dev->stats;
@@ -732,28 +673,27 @@
 	struct sk_buff *skb;
 	struct can_berr_counter bec;
 	unsigned int ecr;
-	u32 timestamp = 0;
 
 	switch (new_state) {
-	case CAN_STATE_ERROR_WARNING:
-		/* error warning state */
-		cdev->can.can_stats.error_warning++;
-		cdev->can.state = CAN_STATE_ERROR_WARNING;
-		break;
-	case CAN_STATE_ERROR_PASSIVE:
-		/* error passive state */
-		cdev->can.can_stats.error_passive++;
-		cdev->can.state = CAN_STATE_ERROR_PASSIVE;
-		break;
-	case CAN_STATE_BUS_OFF:
-		/* bus-off state */
-		cdev->can.state = CAN_STATE_BUS_OFF;
-		m_can_disable_all_interrupts(cdev);
-		cdev->can.can_stats.bus_off++;
-		can_bus_off(dev);
-		break;
-	default:
-		break;
+		case CAN_STATE_ERROR_ACTIVE:
+			/* error warning state */
+			cdev->can.can_stats.error_warning++;
+			cdev->can.state = CAN_STATE_ERROR_WARNING;
+			break;
+		case CAN_STATE_ERROR_PASSIVE:
+			/* error passive state */
+			cdev->can.can_stats.error_passive++;
+			cdev->can.state = CAN_STATE_ERROR_PASSIVE;
+			break;
+		case CAN_STATE_BUS_OFF:
+			/* bus-off state */
+			cdev->can.state = CAN_STATE_BUS_OFF;
+			m_can_disable_all_interrupts(cdev);
+			cdev->can.can_stats.bus_off++;
+			can_bus_off(dev);
+			break;
+		default:
+			break;
 	}
 
 	/* propagate the error condition to the CAN stack */
@@ -764,41 +704,37 @@
 	__m_can_get_berr_counter(dev, &bec);
 
 	switch (new_state) {
-	case CAN_STATE_ERROR_WARNING:
-		/* error warning state */
-		cf->can_id |= CAN_ERR_CRTL;
-		cf->data[1] = (bec.txerr > bec.rxerr) ?
-			CAN_ERR_CRTL_TX_WARNING :
-			CAN_ERR_CRTL_RX_WARNING;
-		cf->data[6] = bec.txerr;
-		cf->data[7] = bec.rxerr;
-		break;
-	case CAN_STATE_ERROR_PASSIVE:
-		/* error passive state */
-		cf->can_id |= CAN_ERR_CRTL;
-		ecr = m_can_read(cdev, M_CAN_ECR);
-		if (ecr & ECR_RP)
-			cf->data[1] |= CAN_ERR_CRTL_RX_PASSIVE;
-		if (bec.txerr > 127)
-			cf->data[1] |= CAN_ERR_CRTL_TX_PASSIVE;
-		cf->data[6] = bec.txerr;
-		cf->data[7] = bec.rxerr;
-		break;
-	case CAN_STATE_BUS_OFF:
-		/* bus-off state */
-		cf->can_id |= CAN_ERR_BUSOFF;
-		break;
-	default:
-		break;
+		case CAN_STATE_ERROR_ACTIVE:
+			/* error warning state */
+			cf->can_id |= CAN_ERR_CRTL;
+			cf->data[1] = (bec.txerr > bec.rxerr) ?
+				CAN_ERR_CRTL_TX_WARNING :
+				CAN_ERR_CRTL_RX_WARNING;
+			cf->data[6] = bec.txerr;
+			cf->data[7] = bec.rxerr;
+			break;
+		case CAN_STATE_ERROR_PASSIVE:
+			/* error passive state */
+			cf->can_id |= CAN_ERR_CRTL;
+			ecr = m_can_read(cdev, M_CAN_ECR);
+			if (ecr & ECR_RP)
+				cf->data[1] |= CAN_ERR_CRTL_RX_PASSIVE;
+			if (bec.txerr > 127)
+				cf->data[1] |= CAN_ERR_CRTL_TX_PASSIVE;
+			cf->data[6] = bec.txerr;
+			cf->data[7] = bec.rxerr;
+			break;
+		case CAN_STATE_BUS_OFF:
+			/* bus-off state */
+			cf->can_id |= CAN_ERR_BUSOFF;
+			break;
+		default:
+			break;
 	}
 
 	stats->rx_packets++;
-	stats->rx_bytes += cf->len;
-
-	if (cdev->is_peripheral)
-		timestamp = m_can_get_timestamp(cdev);
-
-	m_can_receive_skb(cdev, skb, timestamp);
+	stats->rx_bytes += cf->can_dlc;
+	netif_receive_skb(skb);
 
 	return 1;
 }
@@ -811,19 +747,19 @@
 	if (psr & PSR_EW && cdev->can.state != CAN_STATE_ERROR_WARNING) {
 		netdev_dbg(dev, "entered error warning state\n");
 		work_done += m_can_handle_state_change(dev,
-						       CAN_STATE_ERROR_WARNING);
+				CAN_STATE_ERROR_WARNING);
 	}
 
 	if (psr & PSR_EP && cdev->can.state != CAN_STATE_ERROR_PASSIVE) {
 		netdev_dbg(dev, "entered error passive state\n");
 		work_done += m_can_handle_state_change(dev,
-						       CAN_STATE_ERROR_PASSIVE);
+				CAN_STATE_ERROR_PASSIVE);
 	}
 
 	if (psr & PSR_BO && cdev->can.state != CAN_STATE_BUS_OFF) {
 		netdev_dbg(dev, "entered error bus off state\n");
 		work_done += m_can_handle_state_change(dev,
-						       CAN_STATE_BUS_OFF);
+				CAN_STATE_BUS_OFF);
 	}
 
 	return work_done;
@@ -852,50 +788,8 @@
 	return psr && (psr != LEC_UNUSED);
 }
 
-static inline bool m_can_is_protocol_err(u32 irqstatus)
-{
-	return irqstatus & IR_ERR_LEC_31X;
-}
-
-static int m_can_handle_protocol_error(struct net_device *dev, u32 irqstatus)
-{
-	struct net_device_stats *stats = &dev->stats;
-	struct m_can_classdev *cdev = netdev_priv(dev);
-	struct can_frame *cf;
-	struct sk_buff *skb;
-	u32 timestamp = 0;
-
-	/* propagate the error condition to the CAN stack */
-	skb = alloc_can_err_skb(dev, &cf);
-
-	/* update tx error stats since there is protocol error */
-	stats->tx_errors++;
-
-	/* update arbitration lost status */
-	if (cdev->version >= 31 && (irqstatus & IR_PEA)) {
-		netdev_dbg(dev, "Protocol error in Arbitration fail\n");
-		cdev->can.can_stats.arbitration_lost++;
-		if (skb) {
-			cf->can_id |= CAN_ERR_LOSTARB;
-			cf->data[0] |= CAN_ERR_LOSTARB_UNSPEC;
-		}
-	}
-
-	if (unlikely(!skb)) {
-		netdev_dbg(dev, "allocation of skb failed\n");
-		return 0;
-	}
-
-	if (cdev->is_peripheral)
-		timestamp = m_can_get_timestamp(cdev);
-
-	m_can_receive_skb(cdev, skb, timestamp);
-
-	return 1;
-}
-
 static int m_can_handle_bus_errors(struct net_device *dev, u32 irqstatus,
-				   u32 psr)
+		u32 psr)
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
 	int work_done = 0;
@@ -905,14 +799,9 @@
 
 	/* handle lec errors on the bus */
 	if ((cdev->can.ctrlmode & CAN_CTRLMODE_BERR_REPORTING) &&
-	    is_lec_err(psr))
+			is_lec_err(psr))
 		work_done += m_can_handle_lec_err(dev, psr & LEC_UNUSED);
 
-	/* handle protocol errors in arbitration phase */
-	if ((cdev->can.ctrlmode & CAN_CTRLMODE_BERR_REPORTING) &&
-	    m_can_is_protocol_err(irqstatus))
-		work_done += m_can_handle_protocol_error(dev, irqstatus);
-
 	/* other unproccessed error interrupts */
 	m_can_handle_other_err(dev, irqstatus);
 
@@ -930,14 +819,11 @@
 static int m_can_rx_handler(struct net_device *dev, int quota)
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
-	int rx_work_or_err;
 	int work_done = 0;
 	u32 irqstatus, psr;
-
 	irqstatus = cdev->irqstatus | m_can_read(cdev, M_CAN_IR);
 	if (!irqstatus)
 		goto end;
-
 	/* Errata workaround for issue "Needless activation of MRAF irq"
 	 * During frame reception while the MCAN is in Error Passive state
 	 * and the Receive Error Counter has the value MCAN_ECR.REC = 127,
@@ -949,7 +835,7 @@
 	 * In this case, reset MCAN_IR.MRAF. No further action is required.
 	 */
 	if (cdev->version <= 31 && irqstatus & IR_MRAF &&
-	    m_can_read(cdev, M_CAN_ECR) & ECR_RP) {
+			m_can_read(cdev, M_CAN_ECR) & ECR_RP) {
 		struct can_berr_counter bec;
 
 		__m_can_get_berr_counter(dev, &bec);
@@ -963,13 +849,13 @@
 
 	if (irqstatus & IR_ERR_STATE)
 		work_done += m_can_handle_state_errors(dev, psr);
-
 	if(iw_mcan_prop)
 	{
+		/* changes bus size from 30X to 31X*/
 		if (irqstatus & IR_ERR_BUS_31X)
 			work_done += m_can_handle_bus_errors(dev, irqstatus, psr);
 
-		if (irqstatus & IR_RF0N) /* 1804 */
+		if (irqstatus & IR_RF0W)
 			work_done += m_can_do_rx_poll(dev, (quota - work_done));
 	}
 	else /* iw_mcan_prop */
@@ -988,8 +874,7 @@
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
 
-	m_can_rx_handler_rx(dev, 1); //1804
-//	m_can_rx_handler_rx(dev, M_CAN_NAPI_WEIGHT);	
+	m_can_rx_handler_rx(dev, 1);
 
 	m_can_enable_all_interrupts(cdev);
 	return 0;
@@ -998,29 +883,13 @@
 static int m_can_rx_peripheral(struct net_device *dev)
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
-	int work_done;
-
-	m_can_rx_handler(dev, 1); // 1804
-//	m_can_rx_handler(dev, M_CAN_NAPI_WEIGHT);	
-
-	/* Don't re-enable interrupts if the driver had a fatal error
-	 * (e.g., FIFO read failure).
-	 */
-	if (work_done >= 0)
-		m_can_enable_all_interrupts(cdev);
 
-	return work_done;
-}
+	m_can_rx_handler(dev, 1);
 
-int m_can_rx_clear(struct net_device *dev)
-{
-	struct m_can_classdev *cdev = netdev_priv(dev);
-	m_can_disable_all_interrupts(cdev);
-	m_can_rx_peripheral(dev);
+	m_can_enable_all_interrupts(cdev);
 
 	return 0;
 }
-EXPORT_SYMBOL_GPL(m_can_rx_clear);
 
 static int m_can_poll(struct napi_struct *napi, int quota)
 {
@@ -1029,11 +898,7 @@
 	int work_done;
 
 	work_done = m_can_rx_handler(dev, quota);
-
-	/* Don't re-enable interrupts if the driver had a fatal error
-	 * (e.g., FIFO read failure).
-	 */
-	if (work_done >= 0 && work_done < quota) {
+	if (work_done < quota) {
 		napi_complete_done(napi, work_done);
 		m_can_enable_all_interrupts(cdev);
 	}
@@ -1041,120 +906,64 @@
 	return work_done;
 }
 
-/* Echo tx skb and update net stats. Peripherals use rx-offload for
- * echo. timestamp is used for peripherals to ensure correct ordering
- * by rx-offload, and is ignored for non-peripherals.
- */
-static void m_can_tx_update_stats(struct m_can_classdev *cdev,
-				  unsigned int msg_mark,
-				  u32 timestamp)
-{
-	struct net_device *dev = cdev->net;
-	struct net_device_stats *stats = &dev->stats;
-
-	if (cdev->is_peripheral)
-		stats->tx_bytes +=
-			can_rx_offload_get_echo_skb(&cdev->offload,
-						    msg_mark,
-						    timestamp,
-						    NULL);
-	else
-		stats->tx_bytes += can_get_echo_skb(dev, msg_mark, NULL);
-
-	stats->tx_packets++;
-}
-
-static int m_can_echo_tx_event(struct net_device *dev)
+static void m_can_echo_tx_event(struct net_device *dev)
 {
-	u32 txe_count = 0;
-	u32 m_can_txefs;
 	u32 fgi = 0;
-	int i = 0;
 	unsigned int msg_mark;
 
 	struct m_can_classdev *cdev = netdev_priv(dev);
+	struct net_device_stats *stats = &dev->stats;
 
-	/* read tx event fifo status */
-	m_can_txefs = m_can_read(cdev, M_CAN_TXEFS);
-
-	/* Get Tx Event fifo element count */
-	txe_count = FIELD_GET(TXEFS_EFFL_MASK, m_can_txefs);
-
-	/* Get and process all sent elements */
-	for (i = 0; i < txe_count; i++) {
-		u32 txe, timestamp = 0;
-		int err;
-
-		/* retrieve get index */
-		fgi = FIELD_GET(TXEFS_EFGI_MASK, m_can_read(cdev, M_CAN_TXEFS));
-
-		/* get message marker, timestamp */
-		err = m_can_txe_fifo_read(cdev, fgi, 4, &txe);
-		if (err) {
-			netdev_err(dev, "TXE FIFO read returned %d\n", err);
-			return err;
-		}
-
-		msg_mark = FIELD_GET(TX_EVENT_MM_MASK, txe);
-		timestamp = FIELD_GET(TX_EVENT_TXTS_MASK, txe);
-
-		/* ack txe element */
-		m_can_write(cdev, M_CAN_TXEFA, FIELD_PREP(TXEFA_EFAI_MASK,
-							  fgi));
+	fgi = (m_can_read(cdev, M_CAN_TXEFS) & TXEFS_EFGI_MASK)
+		>> TXEFS_EFGI_SHIFT;
 
-		/* update stats */
-		m_can_tx_update_stats(cdev, msg_mark, timestamp);
-	}
+	/* get message marker */
+	msg_mark = (m_can_txe_fifo_read(cdev, fgi, 4) &
+			TX_EVENT_MM_MASK) >> TX_EVENT_MM_SHIFT;
+
+	/* ack txe element */
+	m_can_write(cdev, M_CAN_TXEFA, (TXEFA_EFAI_MASK &
+				(fgi << TXEFA_EFAI_SHIFT)));
 
-	return 0;
+	/* update stats */
+	stats->tx_bytes += can_get_echo_skb(dev, msg_mark, NULL);
+	stats->tx_packets++;
 }
 
 static irqreturn_t m_can_isr(int irq, void *dev_id)
 {
 	struct net_device *dev = (struct net_device *)dev_id;
 	struct m_can_classdev *cdev = netdev_priv(dev);
+	struct net_device_stats *stats = &dev->stats;
 	u32 ir;
-
-	if (pm_runtime_suspended(cdev->dev))
-		return IRQ_NONE;
 	ir = m_can_read(cdev, M_CAN_IR);
-	if(iw_mcan_prop)
-	{
-		if (ir != 0x1800 && ir != 0x1801 && ir != 0x0)
-			ir = 3;
-	}
-	else
-	{
-		if (!ir)
-			return IRQ_NONE;
-	}
-
 	/* ACK all irqs */
 	if (ir & IR_ALL_INT)
 		m_can_write(cdev, M_CAN_IR, ir);
 
 	cdev->ops->clear_interrupts(cdev);
+
 	/* schedule NAPI in case of
 	 * - rx IRQ
 	 * - state change IRQ
 	 * - bus error IRQ and bus error reporting
 	 */
+	if(ir == 0x0) /* Watchdog interrupt */
+	{
+		m_can_disable_all_interrupts(cdev);
+		m_can_rx_peripheral_rx(dev);
+		return IRQ_HANDLED;
+	}
+	
 	if(iw_mcan_prop)
 	{
-		if(ir == 0x0 || ir == 0x1) /* Watchdog interrupt */
-		{
-			m_can_disable_all_interrupts(cdev);
-			m_can_rx_peripheral_rx(dev);
-			return IRQ_HANDLED;
-		}
-
 		if ((ir & IR_RF0W) || (ir & IR_ERR_ALL_30X)) {
 			cdev->irqstatus = ir;
 			m_can_disable_all_interrupts(cdev);
 			if (!cdev->is_peripheral)
 				napi_schedule(&cdev->napi);
-			else if (m_can_rx_peripheral(dev) < 0)
-				goto out_fail;
+			else
+				m_can_rx_peripheral(dev);
 		}
 	}
 	else /* iw_mcan_prop */
@@ -1164,43 +973,24 @@
 			m_can_disable_all_interrupts(cdev);
 			if (!cdev->is_peripheral)
 				napi_schedule(&cdev->napi);
-			else if (m_can_rx_peripheral(dev) < 0)
-				goto out_fail;
+			else
+				m_can_rx_peripheral(dev);
 		}
 	} /* iw_mcan_prop */
-
 	if (cdev->version == 30) {
 		if (ir & IR_TC) {
 			/* Transmission Complete Interrupt*/
-			u32 timestamp = 0;
-
-			if (cdev->is_peripheral)
-				timestamp = m_can_get_timestamp(cdev);
-			m_can_tx_update_stats(cdev, 0, timestamp);
-
+			stats->tx_bytes += can_get_echo_skb(dev, 0, NULL);
+			stats->tx_packets++;
 			can_led_event(dev, CAN_LED_EVENT_TX);
 			netif_wake_queue(dev);
 		}
 	} else  {
-		if (ir & IR_TEFN) {
-			/* New TX FIFO Element arrived */
-			if (m_can_echo_tx_event(dev) != 0)
-				goto out_fail;
-
-			can_led_event(dev, CAN_LED_EVENT_TX);
-			if (netif_queue_stopped(dev) &&
-			    !m_can_tx_fifo_full(cdev))
-				netif_wake_queue(dev);
+		if (ir & IR_TFE) 
+		{
+			netif_wake_queue(dev);
 		}
 	}
-
-	if (cdev->is_peripheral)
-		can_rx_offload_threaded_irq_finish(&cdev->offload);
-
-	return IRQ_HANDLED;
-
-out_fail:
-	m_can_disable_all_interrupts(cdev);
 	return IRQ_HANDLED;
 }
 
@@ -1232,7 +1022,7 @@
 	.name = KBUILD_MODNAME,
 	.tseg1_min = 2,		/* Time segment 1 = prop_seg + phase_seg1 */
 	.tseg1_max = 256,
-	.tseg2_min = 2,		/* Time segment 2 = phase_seg2 */
+	.tseg2_min = 1,		/* Time segment 2 = phase_seg2 */
 	.tseg2_max = 128,
 	.sjw_max = 128,
 	.brp_min = 1,
@@ -1264,10 +1054,8 @@
 	sjw = bt->sjw - 1;
 	tseg1 = bt->prop_seg + bt->phase_seg1 - 1;
 	tseg2 = bt->phase_seg2 - 1;
-	reg_btp = FIELD_PREP(NBTP_NBRP_MASK, brp) |
-		  FIELD_PREP(NBTP_NSJW_MASK, sjw) |
-		  FIELD_PREP(NBTP_NTSEG1_MASK, tseg1) |
-		  FIELD_PREP(NBTP_NTSEG2_MASK, tseg2);
+	reg_btp = (brp << NBTP_NBRP_SHIFT) | (sjw << NBTP_NSJW_SHIFT) |
+		(tseg1 << NBTP_NTSEG1_SHIFT) | (tseg2 << NBTP_NTSEG2_SHIFT);
 	m_can_write(cdev, M_CAN_NBTP, reg_btp);
 
 	if (cdev->can.ctrlmode & CAN_CTRLMODE_FD) {
@@ -1294,23 +1082,22 @@
 			 */
 			tdco = (cdev->can.clock.freq / 1000) *
 				ssp / dbt->bitrate;
-
 			/* Max valid TDCO value is 127 */
 			if (tdco > 127) {
 				netdev_warn(dev, "TDCO value of %u is beyond maximum. Using maximum possible value\n",
-					    tdco);
+						tdco);
 				tdco = 127;
 			}
 
 			reg_btp |= DBTP_TDC;
 			m_can_write(cdev, M_CAN_TDCR,
-				    FIELD_PREP(TDCR_TDCO_MASK, tdco));
+					tdco << TDCR_TDCO_SHIFT);
 		}
 
-		reg_btp |= FIELD_PREP(DBTP_DBRP_MASK, brp) |
-			FIELD_PREP(DBTP_DSJW_MASK, sjw) |
-			FIELD_PREP(DBTP_DTSEG1_MASK, tseg1) |
-			FIELD_PREP(DBTP_DTSEG2_MASK, tseg2);
+		reg_btp |= (brp << DBTP_DBRP_SHIFT) |
+			(sjw << DBTP_DSJW_SHIFT) |
+			(tseg1 << DBTP_DTSEG1_SHIFT) |
+			(tseg2 << DBTP_DTSEG2_SHIFT);
 
 		m_can_write(cdev, M_CAN_DBTP, reg_btp);
 	}
@@ -1319,8 +1106,8 @@
 }
 
 /*
- * Set the "iw_mcan_prop" flag to execute iWave specific changes.
- */
+* Set the "iw_mcan_prop" flag to execute iWave specific changes
+*/
 void m_can_set_iw_mcan_prop_flag( void )
 {
 	iw_mcan_prop = true;
@@ -1335,95 +1122,87 @@
  *		- >= v3.1.x: TX FIFO is used
  * - configure mode
  * - setup bittiming
- * - configure timestamp generation
  */
 static void m_can_chip_config(struct net_device *dev)
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
 	u32 cccr, test;
-
-	if (!iw_mcan_prop)
-	{
-		m_can_config_endisable(cdev, true);
-	}
+	int k;
 
 	/* RX Buffer/FIFO Element Size 64 bytes data field */
-	m_can_write(cdev, M_CAN_RXESC,
-		    FIELD_PREP(RXESC_RBDS_MASK, RXESC_64B) |
-		    FIELD_PREP(RXESC_F1DS_MASK, RXESC_64B) |
-		    FIELD_PREP(RXESC_F0DS_MASK, RXESC_64B));
+	m_can_write(cdev, M_CAN_RXESC, M_CAN_RXESC_64BYTES);
 
 	/* Accept Non-matching Frames Into FIFO 0 */
 	m_can_write(cdev, M_CAN_GFC, 0x0);
 
 	if (cdev->version == 30) {
 		/* only support one Tx Buffer currently */
-		m_can_write(cdev, M_CAN_TXBC, FIELD_PREP(TXBC_NDTB_MASK, 1) |
-			    cdev->mcfg[MRAM_TXB].off);
+		m_can_write(cdev, M_CAN_TXBC, (1 << TXBC_NDTB_SHIFT) |
+				cdev->mcfg[MRAM_TXB].off);
 	} else {
 		/* TX FIFO is used for newer IP Core versions */
 		m_can_write(cdev, M_CAN_TXBC,
-			    FIELD_PREP(TXBC_TFQS_MASK,
-				       cdev->mcfg[MRAM_TXB].num) |
-			    cdev->mcfg[MRAM_TXB].off);
+				(cdev->mcfg[MRAM_TXB].num << TXBC_TFQS_SHIFT) |
+				(cdev->mcfg[MRAM_TXB].off));
 	}
 
 	/* support 64 bytes payload */
-	m_can_write(cdev, M_CAN_TXESC,
-		    FIELD_PREP(TXESC_TBDS_MASK, TXESC_TBDS_64B));
+	m_can_write(cdev, M_CAN_TXESC, TXESC_TBDS_64BYTES);
 
 	/* TX Event FIFO */
 	if (cdev->version == 30) {
-		m_can_write(cdev, M_CAN_TXEFC,
-			    FIELD_PREP(TXEFC_EFS_MASK, 1) |
-			    cdev->mcfg[MRAM_TXE].off);
+		m_can_write(cdev, M_CAN_TXEFC, (1 << TXEFC_EFS_SHIFT) |
+				cdev->mcfg[MRAM_TXE].off);
 	} else {
 		/* Full TX Event FIFO is used */
 		m_can_write(cdev, M_CAN_TXEFC,
-			    FIELD_PREP(TXEFC_EFS_MASK,
-				       cdev->mcfg[MRAM_TXE].num) |
-			    cdev->mcfg[MRAM_TXE].off);
+				((cdev->mcfg[MRAM_TXE].num << TXEFC_EFS_SHIFT)
+				 & TXEFC_EFS_MASK) |
+				cdev->mcfg[MRAM_TXE].off);
 	}
-
-	/* rx fifo configuration, blocking mode, fifo size 1 */
+	
 	if (iw_mcan_prop)
 	{
+		/* rx fifo configuration, blocking mode, fifo size 1 */
 		m_can_write(cdev, M_CAN_RXF0C,
 				(cdev->mcfg[MRAM_RXF0].num << RXFC_FS_SHIFT) |
-				cdev->mcfg[MRAM_RXF0].off | 0x99000000);
+				cdev->mcfg[MRAM_RXF0].off | 0x99000000 /*| 0x81200000*/);
+		//Added by iwave
+		k = cdev->mcfg[MRAM_RXF0].num << RXFC_FS_SHIFT | cdev->mcfg[MRAM_RXF0].off ;
 
 		m_can_write(cdev, M_CAN_RXF1C,
 				(cdev->mcfg[MRAM_RXF1].num << RXFC_FS_SHIFT) |
-				cdev->mcfg[MRAM_RXF1].off | 0x99000000);
+				cdev->mcfg[MRAM_RXF1].off | 0x99000000 /*| 0x81200000 */);
 	}
 	else /* iw_mcan_prop */
 	{
+		/* rx fifo configuration, blocking mode, fifo size 1 */
 		m_can_write(cdev, M_CAN_RXF0C,
-				FIELD_PREP(RXFC_FS_MASK, cdev->mcfg[MRAM_RXF0].num) |
+				(cdev->mcfg[MRAM_RXF0].num << RXFC_FS_SHIFT) |
 				cdev->mcfg[MRAM_RXF0].off);
 
 		m_can_write(cdev, M_CAN_RXF1C,
-				FIELD_PREP(RXFC_FS_MASK, cdev->mcfg[MRAM_RXF1].num) |
+				(cdev->mcfg[MRAM_RXF1].num << RXFC_FS_SHIFT) |
 				cdev->mcfg[MRAM_RXF1].off);
 	} /* iw_mcan_prop */
-
+	
 	cccr = m_can_read(cdev, M_CAN_CCCR);
 	test = m_can_read(cdev, M_CAN_TEST);
 	test &= ~TEST_LBCK;
 	if (cdev->version == 30) {
 		/* Version 3.0.x */
 
-		cccr &= ~(CCCR_TEST | CCCR_MON | CCCR_DAR |
-			  FIELD_PREP(CCCR_CMR_MASK, FIELD_MAX(CCCR_CMR_MASK)) |
-			  FIELD_PREP(CCCR_CME_MASK, FIELD_MAX(CCCR_CME_MASK)));
+		cccr &= ~(CCCR_TEST | CCCR_MON |
+				(CCCR_CMR_MASK << CCCR_CMR_SHIFT) |
+				(CCCR_CME_MASK << CCCR_CME_SHIFT));
 
 		if (cdev->can.ctrlmode & CAN_CTRLMODE_FD)
-			cccr |= FIELD_PREP(CCCR_CME_MASK, CCCR_CME_CANFD_BRS);
+			cccr |= CCCR_CME_CANFD_BRS << CCCR_CME_SHIFT;
 
 	} else {
 		/* Version 3.1.x or 3.2.x */
 		cccr &= ~(CCCR_TEST | CCCR_MON | CCCR_BRSE | CCCR_FDOE |
-			  CCCR_NISO | CCCR_DAR);
+				CCCR_NISO);
 
 		/* Only 3.2.x has NISO Bit implemented */
 		if (cdev->can.ctrlmode & CAN_CTRLMODE_FD_NON_ISO)
@@ -1433,20 +1212,10 @@
 			cccr |= (CCCR_BRSE | CCCR_FDOE);
 	}
 
-	/* Loopback Mode */
-	if (cdev->can.ctrlmode & CAN_CTRLMODE_LOOPBACK) {
-		cccr |= CCCR_TEST | CCCR_MON;
-		test |= TEST_LBCK;
-	}
-
 	/* Enable Monitoring (all versions) */
 	if (cdev->can.ctrlmode & CAN_CTRLMODE_LISTENONLY)
 		cccr |= CCCR_MON;
 
-	/* Disable Auto Retransmission (all versions) */
-	if (cdev->can.ctrlmode & CAN_CTRLMODE_ONE_SHOT)
-		cccr |= CCCR_DAR;
-
 	/* Write config */
 	m_can_write(cdev, M_CAN_CCCR, cccr);
 	m_can_write(cdev, M_CAN_TEST, test);
@@ -1456,29 +1225,21 @@
 	if (!(cdev->can.ctrlmode & CAN_CTRLMODE_BERR_REPORTING))
 		if (cdev->version == 30)
 			m_can_write(cdev, M_CAN_IE, IR_ALL_INT &
-				    ~(IR_ERR_LEC_30X));
+					~(IR_ERR_LEC_30X));
 		else
-			m_can_write(cdev, M_CAN_IE, IR_ALL_INT &
-				    ~(IR_ERR_LEC_31X));
+			m_can_write(cdev, M_CAN_IE, IR_ALL_INT_CUSTOM_NO_TX &
+					~(IR_ERR_LEC_31X));
 	else
-		m_can_write(cdev, M_CAN_IE, IR_ALL_INT);
+		m_can_write(cdev, M_CAN_IE, IR_ALL_INT_CUSTOM_NO_TX);
 
 	/* route all interrupts to INT0 */
 	m_can_write(cdev, M_CAN_ILS, ILS_ALL_INT0);
 
 	/* set bittiming params */
 	m_can_set_bittiming(dev);
-
-	/* enable internal timestamp generation, with a prescalar of 16. The
-	 * prescalar is applied to the nominal bit timing
-	 */
-	m_can_write(cdev, M_CAN_TSCC, FIELD_PREP(TSCC_TCP_MASK, 0xf));
-
+	
 	m_can_config_endisable(cdev, false);
-	if(iw_mcan_prop)
-	{
-		mode = true;
-	}
+	mode=true;
 
 	if (cdev->ops->init)
 		cdev->ops->init(cdev);
@@ -1499,13 +1260,13 @@
 static int m_can_set_mode(struct net_device *dev, enum can_mode mode)
 {
 	switch (mode) {
-	case CAN_MODE_START:
-		m_can_clean(dev);
-		m_can_start(dev);
-		netif_wake_queue(dev);
-		break;
-	default:
-		return -EOPNOTSUPP;
+		case CAN_MODE_START:
+			m_can_clean(dev);
+			m_can_start(dev);
+			netif_wake_queue(dev);
+			break;
+		default:
+			return -EOPNOTSUPP;
 	}
 
 	return 0;
@@ -1527,8 +1288,8 @@
 	 * Example: Version 3.2.1 => rel = 3; step = 2; substep = 1;
 	 */
 	crel_reg = m_can_read(cdev, M_CAN_CREL);
-	rel = (u8)FIELD_GET(CREL_REL_MASK, crel_reg);
-	step = (u8)FIELD_GET(CREL_STEP_MASK, crel_reg);
+	rel = (u8)((crel_reg & CREL_REL_MASK) >> CREL_REL_SHIFT);
+	step = (u8)((crel_reg & CREL_STEP_MASK) >> CREL_STEP_SHIFT);
 
 	if (rel == 3) {
 		/* M_CAN v3.x.y: create return value */
@@ -1550,11 +1311,6 @@
 	int niso_timeout = -ETIMEDOUT;
 	int i;
 
-	if(!iw_mcan_prop)
-	{
-		m_can_config_endisable(cdev, true);
-	}
-
 	cccr_reg = m_can_read(cdev, M_CAN_CCCR);
 	cccr_reg |= CCCR_NISO;
 	m_can_write(cdev, M_CAN_CCCR, cccr_reg);
@@ -1571,93 +1327,83 @@
 
 	/* Clear NISO */
 	cccr_reg &= ~(CCCR_NISO);
-	if(iw_mcan_prop)
-	{
-		m_can_write(cdev, M_CAN_CCCR, cccr_reg | CCCR_FDOE | CCCR_BRSE);
-	}
-	else
-	{
-		m_can_write(cdev, M_CAN_CCCR, cccr_reg);
-		m_can_config_endisable(cdev, false);
-	}
+	m_can_write(cdev, M_CAN_CCCR, cccr_reg | CCCR_FDOE | CCCR_BRSE);
+
 
 	/* return false if time out (-ETIMEDOUT), else return true */
 	return !niso_timeout;
 }
 
-static int m_can_dev_setup(struct m_can_classdev *cdev)
+static int m_can_dev_setup(struct m_can_classdev *m_can_dev)
 {
-	struct net_device *dev = cdev->net;
+	struct net_device *dev = m_can_dev->net;
 	int m_can_version;
 
-	m_can_version = m_can_check_core_release(cdev);
+	m_can_version = m_can_check_core_release(m_can_dev);
 	/* return if unsupported version */
 	if (!m_can_version) {
-		dev_err(cdev->dev, "Unsupported version number: %2d",
-			m_can_version);
+		dev_err(m_can_dev->dev, "Unsupported version number: %2d",
+				m_can_version);
 		return -EINVAL;
 	}
 
-	if (!cdev->is_peripheral)
-		netif_napi_add(dev, &cdev->napi,
-			       m_can_poll, M_CAN_NAPI_WEIGHT);
+	if (!m_can_dev->is_peripheral)
+		netif_napi_add(dev, &m_can_dev->napi,
+				m_can_poll, M_CAN_NAPI_WEIGHT);
 
 	/* Shared properties of all M_CAN versions */
-	cdev->version = m_can_version;
-	cdev->can.do_set_mode = m_can_set_mode;
-	cdev->can.do_get_berr_counter = m_can_get_berr_counter;
+	m_can_dev->version = m_can_version;
+	m_can_dev->can.do_set_mode = m_can_set_mode;
+	m_can_dev->can.do_get_berr_counter = m_can_get_berr_counter;
 
 	/* Set M_CAN supported operations */
-	cdev->can.ctrlmode_supported = CAN_CTRLMODE_LOOPBACK |
+	m_can_dev->can.ctrlmode_supported = /*CAN_CTRLMODE_LOOPBACK |*/
 		CAN_CTRLMODE_LISTENONLY |
 		CAN_CTRLMODE_BERR_REPORTING |
-		CAN_CTRLMODE_FD |
-		CAN_CTRLMODE_ONE_SHOT;
+		CAN_CTRLMODE_FD;
 
 	/* Set properties depending on M_CAN version */
-	switch (cdev->version) {
-	case 30:
-		/* CAN_CTRLMODE_FD_NON_ISO is fixed with M_CAN IP v3.0.x */
-		can_set_static_ctrlmode(dev, CAN_CTRLMODE_FD_NON_ISO);
-		cdev->can.bittiming_const = cdev->bit_timing ?
-			cdev->bit_timing : &m_can_bittiming_const_30X;
-
-		cdev->can.data_bittiming_const = cdev->data_timing ?
-			cdev->data_timing :
-			&m_can_data_bittiming_const_30X;
-		break;
-	case 31:
-		/* CAN_CTRLMODE_FD_NON_ISO is fixed with M_CAN IP v3.1.x */
-		can_set_static_ctrlmode(dev, CAN_CTRLMODE_FD_NON_ISO);
-		cdev->can.bittiming_const = cdev->bit_timing ?
-			cdev->bit_timing : &m_can_bittiming_const_31X;
-
-		cdev->can.data_bittiming_const = cdev->data_timing ?
-			cdev->data_timing :
-			&m_can_data_bittiming_const_31X;
-		break;
-	case 32:
-	case 33:
-		/* Support both MCAN version v3.2.x and v3.3.0 */
-		cdev->can.bittiming_const = cdev->bit_timing ?
-			cdev->bit_timing : &m_can_bittiming_const_31X;
-
-		cdev->can.data_bittiming_const = cdev->data_timing ?
-			cdev->data_timing :
-			&m_can_data_bittiming_const_31X;
-
-		cdev->can.ctrlmode_supported |=
-			(m_can_niso_supported(cdev) ?
-			 CAN_CTRLMODE_FD_NON_ISO : 0);
-		break;
-	default:
-		dev_err(cdev->dev, "Unsupported version number: %2d",
-			cdev->version);
-		return -EINVAL;
+	switch (m_can_dev->version) {
+		case 30:
+			/* CAN_CTRLMODE_FD_NON_ISO is fixed with M_CAN IP v3.0.x */
+			can_set_static_ctrlmode(dev, CAN_CTRLMODE_FD_NON_ISO);
+			m_can_dev->can.bittiming_const = m_can_dev->bit_timing ?
+				m_can_dev->bit_timing : &m_can_bittiming_const_30X;
+
+			m_can_dev->can.data_bittiming_const = m_can_dev->data_timing ?
+				m_can_dev->data_timing :
+				&m_can_data_bittiming_const_30X;
+			break;
+		case 31:
+			/* CAN_CTRLMODE_FD_NON_ISO is fixed with M_CAN IP v3.1.x */
+			can_set_static_ctrlmode(dev, CAN_CTRLMODE_FD_NON_ISO);
+			m_can_dev->can.bittiming_const = m_can_dev->bit_timing ?
+				m_can_dev->bit_timing : &m_can_bittiming_const_31X;
+
+			m_can_dev->can.data_bittiming_const = m_can_dev->data_timing ?
+				m_can_dev->data_timing :
+				&m_can_data_bittiming_const_31X;
+			break;
+		case 32:
+			m_can_dev->can.bittiming_const = m_can_dev->bit_timing ?
+				m_can_dev->bit_timing : &m_can_bittiming_const_31X;
+
+			m_can_dev->can.data_bittiming_const = m_can_dev->data_timing ?
+				m_can_dev->data_timing :
+				&m_can_data_bittiming_const_31X;
+			m_can_dev->can.ctrlmode_supported |=
+				(m_can_niso_supported(m_can_dev)
+				 ? CAN_CTRLMODE_FD_NON_ISO
+				 : 0);
+			break;
+		default:
+			dev_err(m_can_dev->dev, "Unsupported version number: %2d",
+					m_can_dev->version);
+			return -EINVAL;
 	}
 
-	if (cdev->ops->init)
-		cdev->ops->init(cdev);
+	if (m_can_dev->ops->init)
+		m_can_dev->ops->init(m_can_dev);
 
 	return 0;
 }
@@ -1669,9 +1415,6 @@
 	/* disable all interrupts */
 	m_can_disable_all_interrupts(cdev);
 
-	/* Set init mode to disengage from the network */
-	m_can_config_endisable(cdev, true);
-
 	/* set the state as STOPPED */
 	cdev->can.state = CAN_STATE_STOPPED;
 }
@@ -1695,14 +1438,9 @@
 		cdev->tx_wq = NULL;
 	}
 
-	if (cdev->is_peripheral)
-		can_rx_offload_disable(&cdev->offload);
-
 	close_candev(dev);
 	can_led_event(dev, CAN_LED_EVENT_STOP);
 
-	//phy_power_off(cdev->transceiver);
-
 	return 0;
 }
 
@@ -1712,7 +1450,6 @@
 	/*get wrap around for loopback skb index */
 	unsigned int wrap = cdev->can.echo_skb_max;
 	int next_idx;
-
 	/* calculate next index */
 	next_idx = (++putidx >= wrap ? 0 : putidx);
 
@@ -1725,88 +1462,61 @@
 	struct canfd_frame *cf = (struct canfd_frame *)cdev->tx_skb->data;
 	struct net_device *dev = cdev->net;
 	struct sk_buff *skb = cdev->tx_skb;
-	struct id_and_dlc fifo_header;
-	u32 cccr, fdflags;
-	int err;
+	u32 id, cccr, fdflags;
+	int i;
 	int putidx;
-
-	cdev->tx_skb = NULL;
-
 	/* Generate ID field for TX buffer Element */
 	/* Common to all supported M_CAN versions */
 	if (cf->can_id & CAN_EFF_FLAG) {
-		fifo_header.id = cf->can_id & CAN_EFF_MASK;
-		fifo_header.id |= TX_BUF_XTD;
+		id = cf->can_id & CAN_EFF_MASK;
+		id |= TX_BUF_XTD;
 	} else {
-		fifo_header.id = ((cf->can_id & CAN_SFF_MASK) << 18);
+		id = ((cf->can_id & CAN_SFF_MASK) << 18);
 	}
 
 	if (cf->can_id & CAN_RTR_FLAG)
-		fifo_header.id |= TX_BUF_RTR;
+		id |= TX_BUF_RTR;
 
 	if (cdev->version == 30) {
 		netif_stop_queue(dev);
 
-		fifo_header.dlc = can_fd_len2dlc(cf->len) << 16;
+		/* message ram configuration */
+		m_can_fifo_write(cdev, 0, M_CAN_FIFO_ID, id);
+		m_can_fifo_write(cdev, 0, M_CAN_FIFO_DLC,
+				can_fd_len2dlc(cf->len) << 16);
+
+		for (i = 0; i < cf->len; i += 4)
+			m_can_fifo_write(cdev, 0,
+					M_CAN_FIFO_DATA(i / 4),
+					*(u32 *)(cf->data + i));
 
-		/* Write the frame ID, DLC, and payload to the FIFO element. */
-		err = m_can_fifo_write(cdev, 0, M_CAN_FIFO_ID, &fifo_header, 2);
-		if (err)
-			goto out_fail;
-
-		err = m_can_fifo_write(cdev, 0, M_CAN_FIFO_DATA,
-				       cf->data, DIV_ROUND_UP(cf->len, 4));
-		if (err)
-			goto out_fail;
+		can_put_echo_skb(skb, dev, 0,0);
 
 		if (cdev->can.ctrlmode & CAN_CTRLMODE_FD) {
 			cccr = m_can_read(cdev, M_CAN_CCCR);
-			cccr &= ~CCCR_CMR_MASK;
+			cccr &= ~(CCCR_CMR_MASK << CCCR_CMR_SHIFT);
 			if (can_is_canfd_skb(skb)) {
 				if (cf->flags & CANFD_BRS)
-					cccr |= FIELD_PREP(CCCR_CMR_MASK,
-							   CCCR_CMR_CANFD_BRS);
+					cccr |= CCCR_CMR_CANFD_BRS <<
+						CCCR_CMR_SHIFT;
 				else
-					cccr |= FIELD_PREP(CCCR_CMR_MASK,
-							   CCCR_CMR_CANFD);
+					cccr |= CCCR_CMR_CANFD <<
+						CCCR_CMR_SHIFT;
 			} else {
-				cccr |= FIELD_PREP(CCCR_CMR_MASK, CCCR_CMR_CAN);
+				cccr |= CCCR_CMR_CAN << CCCR_CMR_SHIFT;
 			}
 			m_can_write(cdev, M_CAN_CCCR, cccr);
 		}
 		m_can_write(cdev, M_CAN_TXBTIE, 0x1);
-
-		can_put_echo_skb(skb, dev, 0, 0);
-
 		m_can_write(cdev, M_CAN_TXBAR, 0x1);
 		/* End of xmit function for version 3.0.x */
 	} else {
 		/* Transmit routine for version >= v3.1.x */
-
-		/* Check if FIFO full */
-		if (m_can_tx_fifo_full(cdev)) {
-			/* This shouldn't happen */
-			netif_stop_queue(dev);
-			netdev_warn(dev,
-				    "TX queue active although FIFO is full.");
-
-			if (cdev->is_peripheral) {
-				kfree_skb(skb);
-				dev->stats.tx_dropped++;
-				return NETDEV_TX_OK;
-			} else {
-				return NETDEV_TX_BUSY;
-			}
-		}
-
 		/* get put index for frame */
-		putidx = FIELD_GET(TXFQS_TFQPI_MASK,
-				   m_can_read(cdev, M_CAN_TXFQS));
-
-		/* Construct DLC Field, with CAN-FD configuration.
-		 * Use the put index of the fifo as the message marker,
-		 * used in the TX interrupt for sending the correct echo frame.
-		 */
+		putidx = ((m_can_read(cdev, M_CAN_TXFQS) & TXFQS_TFQPI_MASK)
+				>> TXFQS_TFQPI_SHIFT);
+		/* Write ID Field to FIFO Element */
+		m_can_fifo_write(cdev, putidx, M_CAN_FIFO_ID, id);
 
 		/* get CAN FD configuration of frame */
 		fdflags = 0;
@@ -1816,62 +1526,59 @@
 				fdflags |= TX_BUF_BRS;
 		}
 
-		fifo_header.dlc = FIELD_PREP(TX_BUF_MM_MASK, putidx) |
-			FIELD_PREP(TX_BUF_DLC_MASK, can_fd_len2dlc(cf->len)) |
-			fdflags | TX_BUF_EFC;
-		err = m_can_fifo_write(cdev, putidx, M_CAN_FIFO_ID, &fifo_header, 2);
-		if (err)
-			goto out_fail;
-
-		err = m_can_fifo_write(cdev, putidx, M_CAN_FIFO_DATA,
-				       cf->data, DIV_ROUND_UP(cf->len, 4));
-		if (err)
-			goto out_fail;
+		/* Construct DLC Field. Also contains CAN-FD configuration
+		 * use put index of fifo as message marker
+		 * it is used in TX interrupt for
+		 * sending the correct echo frame
+		 */
+		m_can_fifo_write(cdev, putidx, M_CAN_FIFO_DLC,
+				((putidx << TX_BUF_MM_SHIFT) &
+				 TX_BUF_MM_MASK) |
+				(can_fd_len2dlc(cf->len) << 16) |
+				fdflags | TX_BUF_EFC);
+
+		for (i = 0; i < cf->len; i += 4)
+			m_can_fifo_write(cdev, putidx, M_CAN_FIFO_DATA(i / 4),
+					*(u32 *)(cf->data + i));
 
 		/* Push loopback echo.
 		 * Will be looped back on TX interrupt based on message marker
 		 */
-		can_put_echo_skb(skb, dev, putidx, 0);
+		can_put_echo_skb(skb, dev, putidx,0);
 
 		/* Enable TX FIFO element to start transfer  */
 		m_can_write(cdev, M_CAN_TXBAR, (1 << putidx));
-
-		/* stop network queue if fifo full */
-		if (m_can_tx_fifo_full(cdev) ||
-		    m_can_next_echo_skb_occupied(dev, putidx))
-			netif_stop_queue(dev);
+		if (m_can_tx_fifo_full(cdev) )
+		{
+			//Don't start the network and enable Transmit FIFO enable interrupt
+			m_can_write(cdev, M_CAN_IE, IR_ALL_INT_CUSTOM_NO_TX);
+		}
+		else
+		{
+			netif_wake_queue(dev);			
+		}
 	}
-
+	
 	return NETDEV_TX_OK;
-
-out_fail:
-	netdev_err(dev, "FIFO write returned %d\n", err);
-	m_can_disable_all_interrupts(cdev);
-	return NETDEV_TX_BUSY;
 }
 
 static void m_can_tx_work_queue(struct work_struct *ws)
 {
 	struct m_can_classdev *cdev = container_of(ws, struct m_can_classdev,
-						   tx_work);
+			tx_work);
 
 	m_can_tx_handler(cdev);
+	cdev->tx_skb = NULL;
 }
 
 static netdev_tx_t m_can_start_xmit(struct sk_buff *skb,
-				    struct net_device *dev)
+		struct net_device *dev)
 {
 	struct m_can_classdev *cdev = netdev_priv(dev);
 
-	if (can_dropped_invalid_skb(dev, skb))
-		return NETDEV_TX_OK;
-
 	if (cdev->is_peripheral) {
 		if (cdev->tx_skb) {
-			if(!iw_mcan_prop)
-			{
-				netdev_err(dev, "hard_xmit called while tx busy\n");
-			}
+			//netdev_err(dev, "hard_xmit called while tx busy\n");
 			return NETDEV_TX_BUSY;
 		}
 
@@ -1886,7 +1593,6 @@
 			cdev->tx_skb = skb;
 			netif_stop_queue(cdev->net);
 			queue_work(cdev->tx_wq, &cdev->tx_work);
-			netif_start_queue(cdev->net);  /* 1904 normal */
 		}
 	} else {
 		cdev->tx_skb = skb;
@@ -1901,29 +1607,20 @@
 	struct m_can_classdev *cdev = netdev_priv(dev);
 	int err;
 
-	//err = phy_power_on(cdev->transceiver);
-	//if (err)
-	//	return err;
-
 	err = m_can_clk_start(cdev);
 	if (err)
-	//	goto out_phy_power_off;
-
+		return err;
 	/* open the can device */
 	err = open_candev(dev);
 	if (err) {
 		netdev_err(dev, "failed to open can device\n");
 		goto exit_disable_clks;
 	}
-
-	if (cdev->is_peripheral)
-		can_rx_offload_enable(&cdev->offload);
-
 	/* register interrupt handler */
 	if (cdev->is_peripheral) {
 		cdev->tx_skb = NULL;
 		cdev->tx_wq = alloc_workqueue("mcan_wq",
-					      WQ_FREEZABLE | WQ_MEM_RECLAIM, 0);
+				WQ_FREEZABLE | WQ_MEM_RECLAIM, 0);
 		if (!cdev->tx_wq) {
 			err = -ENOMEM;
 			goto out_wq_fail;
@@ -1932,11 +1629,11 @@
 		INIT_WORK(&cdev->tx_work, m_can_tx_work_queue);
 
 		err = request_threaded_irq(dev->irq, NULL, m_can_isr,
-					   IRQF_ONESHOT,
-					   dev->name, dev);
+				IRQF_ONESHOT | IRQF_TRIGGER_FALLING,
+				dev->name, dev);
 	} else {
 		err = request_irq(dev->irq, m_can_isr, IRQF_SHARED, dev->name,
-				  dev);
+				dev);
 	}
 
 	if (err < 0) {
@@ -1960,13 +1657,9 @@
 	if (cdev->is_peripheral)
 		destroy_workqueue(cdev->tx_wq);
 out_wq_fail:
-	if (cdev->is_peripheral)
-		can_rx_offload_disable(&cdev->offload);
 	close_candev(dev);
 exit_disable_clks:
 	m_can_clk_stop(cdev);
-//out_phy_power_off:
-//	phy_power_off(cdev->transceiver);
 	return err;
 }
 
@@ -1979,14 +1672,14 @@
 
 static int register_m_can_dev(struct net_device *dev)
 {
-	dev->flags |= IFF_ECHO;	/* we support local echo */
+	//dev->flags |= IFF_ECHO;	/* we support local echo */
 	dev->netdev_ops = &m_can_netdev_ops;
 
 	return register_candev(dev);
 }
 
 static void m_can_of_parse_mram(struct m_can_classdev *cdev,
-				const u32 *mram_config_vals)
+		const u32 *mram_config_vals)
 {
 	cdev->mcfg[MRAM_SIDF].off = mram_config_vals[0];
 	cdev->mcfg[MRAM_SIDF].num = mram_config_vals[1];
@@ -1996,11 +1689,11 @@
 	cdev->mcfg[MRAM_RXF0].off = cdev->mcfg[MRAM_XIDF].off +
 		cdev->mcfg[MRAM_XIDF].num * XIDF_ELEMENT_SIZE;
 	cdev->mcfg[MRAM_RXF0].num = mram_config_vals[3] &
-		FIELD_MAX(RXFC_FS_MASK);
+		(RXFC_FS_MASK >> RXFC_FS_SHIFT);
 	cdev->mcfg[MRAM_RXF1].off = cdev->mcfg[MRAM_RXF0].off +
 		cdev->mcfg[MRAM_RXF0].num * RXF0_ELEMENT_SIZE;
 	cdev->mcfg[MRAM_RXF1].num = mram_config_vals[4] &
-		FIELD_MAX(RXFC_FS_MASK);
+		(RXFC_FS_MASK >> RXFC_FS_SHIFT);
 	cdev->mcfg[MRAM_RXB].off = cdev->mcfg[MRAM_RXF1].off +
 		cdev->mcfg[MRAM_RXF1].num * RXF1_ELEMENT_SIZE;
 	cdev->mcfg[MRAM_RXB].num = mram_config_vals[5];
@@ -2010,62 +1703,51 @@
 	cdev->mcfg[MRAM_TXB].off = cdev->mcfg[MRAM_TXE].off +
 		cdev->mcfg[MRAM_TXE].num * TXE_ELEMENT_SIZE;
 	cdev->mcfg[MRAM_TXB].num = mram_config_vals[7] &
-		FIELD_MAX(TXBC_NDTB_MASK);
+		(TXBC_NDTB_MASK >> TXBC_NDTB_SHIFT);
 
 	dev_dbg(cdev->dev,
-		"sidf 0x%x %d xidf 0x%x %d rxf0 0x%x %d rxf1 0x%x %d rxb 0x%x %d txe 0x%x %d txb 0x%x %d\n",
-		cdev->mcfg[MRAM_SIDF].off, cdev->mcfg[MRAM_SIDF].num,
-		cdev->mcfg[MRAM_XIDF].off, cdev->mcfg[MRAM_XIDF].num,
-		cdev->mcfg[MRAM_RXF0].off, cdev->mcfg[MRAM_RXF0].num,
-		cdev->mcfg[MRAM_RXF1].off, cdev->mcfg[MRAM_RXF1].num,
-		cdev->mcfg[MRAM_RXB].off, cdev->mcfg[MRAM_RXB].num,
-		cdev->mcfg[MRAM_TXE].off, cdev->mcfg[MRAM_TXE].num,
-		cdev->mcfg[MRAM_TXB].off, cdev->mcfg[MRAM_TXB].num);
+			"sidf 0x%x %d xidf 0x%x %d rxf0 0x%x %d rxf1 0x%x %d rxb 0x%x %d txe 0x%x %d txb 0x%x %d\n",
+			cdev->mcfg[MRAM_SIDF].off, cdev->mcfg[MRAM_SIDF].num,
+			cdev->mcfg[MRAM_XIDF].off, cdev->mcfg[MRAM_XIDF].num,
+			cdev->mcfg[MRAM_RXF0].off, cdev->mcfg[MRAM_RXF0].num,
+			cdev->mcfg[MRAM_RXF1].off, cdev->mcfg[MRAM_RXF1].num,
+			cdev->mcfg[MRAM_RXB].off, cdev->mcfg[MRAM_RXB].num,
+			cdev->mcfg[MRAM_TXE].off, cdev->mcfg[MRAM_TXE].num,
+			cdev->mcfg[MRAM_TXB].off, cdev->mcfg[MRAM_TXB].num);
 }
 
-int m_can_init_ram(struct m_can_classdev *cdev)
+void m_can_init_ram(struct m_can_classdev *cdev)
 {
 	int end, i, start;
-	int err = 0;
-
-	if(iw_mcan_prop)
-	{
-		if(mode == false)
-		{
-			m_can_config_endisable(cdev, true);
-		}
-		if(mode == true)
-		{
-			mode = false;
-		}
-	}
-
 	/* initialize the entire Message RAM in use to avoid possible
 	 * ECC/parity checksum errors when reading an uninitialized buffer
 	 */
+	if(mode==false)
+	{
+		m_can_config_endisable(cdev, true);
+	}
+	if(mode==true)
+	{
+		mode=false;
+	}
 	start = cdev->mcfg[MRAM_SIDF].off;
 	end = cdev->mcfg[MRAM_TXB].off +
 		cdev->mcfg[MRAM_TXB].num * TXB_ELEMENT_SIZE;
 
-	for (i = start; i < end; i += 4) {
-		err = m_can_fifo_write_no_off(cdev, i, 0x0);
-		if (err)
-			break;
-	}
-
-	return err;
+	for (i = start; i < end; i += 4)
+		m_can_fifo_write_no_off(cdev, i, 0x0);	
 }
 EXPORT_SYMBOL_GPL(m_can_init_ram);
 
-int m_can_class_get_clocks(struct m_can_classdev *cdev)
+int m_can_class_get_clocks(struct m_can_classdev *m_can_dev)
 {
 	int ret = 0;
 
-	cdev->hclk = devm_clk_get(cdev->dev, "hclk");
-	cdev->cclk = devm_clk_get(cdev->dev, "cclk");
+	m_can_dev->hclk = devm_clk_get(m_can_dev->dev, "hclk");
+	m_can_dev->cclk = devm_clk_get(m_can_dev->dev, "cclk");
 
-	if (IS_ERR(cdev->cclk)) {
-		dev_err(cdev->dev, "no clock found\n");
+	if (IS_ERR(m_can_dev->cclk)) {
+		dev_err(m_can_dev->dev, "no clock found\n");
 		ret = -ENODEV;
 	}
 
@@ -2073,8 +1755,7 @@
 }
 EXPORT_SYMBOL_GPL(m_can_class_get_clocks);
 
-struct m_can_classdev *m_can_class_allocate_dev(struct device *dev,
-						int sizeof_priv)
+struct m_can_classdev *m_can_class_allocate_dev(struct device *dev)
 {
 	struct m_can_classdev *class_dev = NULL;
 	u32 mram_config_vals[MRAM_CFG_LEN];
@@ -2083,9 +1764,9 @@
 	int ret;
 
 	ret = fwnode_property_read_u32_array(dev_fwnode(dev),
-					     "bosch,mram-cfg",
-					     mram_config_vals,
-					     sizeof(mram_config_vals) / 4);
+			"bosch,mram-cfg",
+			mram_config_vals,
+			sizeof(mram_config_vals) / 4);
 	if (ret) {
 		dev_err(dev, "Could not get Message RAM configuration.");
 		goto out;
@@ -2097,13 +1778,18 @@
 	tx_fifo_size = mram_config_vals[7];
 
 	/* allocate the m_can device */
-	net_dev = alloc_candev(sizeof_priv, tx_fifo_size);
+	net_dev = alloc_candev(sizeof(*class_dev), tx_fifo_size);
 	if (!net_dev) {
 		dev_err(dev, "Failed to allocate CAN device");
 		goto out;
 	}
 
 	class_dev = netdev_priv(net_dev);
+	if (!class_dev) {
+		dev_err(dev, "Failed to init netdev cdevate");
+		goto out;
+	}
+
 	class_dev->net = net_dev;
 	class_dev->dev = dev;
 	SET_NETDEV_DEV(net_dev, dev);
@@ -2114,91 +1800,55 @@
 }
 EXPORT_SYMBOL_GPL(m_can_class_allocate_dev);
 
-void m_can_class_free_dev(struct net_device *net)
-{
-	free_candev(net);
-}
-EXPORT_SYMBOL_GPL(m_can_class_free_dev);
-
-int m_can_class_register(struct m_can_classdev *cdev)
+int m_can_class_register(struct m_can_classdev *m_can_dev)
 {
 	int ret;
 
-	if (cdev->pm_clock_support) {
-		ret = m_can_clk_start(cdev);
-		if (ret)
-			return ret;
-	}
-
-	if (cdev->is_peripheral) {
-		ret = can_rx_offload_add_manual(cdev->net, &cdev->offload,
-						M_CAN_NAPI_WEIGHT);
+	if (m_can_dev->pm_clock_support) {
+		pm_runtime_enable(m_can_dev->dev);
+		ret = m_can_clk_start(m_can_dev);
 		if (ret)
-			goto clk_disable;
+			goto pm_runtime_fail;
 	}
 
-	ret = m_can_dev_setup(cdev);
+	ret = m_can_dev_setup(m_can_dev);
 	if (ret)
-		goto rx_offload_del;
+		goto clk_disable;
 
-	ret = register_m_can_dev(cdev->net);
+	ret = register_m_can_dev(m_can_dev->net);
 	if (ret) {
-		dev_err(cdev->dev, "registering %s failed (err=%d)\n",
-			cdev->net->name, ret);
-		goto rx_offload_del;
+		dev_err(m_can_dev->dev, "registering %s failed (err=%d)\n",
+				m_can_dev->net->name, ret);
+		goto clk_disable;
 	}
 
-	devm_can_led_init(cdev->net);
+	devm_can_led_init(m_can_dev->net);
 
-	of_can_transceiver(cdev->net);
+	of_can_transceiver(m_can_dev->net);
 
-	dev_info(cdev->dev, "%s device registered (irq=%d, version=%d)\n",
-		 KBUILD_MODNAME, cdev->net->irq, cdev->version);
+	dev_info(m_can_dev->dev, "%s device registered (irq=%d, version=%d)\n",
+			KBUILD_MODNAME, m_can_dev->net->irq, m_can_dev->version);
 
 	/* Probe finished
 	 * Stop clocks. They will be reactivated once the M_CAN device is opened
 	 */
-	m_can_clk_stop(cdev);
-
-	return 0;
-
-rx_offload_del:
-	if (cdev->is_peripheral)
-		can_rx_offload_del(&cdev->offload);
 clk_disable:
-	m_can_clk_stop(cdev);
+	m_can_clk_stop(m_can_dev);
+pm_runtime_fail:
+	if (ret) {
+		if (m_can_dev->pm_clock_support)
+			pm_runtime_disable(m_can_dev->dev);
+		free_candev(m_can_dev->net);
+	}
 
 	return ret;
 }
 EXPORT_SYMBOL_GPL(m_can_class_register);
 
-void m_can_class_unregister(struct m_can_classdev *cdev)
-{
-	if (cdev->is_peripheral)
-		can_rx_offload_del(&cdev->offload);
-	unregister_candev(cdev->net);
-}
-EXPORT_SYMBOL_GPL(m_can_class_unregister);
-
-#ifdef CONFIG_MX6ULL_IWG26I
-void m_can_disable_rx_irq(struct m_can_classdev *m_can_dev)
-{
-	iw_ie_reg = m_can_read(m_can_dev, M_CAN_IE);
-	m_can_write(m_can_dev, M_CAN_IE, iw_ie_reg & 0xFFFFFE00);
-}
-EXPORT_SYMBOL_GPL(m_can_disable_rx_irq);
-
-void m_can_enable_rx_irq(struct m_can_classdev *m_can_dev)
-{
-	m_can_write(m_can_dev, M_CAN_IE, iw_ie_reg);
-}
-EXPORT_SYMBOL_GPL(m_can_enable_rx_irq);
-#endif /* CONFIG_MX6ULL_IWG26I */
-
 int m_can_class_suspend(struct device *dev)
 {
-	struct m_can_classdev *cdev = dev_get_drvdata(dev);
-	struct net_device *ndev = cdev->net;
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct m_can_classdev *cdev = netdev_priv(ndev);
 
 	if (netif_running(ndev)) {
 		netif_stop_queue(ndev);
@@ -2217,8 +1867,8 @@
 
 int m_can_class_resume(struct device *dev)
 {
-	struct m_can_classdev *cdev = dev_get_drvdata(dev);
-	struct net_device *ndev = cdev->net;
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct m_can_classdev *cdev = netdev_priv(ndev);
 
 	pinctrl_pm_select_default_state(dev);
 
@@ -2241,6 +1891,16 @@
 }
 EXPORT_SYMBOL_GPL(m_can_class_resume);
 
+void m_can_class_unregister(struct m_can_classdev *m_can_dev)
+{
+	unregister_candev(m_can_dev->net);
+
+	m_can_clk_stop(m_can_dev);
+
+	free_candev(m_can_dev->net);
+}
+EXPORT_SYMBOL_GPL(m_can_class_unregister);
+
 MODULE_AUTHOR("Dong Aisheng <b29396@freescale.com>");
 MODULE_AUTHOR("Dan Murphy <dmurphy@ti.com>");
 MODULE_LICENSE("GPL v2");
diff -Naur A/drivers/net/can/m_can/m_can.h B/drivers/net/can/m_can/m_can.h
--- A/drivers/net/can/m_can/m_can.h	2023-06-26 14:34:49.967944560 +0530
+++ B/drivers/net/can/m_can/m_can.h	2023-06-26 15:23:54.203840598 +0530
@@ -8,7 +8,6 @@
 
 #include <linux/can/core.h>
 #include <linux/can/led.h>
-#include <linux/can/rx-offload.h>
 #include <linux/completion.h>
 #include <linux/device.h>
 #include <linux/dma-mapping.h>
@@ -28,7 +27,6 @@
 #include <linux/iopoll.h>
 #include <linux/can/dev.h>
 #include <linux/pinctrl/consumer.h>
-#include <linux/phy/phy.h>
 
 #ifdef CONFIG_MX6ULL_IWG26I
 #include <linux/gpio.h>
@@ -68,20 +66,17 @@
 struct m_can_ops {
 	/* Device specific call backs */
 	int (*clear_interrupts)(struct m_can_classdev *cdev);
-#ifdef CONFIG_MX6ULL_IWG26I
 	int (*clear_interrupts_tx)(struct m_can_classdev *cdev);
-#endif /* CONFIG_MX6ULL_IWG26I */
 	u32 (*read_reg)(struct m_can_classdev *cdev, int reg);
 	int (*write_reg)(struct m_can_classdev *cdev, int reg, int val);
-	int (*read_fifo)(struct m_can_classdev *cdev, int addr_offset, void *val, size_t val_count);
+	u32 (*read_fifo)(struct m_can_classdev *cdev, int addr_offset);
 	int (*write_fifo)(struct m_can_classdev *cdev, int addr_offset,
-			  const void *val, size_t val_count);
+			  int val);
 	int (*init)(struct m_can_classdev *cdev);
 };
 
 struct m_can_classdev {
 	struct can_priv can;
-	struct can_rx_offload offload;
 	struct napi_struct napi;
 	struct net_device *net;
 	struct device *dev;
@@ -91,14 +86,16 @@
 	struct workqueue_struct *tx_wq;
 	struct work_struct tx_work;
 	struct sk_buff *tx_skb;
-	struct phy *transceiver;
 
-	const struct can_bittiming_const *bit_timing;
-	const struct can_bittiming_const *data_timing;
+	struct can_bittiming_const *bit_timing;
+	struct can_bittiming_const *data_timing;
 
 	struct m_can_ops *ops;
 
+	void *device_data;
+
 	int version;
+	int freq;
 	u32 irqstatus;
 
 	int pm_clock_support;
@@ -107,20 +104,13 @@
 	struct mram_cfg mcfg[MRAM_CFG_NUM];
 };
 
-struct m_can_classdev *m_can_class_allocate_dev(struct device *dev, int sizeof_priv);
-void m_can_class_free_dev(struct net_device *net);
+struct m_can_classdev *m_can_class_allocate_dev(struct device *dev);
 int m_can_class_register(struct m_can_classdev *cdev);
 void m_can_class_unregister(struct m_can_classdev *cdev);
 int m_can_class_get_clocks(struct m_can_classdev *cdev);
-int m_can_init_ram(struct m_can_classdev *priv);
+void m_can_init_ram(struct m_can_classdev *priv);
+void m_can_config_endisable(struct m_can_classdev *priv, bool enable);
 
 int m_can_class_suspend(struct device *dev);
 int m_can_class_resume(struct device *dev);
-
-#ifdef CONFIG_MX6ULL_IWG26I
-int m_can_rx_clear(struct net_device *dev);
-void m_can_disable_rx_irq(struct m_can_classdev *m_can_dev);
-void m_can_enable_rx_irq(struct m_can_classdev *m_can_dev);
-#endif /* CONFIG_MX6ULL_IWG26I */
-
 #endif	/* _CAN_M_H_ */
diff -Naur A/drivers/net/can/m_can/.m_can.o.cmd B/drivers/net/can/m_can/.m_can.o.cmd
--- A/drivers/net/can/m_can/.m_can.o.cmd	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/.m_can.o.cmd	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1,1457 @@
+cmd_drivers/net/can/m_can/m_can.o := arm-poky-linux-gnueabi-gcc -Wp,-MMD,drivers/net/can/m_can/.m_can.o.d  -nostdinc -isystem /opt/fsl-imx-x11/5.4-zeus/sysroots/x86_64-pokysdk-linux/usr/lib/arm-poky-linux-gnueabi/gcc/arm-poky-linux-gnueabi/9.2.0/include -I./arch/arm/include -I./arch/arm/include/generated  -I./include -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h -include ./include/linux/compiler_types.h -D__KERNEL__ -mlittle-endian -fmacro-prefix-map=./= -Wall -Wundef -Werror=strict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -Werror=implicit-function-declaration -Werror=implicit-int -Werror=return-type -Wno-format-security -std=gnu89 -fno-dwarf2-cfi-asm -fno-ipa-sra -mabi=aapcs-linux -mfpu=vfp -funwind-tables -marm -Wa,-mno-warn-deprecated -D__LINUX_ARM_ARCH__=7 -march=armv7-a -msoft-float -Uarm -fno-delete-null-pointer-checks -Wno-frame-address -Wno-format-truncation -Wno-format-overflow -Wno-address-of-packed-member -O2 --param=allow-store-data-races=0 -Wframe-larger-than=1024 -fstack-protector-strong -Wimplicit-fallthrough=5 -Wno-main -Wno-unused-but-set-variable -Wno-unused-const-variable -fomit-frame-pointer -fno-stack-clash-protection -Wdeclaration-after-statement -Wvla -Wno-pointer-sign -Wno-stringop-truncation -Wno-array-bounds -Wno-stringop-overflow -Wno-restrict -Wno-maybe-uninitialized -fno-strict-overflow -fno-stack-check -fconserve-stack -Werror=date-time -Werror=incompatible-pointer-types -Werror=designated-init -Wno-packed-not-aligned --sysroot=/opt/fsl-imx-x11/5.4-zeus/sysroots/cortexa7t2hf-neon-poky-linux-gnueabi    -DKBUILD_MODFILE='"drivers/net/can/m_can/m_can"' -DKBUILD_BASENAME='"m_can"' -DKBUILD_MODNAME='"m_can"' -D__KBUILD_MODNAME=kmod_m_can -c -o drivers/net/can/m_can/m_can.o drivers/net/can/m_can/m_can.c
+
+source_drivers/net/can/m_can/m_can.o := drivers/net/can/m_can/m_can.c
+
+deps_drivers/net/can/m_can/m_can.o := \
+    $(wildcard include/config/MX6ULL_IWG26I) \
+  include/linux/compiler-version.h \
+    $(wildcard include/config/CC_VERSION_TEXT) \
+  include/linux/kconfig.h \
+    $(wildcard include/config/CPU_BIG_ENDIAN) \
+    $(wildcard include/config/BOOGER) \
+    $(wildcard include/config/FOO) \
+  include/linux/compiler_types.h \
+    $(wildcard include/config/HAVE_ARCH_COMPILER_H) \
+    $(wildcard include/config/CC_HAS_ASM_INLINE) \
+  include/linux/compiler_attributes.h \
+  include/linux/compiler-gcc.h \
+    $(wildcard include/config/RETPOLINE) \
+    $(wildcard include/config/ARCH_USE_BUILTIN_BSWAP) \
+    $(wildcard include/config/KCOV) \
+  include/linux/interrupt.h \
+    $(wildcard include/config/LOCKDEP) \
+    $(wildcard include/config/SMP) \
+    $(wildcard include/config/IRQ_FORCED_THREADING) \
+    $(wildcard include/config/PREEMPT_RT) \
+    $(wildcard include/config/GENERIC_IRQ_PROBE) \
+    $(wildcard include/config/PROC_FS) \
+    $(wildcard include/config/IRQ_TIMINGS) \
+  include/linux/kernel.h \
+    $(wildcard include/config/PREEMPT_VOLUNTARY) \
+    $(wildcard include/config/PREEMPT_DYNAMIC) \
+    $(wildcard include/config/PREEMPT_) \
+    $(wildcard include/config/DEBUG_ATOMIC_SLEEP) \
+    $(wildcard include/config/MMU) \
+    $(wildcard include/config/PROVE_LOCKING) \
+    $(wildcard include/config/TRACING) \
+    $(wildcard include/config/FTRACE_MCOUNT_RECORD) \
+  include/linux/stdarg.h \
+  include/linux/align.h \
+  include/linux/const.h \
+  include/vdso/const.h \
+  include/uapi/linux/const.h \
+  include/linux/limits.h \
+  include/uapi/linux/limits.h \
+  include/linux/types.h \
+    $(wildcard include/config/HAVE_UID16) \
+    $(wildcard include/config/UID16) \
+    $(wildcard include/config/ARCH_DMA_ADDR_T_64BIT) \
+    $(wildcard include/config/PHYS_ADDR_T_64BIT) \
+    $(wildcard include/config/64BIT) \
+    $(wildcard include/config/ARCH_32BIT_USTAT_F_TINODE) \
+  include/uapi/linux/types.h \
+  arch/arm/include/uapi/asm/types.h \
+  include/asm-generic/int-ll64.h \
+  include/uapi/asm-generic/int-ll64.h \
+  arch/arm/include/generated/uapi/asm/bitsperlong.h \
+  include/asm-generic/bitsperlong.h \
+  include/uapi/asm-generic/bitsperlong.h \
+  include/uapi/linux/posix_types.h \
+  include/linux/stddef.h \
+  include/uapi/linux/stddef.h \
+  include/linux/compiler_types.h \
+  arch/arm/include/uapi/asm/posix_types.h \
+  include/uapi/asm-generic/posix_types.h \
+  include/vdso/limits.h \
+  include/linux/linkage.h \
+    $(wildcard include/config/ARCH_USE_SYM_ANNOTATIONS) \
+  include/linux/stringify.h \
+  include/linux/export.h \
+    $(wildcard include/config/MODVERSIONS) \
+    $(wildcard include/config/MODULE_REL_CRCS) \
+    $(wildcard include/config/HAVE_ARCH_PREL32_RELOCATIONS) \
+    $(wildcard include/config/MODULES) \
+    $(wildcard include/config/TRIM_UNUSED_KSYMS) \
+  arch/arm/include/asm/linkage.h \
+  include/linux/compiler.h \
+    $(wildcard include/config/TRACE_BRANCH_PROFILING) \
+    $(wildcard include/config/PROFILE_ALL_BRANCHES) \
+    $(wildcard include/config/STACK_VALIDATION) \
+    $(wildcard include/config/CFI_CLANG) \
+  arch/arm/include/generated/asm/rwonce.h \
+  include/asm-generic/rwonce.h \
+  include/linux/kasan-checks.h \
+    $(wildcard include/config/KASAN_GENERIC) \
+    $(wildcard include/config/KASAN_SW_TAGS) \
+  include/linux/kcsan-checks.h \
+    $(wildcard include/config/KCSAN) \
+    $(wildcard include/config/KCSAN_IGNORE_ATOMICS) \
+  include/linux/bitops.h \
+  include/linux/bits.h \
+  include/vdso/bits.h \
+  include/linux/build_bug.h \
+  include/linux/typecheck.h \
+  include/uapi/linux/kernel.h \
+  include/uapi/linux/sysinfo.h \
+  arch/arm/include/asm/bitops.h \
+  include/linux/irqflags.h \
+    $(wildcard include/config/TRACE_IRQFLAGS) \
+    $(wildcard include/config/IRQSOFF_TRACER) \
+    $(wildcard include/config/PREEMPT_TRACER) \
+    $(wildcard include/config/DEBUG_IRQFLAGS) \
+    $(wildcard include/config/TRACE_IRQFLAGS_SUPPORT) \
+  arch/arm/include/asm/irqflags.h \
+    $(wildcard include/config/CPU_V7M) \
+  arch/arm/include/asm/ptrace.h \
+    $(wildcard include/config/ARM_THUMB) \
+    $(wildcard include/config/THUMB2_KERNEL) \
+  arch/arm/include/uapi/asm/ptrace.h \
+    $(wildcard include/config/CPU_ENDIAN_BE8) \
+  arch/arm/include/asm/hwcap.h \
+  arch/arm/include/uapi/asm/hwcap.h \
+  include/asm-generic/irqflags.h \
+  arch/arm/include/asm/percpu.h \
+    $(wildcard include/config/CPU_V6) \
+  include/asm-generic/percpu.h \
+    $(wildcard include/config/DEBUG_PREEMPT) \
+    $(wildcard include/config/HAVE_SETUP_PER_CPU_AREA) \
+  include/linux/threads.h \
+    $(wildcard include/config/NR_CPUS) \
+    $(wildcard include/config/BASE_SMALL) \
+  include/linux/percpu-defs.h \
+    $(wildcard include/config/DEBUG_FORCE_WEAK_PER_CPU) \
+    $(wildcard include/config/AMD_MEM_ENCRYPT) \
+  arch/arm/include/asm/barrier.h \
+    $(wildcard include/config/CPU_32v6K) \
+    $(wildcard include/config/CPU_XSC3) \
+    $(wildcard include/config/CPU_FA526) \
+    $(wildcard include/config/ARM_HEAVY_MB) \
+    $(wildcard include/config/ARM_DMA_MEM_BUFFERABLE) \
+    $(wildcard include/config/CPU_SPECTRE) \
+  include/asm-generic/barrier.h \
+  include/asm-generic/bitops/non-atomic.h \
+  include/asm-generic/bitops/builtin-__fls.h \
+  include/asm-generic/bitops/builtin-__ffs.h \
+  include/asm-generic/bitops/builtin-fls.h \
+  include/asm-generic/bitops/builtin-ffs.h \
+  include/asm-generic/bitops/ffz.h \
+  include/asm-generic/bitops/fls64.h \
+  include/asm-generic/bitops/sched.h \
+  include/asm-generic/bitops/hweight.h \
+  include/asm-generic/bitops/arch_hweight.h \
+  include/asm-generic/bitops/const_hweight.h \
+  include/asm-generic/bitops/lock.h \
+  include/linux/atomic.h \
+  arch/arm/include/asm/atomic.h \
+    $(wildcard include/config/GENERIC_ATOMIC64) \
+    $(wildcard include/config/ARM_LPAE) \
+  include/linux/prefetch.h \
+  arch/arm/include/asm/processor.h \
+    $(wildcard include/config/HAVE_HW_BREAKPOINT) \
+    $(wildcard include/config/BINFMT_ELF_FDPIC) \
+  arch/arm/include/asm/hw_breakpoint.h \
+  arch/arm/include/asm/unified.h \
+  arch/arm/include/asm/vdso/processor.h \
+    $(wildcard include/config/ARM_ERRATA_754327) \
+  arch/arm/include/asm/cache.h \
+    $(wildcard include/config/ARM_L1_CACHE_SHIFT) \
+    $(wildcard include/config/AEABI) \
+  arch/arm/include/asm/cmpxchg.h \
+    $(wildcard include/config/CPU_SA1100) \
+    $(wildcard include/config/CPU_SA110) \
+  include/asm-generic/cmpxchg-local.h \
+  include/linux/atomic/atomic-arch-fallback.h \
+  include/linux/atomic/atomic-long.h \
+  include/linux/atomic/atomic-instrumented.h \
+  include/linux/instrumented.h \
+  include/asm-generic/bitops/instrumented-lock.h \
+  include/asm-generic/bitops/find.h \
+    $(wildcard include/config/GENERIC_FIND_FIRST_BIT) \
+  include/asm-generic/bitops/le.h \
+  arch/arm/include/uapi/asm/byteorder.h \
+  include/linux/byteorder/little_endian.h \
+  include/uapi/linux/byteorder/little_endian.h \
+  include/linux/swab.h \
+  include/uapi/linux/swab.h \
+  arch/arm/include/asm/swab.h \
+  arch/arm/include/uapi/asm/swab.h \
+  include/linux/byteorder/generic.h \
+  include/asm-generic/bitops/ext2-atomic-setbit.h \
+  include/linux/kstrtox.h \
+  include/linux/log2.h \
+    $(wildcard include/config/ARCH_HAS_ILOG2_U32) \
+    $(wildcard include/config/ARCH_HAS_ILOG2_U64) \
+  include/linux/math.h \
+  arch/arm/include/asm/div64.h \
+  arch/arm/include/asm/compiler.h \
+  include/asm-generic/div64.h \
+  include/linux/minmax.h \
+  include/linux/panic.h \
+    $(wildcard include/config/PANIC_TIMEOUT) \
+  include/linux/printk.h \
+    $(wildcard include/config/MESSAGE_LOGLEVEL_DEFAULT) \
+    $(wildcard include/config/CONSOLE_LOGLEVEL_DEFAULT) \
+    $(wildcard include/config/CONSOLE_LOGLEVEL_QUIET) \
+    $(wildcard include/config/EARLY_PRINTK) \
+    $(wildcard include/config/PRINTK) \
+    $(wildcard include/config/PRINTK_INDEX) \
+    $(wildcard include/config/DYNAMIC_DEBUG) \
+    $(wildcard include/config/DYNAMIC_DEBUG_CORE) \
+  include/linux/init.h \
+    $(wildcard include/config/STRICT_KERNEL_RWX) \
+    $(wildcard include/config/STRICT_MODULE_RWX) \
+    $(wildcard include/config/LTO_CLANG) \
+  include/linux/kern_levels.h \
+  include/linux/cache.h \
+    $(wildcard include/config/ARCH_HAS_CACHE_LINE_SIZE) \
+  include/linux/ratelimit_types.h \
+  include/uapi/linux/param.h \
+  arch/arm/include/generated/uapi/asm/param.h \
+  include/asm-generic/param.h \
+    $(wildcard include/config/HZ) \
+  include/uapi/asm-generic/param.h \
+  include/linux/spinlock_types.h \
+    $(wildcard include/config/DEBUG_LOCK_ALLOC) \
+  include/linux/spinlock_types_raw.h \
+    $(wildcard include/config/DEBUG_SPINLOCK) \
+  include/linux/spinlock_types_up.h \
+  include/linux/lockdep_types.h \
+    $(wildcard include/config/PROVE_RAW_LOCK_NESTING) \
+    $(wildcard include/config/PREEMPT_LOCK) \
+    $(wildcard include/config/LOCK_STAT) \
+  include/linux/rwlock_types.h \
+  include/linux/once_lite.h \
+  include/linux/static_call_types.h \
+    $(wildcard include/config/HAVE_STATIC_CALL) \
+    $(wildcard include/config/HAVE_STATIC_CALL_INLINE) \
+  include/linux/cpumask.h \
+    $(wildcard include/config/CPUMASK_OFFSTACK) \
+    $(wildcard include/config/HOTPLUG_CPU) \
+    $(wildcard include/config/DEBUG_PER_CPU_MAPS) \
+  include/linux/bitmap.h \
+  include/linux/string.h \
+    $(wildcard include/config/BINARY_PRINTF) \
+    $(wildcard include/config/FORTIFY_SOURCE) \
+  include/linux/errno.h \
+  include/uapi/linux/errno.h \
+  arch/arm/include/generated/uapi/asm/errno.h \
+  include/uapi/asm-generic/errno.h \
+  include/uapi/asm-generic/errno-base.h \
+  include/uapi/linux/string.h \
+  arch/arm/include/asm/string.h \
+    $(wildcard include/config/KASAN) \
+  include/linux/bug.h \
+    $(wildcard include/config/GENERIC_BUG) \
+    $(wildcard include/config/BUG_ON_DATA_CORRUPTION) \
+  arch/arm/include/asm/bug.h \
+    $(wildcard include/config/DEBUG_BUGVERBOSE) \
+  arch/arm/include/asm/opcodes.h \
+    $(wildcard include/config/CPU_ENDIAN_BE32) \
+  include/asm-generic/bug.h \
+    $(wildcard include/config/BUG) \
+    $(wildcard include/config/GENERIC_BUG_RELATIVE_POINTERS) \
+  include/linux/instrumentation.h \
+    $(wildcard include/config/DEBUG_ENTRY) \
+  include/linux/irqreturn.h \
+  include/linux/irqnr.h \
+  include/uapi/linux/irqnr.h \
+  include/linux/hardirq.h \
+    $(wildcard include/config/NO_HZ_FULL) \
+    $(wildcard include/config/TINY_RCU) \
+  include/linux/context_tracking_state.h \
+    $(wildcard include/config/CONTEXT_TRACKING) \
+  include/linux/percpu.h \
+    $(wildcard include/config/NEED_PER_CPU_EMBED_FIRST_CHUNK) \
+    $(wildcard include/config/NEED_PER_CPU_PAGE_FIRST_CHUNK) \
+  include/linux/mmdebug.h \
+    $(wildcard include/config/DEBUG_VM) \
+    $(wildcard include/config/DEBUG_VIRTUAL) \
+    $(wildcard include/config/DEBUG_VM_PGFLAGS) \
+  include/linux/preempt.h \
+    $(wildcard include/config/PREEMPT_COUNT) \
+    $(wildcard include/config/TRACE_PREEMPT_TOGGLE) \
+    $(wildcard include/config/PREEMPTION) \
+    $(wildcard include/config/PREEMPT_NOTIFIERS) \
+  include/linux/list.h \
+    $(wildcard include/config/DEBUG_LIST) \
+  include/linux/poison.h \
+    $(wildcard include/config/ILLEGAL_POINTER_VALUE) \
+  arch/arm/include/generated/asm/preempt.h \
+  include/asm-generic/preempt.h \
+  include/linux/thread_info.h \
+    $(wildcard include/config/THREAD_INFO_IN_TASK) \
+    $(wildcard include/config/GENERIC_ENTRY) \
+    $(wildcard include/config/HAVE_ARCH_WITHIN_STACK_FRAMES) \
+    $(wildcard include/config/HARDENED_USERCOPY) \
+  include/linux/restart_block.h \
+  include/linux/time64.h \
+  include/linux/math64.h \
+    $(wildcard include/config/ARCH_SUPPORTS_INT128) \
+  include/vdso/math64.h \
+  include/vdso/time64.h \
+  include/uapi/linux/time.h \
+  include/uapi/linux/time_types.h \
+  arch/arm/include/asm/thread_info.h \
+    $(wildcard include/config/STACKPROTECTOR_PER_TASK) \
+    $(wildcard include/config/ARM_THUMBEE) \
+  arch/arm/include/asm/fpstate.h \
+    $(wildcard include/config/VFPv3) \
+    $(wildcard include/config/IWMMXT) \
+  arch/arm/include/asm/page.h \
+    $(wildcard include/config/CPU_COPY_V4WT) \
+    $(wildcard include/config/CPU_COPY_V4WB) \
+    $(wildcard include/config/CPU_COPY_FEROCEON) \
+    $(wildcard include/config/CPU_COPY_FA) \
+    $(wildcard include/config/CPU_XSCALE) \
+    $(wildcard include/config/CPU_COPY_V6) \
+    $(wildcard include/config/KUSER_HELPERS) \
+    $(wildcard include/config/HAVE_ARCH_PFN_VALID) \
+  arch/arm/include/asm/glue.h \
+  arch/arm/include/asm/pgtable-2level-types.h \
+  arch/arm/include/asm/memory.h \
+    $(wildcard include/config/NEED_MACH_MEMORY_H) \
+    $(wildcard include/config/PAGE_OFFSET) \
+    $(wildcard include/config/HIGHMEM) \
+    $(wildcard include/config/DRAM_BASE) \
+    $(wildcard include/config/DRAM_SIZE) \
+    $(wildcard include/config/XIP_KERNEL) \
+    $(wildcard include/config/HAVE_TCM) \
+    $(wildcard include/config/ARM_PATCH_PHYS_VIRT) \
+    $(wildcard include/config/PHYS_OFFSET) \
+  include/linux/sizes.h \
+  arch/arm/include/asm/kasan_def.h \
+    $(wildcard include/config/KASAN_SHADOW_OFFSET) \
+  include/asm-generic/memory_model.h \
+    $(wildcard include/config/FLATMEM) \
+    $(wildcard include/config/SPARSEMEM_VMEMMAP) \
+    $(wildcard include/config/SPARSEMEM) \
+  include/linux/pfn.h \
+  include/asm-generic/getorder.h \
+  include/linux/smp.h \
+    $(wildcard include/config/UP_LATE_INIT) \
+  include/linux/smp_types.h \
+  include/linux/llist.h \
+    $(wildcard include/config/ARCH_HAVE_NMI_SAFE_CMPXCHG) \
+  include/linux/static_key.h \
+  include/linux/jump_label.h \
+    $(wildcard include/config/JUMP_LABEL) \
+    $(wildcard include/config/HAVE_ARCH_JUMP_LABEL_RELATIVE) \
+  include/linux/lockdep.h \
+    $(wildcard include/config/DEBUG_LOCKING_API_SELFTESTS) \
+  include/linux/ftrace_irq.h \
+    $(wildcard include/config/HWLAT_TRACER) \
+    $(wildcard include/config/OSNOISE_TRACER) \
+  include/linux/sched.h \
+    $(wildcard include/config/VIRT_CPU_ACCOUNTING_NATIVE) \
+    $(wildcard include/config/SCHED_INFO) \
+    $(wildcard include/config/SCHEDSTATS) \
+    $(wildcard include/config/FAIR_GROUP_SCHED) \
+    $(wildcard include/config/RT_GROUP_SCHED) \
+    $(wildcard include/config/RT_MUTEXES) \
+    $(wildcard include/config/UCLAMP_TASK) \
+    $(wildcard include/config/UCLAMP_BUCKETS_COUNT) \
+    $(wildcard include/config/KMAP_LOCAL) \
+    $(wildcard include/config/SCHED_CORE) \
+    $(wildcard include/config/CGROUP_SCHED) \
+    $(wildcard include/config/BLK_DEV_IO_TRACE) \
+    $(wildcard include/config/PREEMPT_RCU) \
+    $(wildcard include/config/TASKS_RCU) \
+    $(wildcard include/config/TASKS_TRACE_RCU) \
+    $(wildcard include/config/PSI) \
+    $(wildcard include/config/MEMCG) \
+    $(wildcard include/config/COMPAT_BRK) \
+    $(wildcard include/config/CGROUPS) \
+    $(wildcard include/config/BLK_CGROUP) \
+    $(wildcard include/config/PAGE_OWNER) \
+    $(wildcard include/config/EVENTFD) \
+    $(wildcard include/config/STACKPROTECTOR) \
+    $(wildcard include/config/ARCH_HAS_SCALED_CPUTIME) \
+    $(wildcard include/config/VIRT_CPU_ACCOUNTING_GEN) \
+    $(wildcard include/config/POSIX_CPUTIMERS) \
+    $(wildcard include/config/POSIX_CPU_TIMERS_TASK_WORK) \
+    $(wildcard include/config/KEYS) \
+    $(wildcard include/config/SYSVIPC) \
+    $(wildcard include/config/DETECT_HUNG_TASK) \
+    $(wildcard include/config/IO_URING) \
+    $(wildcard include/config/AUDIT) \
+    $(wildcard include/config/AUDITSYSCALL) \
+    $(wildcard include/config/DEBUG_MUTEXES) \
+    $(wildcard include/config/UBSAN) \
+    $(wildcard include/config/UBSAN_TRAP) \
+    $(wildcard include/config/BLOCK) \
+    $(wildcard include/config/COMPACTION) \
+    $(wildcard include/config/TASK_XACCT) \
+    $(wildcard include/config/CPUSETS) \
+    $(wildcard include/config/X86_CPU_RESCTRL) \
+    $(wildcard include/config/FUTEX) \
+    $(wildcard include/config/COMPAT) \
+    $(wildcard include/config/PERF_EVENTS) \
+    $(wildcard include/config/NUMA) \
+    $(wildcard include/config/NUMA_BALANCING) \
+    $(wildcard include/config/RSEQ) \
+    $(wildcard include/config/TASK_DELAY_ACCT) \
+    $(wildcard include/config/FAULT_INJECTION) \
+    $(wildcard include/config/LATENCYTOP) \
+    $(wildcard include/config/KUNIT) \
+    $(wildcard include/config/FUNCTION_GRAPH_TRACER) \
+    $(wildcard include/config/UPROBES) \
+    $(wildcard include/config/BCACHE) \
+    $(wildcard include/config/VMAP_STACK) \
+    $(wildcard include/config/LIVEPATCH) \
+    $(wildcard include/config/SECURITY) \
+    $(wildcard include/config/BPF_SYSCALL) \
+    $(wildcard include/config/GCC_PLUGIN_STACKLEAK) \
+    $(wildcard include/config/X86_MCE) \
+    $(wildcard include/config/KRETPROBES) \
+    $(wildcard include/config/ARCH_HAS_PARANOID_L1D_FLUSH) \
+    $(wildcard include/config/ARCH_TASK_STRUCT_ON_STACK) \
+    $(wildcard include/config/DEBUG_RSEQ) \
+  include/uapi/linux/sched.h \
+  arch/arm/include/generated/asm/current.h \
+  include/asm-generic/current.h \
+  include/linux/pid.h \
+  include/linux/rculist.h \
+    $(wildcard include/config/PROVE_RCU_LIST) \
+  include/linux/rcupdate.h \
+    $(wildcard include/config/TASKS_RCU_GENERIC) \
+    $(wildcard include/config/RCU_STALL_COMMON) \
+    $(wildcard include/config/RCU_NOCB_CPU) \
+    $(wildcard include/config/TASKS_RUDE_RCU) \
+    $(wildcard include/config/TREE_RCU) \
+    $(wildcard include/config/DEBUG_OBJECTS_RCU_HEAD) \
+    $(wildcard include/config/PROVE_RCU) \
+    $(wildcard include/config/ARCH_WEAK_RELEASE_ACQUIRE) \
+  include/linux/bottom_half.h \
+  include/linux/rcutree.h \
+  include/linux/wait.h \
+  include/linux/spinlock.h \
+  arch/arm/include/generated/asm/mmiowb.h \
+  include/asm-generic/mmiowb.h \
+    $(wildcard include/config/MMIOWB) \
+  include/linux/spinlock_up.h \
+  include/linux/rwlock.h \
+    $(wildcard include/config/PREEMPT) \
+  include/linux/spinlock_api_up.h \
+  include/uapi/linux/wait.h \
+  include/linux/refcount.h \
+  include/linux/sem.h \
+  include/uapi/linux/sem.h \
+  include/linux/ipc.h \
+  include/linux/uidgid.h \
+    $(wildcard include/config/MULTIUSER) \
+    $(wildcard include/config/USER_NS) \
+  include/linux/highuid.h \
+  include/linux/rhashtable-types.h \
+  include/linux/mutex.h \
+    $(wildcard include/config/MUTEX_SPIN_ON_OWNER) \
+  include/linux/osq_lock.h \
+  include/linux/debug_locks.h \
+  include/linux/workqueue.h \
+    $(wildcard include/config/DEBUG_OBJECTS_WORK) \
+    $(wildcard include/config/FREEZER) \
+    $(wildcard include/config/SYSFS) \
+    $(wildcard include/config/WQ_WATCHDOG) \
+  include/linux/timer.h \
+    $(wildcard include/config/DEBUG_OBJECTS_TIMERS) \
+    $(wildcard include/config/NO_HZ_COMMON) \
+  include/linux/ktime.h \
+  include/linux/time.h \
+    $(wildcard include/config/POSIX_TIMERS) \
+  include/linux/time32.h \
+  include/linux/timex.h \
+  include/uapi/linux/timex.h \
+  arch/arm/include/asm/timex.h \
+  include/vdso/time32.h \
+  include/vdso/time.h \
+  include/linux/jiffies.h \
+  include/vdso/jiffies.h \
+  include/generated/timeconst.h \
+  include/vdso/ktime.h \
+  include/linux/timekeeping.h \
+    $(wildcard include/config/GENERIC_CMOS_UPDATE) \
+  include/linux/clocksource_ids.h \
+  include/linux/debugobjects.h \
+    $(wildcard include/config/DEBUG_OBJECTS) \
+    $(wildcard include/config/DEBUG_OBJECTS_FREE) \
+  include/uapi/linux/ipc.h \
+  arch/arm/include/generated/uapi/asm/ipcbuf.h \
+  include/uapi/asm-generic/ipcbuf.h \
+  arch/arm/include/generated/uapi/asm/sembuf.h \
+  include/uapi/asm-generic/sembuf.h \
+  include/linux/shm.h \
+  include/uapi/linux/shm.h \
+  include/uapi/asm-generic/hugetlb_encode.h \
+  arch/arm/include/generated/uapi/asm/shmbuf.h \
+  include/uapi/asm-generic/shmbuf.h \
+  arch/arm/include/asm/shmparam.h \
+  include/linux/plist.h \
+    $(wildcard include/config/DEBUG_PLIST) \
+  include/linux/hrtimer.h \
+    $(wildcard include/config/HIGH_RES_TIMERS) \
+    $(wildcard include/config/TIME_LOW_RES) \
+    $(wildcard include/config/TIMERFD) \
+  include/linux/hrtimer_defs.h \
+  include/linux/rbtree.h \
+  include/linux/rbtree_types.h \
+  include/linux/seqlock.h \
+  include/linux/ww_mutex.h \
+    $(wildcard include/config/DEBUG_RT_MUTEXES) \
+    $(wildcard include/config/DEBUG_WW_MUTEX_SLOWPATH) \
+  include/linux/rtmutex.h \
+  include/linux/timerqueue.h \
+  include/linux/seccomp.h \
+    $(wildcard include/config/SECCOMP) \
+    $(wildcard include/config/HAVE_ARCH_SECCOMP_FILTER) \
+    $(wildcard include/config/SECCOMP_FILTER) \
+    $(wildcard include/config/CHECKPOINT_RESTORE) \
+    $(wildcard include/config/SECCOMP_CACHE_DEBUG) \
+  include/uapi/linux/seccomp.h \
+  arch/arm/include/asm/seccomp.h \
+  include/asm-generic/seccomp.h \
+  include/uapi/linux/unistd.h \
+  arch/arm/include/asm/unistd.h \
+    $(wildcard include/config/OABI_COMPAT) \
+  arch/arm/include/uapi/asm/unistd.h \
+  arch/arm/include/generated/uapi/asm/unistd-eabi.h \
+  arch/arm/include/generated/asm/unistd-nr.h \
+  include/linux/nodemask.h \
+  include/linux/numa.h \
+    $(wildcard include/config/NODES_SHIFT) \
+    $(wildcard include/config/NUMA_KEEP_MEMINFO) \
+  include/linux/resource.h \
+  include/uapi/linux/resource.h \
+  arch/arm/include/generated/uapi/asm/resource.h \
+  include/asm-generic/resource.h \
+  include/uapi/asm-generic/resource.h \
+  include/linux/latencytop.h \
+  include/linux/sched/prio.h \
+  include/linux/sched/types.h \
+  include/linux/signal_types.h \
+    $(wildcard include/config/OLD_SIGACTION) \
+  include/uapi/linux/signal.h \
+  arch/arm/include/asm/signal.h \
+  arch/arm/include/uapi/asm/signal.h \
+  include/uapi/asm-generic/signal-defs.h \
+  arch/arm/include/uapi/asm/sigcontext.h \
+  arch/arm/include/generated/uapi/asm/siginfo.h \
+  include/uapi/asm-generic/siginfo.h \
+  include/linux/syscall_user_dispatch.h \
+  include/linux/mm_types_task.h \
+    $(wildcard include/config/ARCH_WANT_BATCHED_UNMAP_TLB_FLUSH) \
+    $(wildcard include/config/SPLIT_PTLOCK_CPUS) \
+    $(wildcard include/config/ARCH_ENABLE_SPLIT_PMD_PTLOCK) \
+  include/linux/task_io_accounting.h \
+    $(wildcard include/config/TASK_IO_ACCOUNTING) \
+  include/linux/posix-timers.h \
+  include/linux/alarmtimer.h \
+    $(wildcard include/config/RTC_CLASS) \
+  include/linux/task_work.h \
+  include/uapi/linux/rseq.h \
+  include/linux/kcsan.h \
+  arch/arm/include/generated/asm/kmap_size.h \
+  include/asm-generic/kmap_size.h \
+    $(wildcard include/config/DEBUG_KMAP_LOCAL) \
+  include/linux/vtime.h \
+    $(wildcard include/config/VIRT_CPU_ACCOUNTING) \
+    $(wildcard include/config/IRQ_TIME_ACCOUNTING) \
+  arch/arm/include/asm/hardirq.h \
+  arch/arm/include/asm/irq.h \
+    $(wildcard include/config/SPARSE_IRQ) \
+  include/asm-generic/hardirq.h \
+  include/linux/irq.h \
+    $(wildcard include/config/GENERIC_IRQ_EFFECTIVE_AFF_MASK) \
+    $(wildcard include/config/GENERIC_IRQ_IPI) \
+    $(wildcard include/config/IRQ_DOMAIN_HIERARCHY) \
+    $(wildcard include/config/GENERIC_IRQ_MIGRATION) \
+    $(wildcard include/config/GENERIC_PENDING_IRQ) \
+    $(wildcard include/config/HARDIRQS_SW_RESEND) \
+    $(wildcard include/config/GENERIC_IRQ_LEGACY) \
+    $(wildcard include/config/GENERIC_IRQ_MULTI_HANDLER) \
+  include/linux/irqhandler.h \
+  include/linux/topology.h \
+    $(wildcard include/config/USE_PERCPU_NUMA_NODE_ID) \
+    $(wildcard include/config/HAVE_MEMORYLESS_NODES) \
+    $(wildcard include/config/SCHED_SMT) \
+  include/linux/arch_topology.h \
+    $(wildcard include/config/GENERIC_ARCH_TOPOLOGY) \
+  include/linux/mmzone.h \
+    $(wildcard include/config/FORCE_MAX_ZONEORDER) \
+    $(wildcard include/config/CMA) \
+    $(wildcard include/config/MEMORY_ISOLATION) \
+    $(wildcard include/config/ZSMALLOC) \
+    $(wildcard include/config/SHADOW_CALL_STACK) \
+    $(wildcard include/config/SWAP) \
+    $(wildcard include/config/TRANSPARENT_HUGEPAGE) \
+    $(wildcard include/config/ZONE_DMA) \
+    $(wildcard include/config/ZONE_DMA32) \
+    $(wildcard include/config/ZONE_DEVICE) \
+    $(wildcard include/config/MEMORY_HOTPLUG) \
+    $(wildcard include/config/PAGE_EXTENSION) \
+    $(wildcard include/config/DEFERRED_STRUCT_PAGE_INIT) \
+    $(wildcard include/config/SPARSEMEM_EXTREME) \
+  include/linux/pageblock-flags.h \
+    $(wildcard include/config/HUGETLB_PAGE) \
+    $(wildcard include/config/HUGETLB_PAGE_SIZE_VARIABLE) \
+  include/linux/page-flags-layout.h \
+    $(wildcard include/config/KASAN_HW_TAGS) \
+  include/generated/bounds.h \
+  include/linux/mm_types.h \
+    $(wildcard include/config/HAVE_ALIGNED_STRUCT_PAGE) \
+    $(wildcard include/config/USERFAULTFD) \
+    $(wildcard include/config/HAVE_ARCH_COMPAT_MMAP_BASES) \
+    $(wildcard include/config/MEMBARRIER) \
+    $(wildcard include/config/AIO) \
+    $(wildcard include/config/MMU_NOTIFIER) \
+    $(wildcard include/config/IOMMU_SUPPORT) \
+  include/linux/auxvec.h \
+  include/uapi/linux/auxvec.h \
+  arch/arm/include/asm/auxvec.h \
+  arch/arm/include/uapi/asm/auxvec.h \
+  include/linux/rwsem.h \
+    $(wildcard include/config/RWSEM_SPIN_ON_OWNER) \
+    $(wildcard include/config/DEBUG_RWSEMS) \
+  include/linux/err.h \
+  include/linux/completion.h \
+  include/linux/swait.h \
+  include/linux/uprobes.h \
+  arch/arm/include/asm/mmu.h \
+    $(wildcard include/config/CPU_HAS_ASID) \
+    $(wildcard include/config/VDSO) \
+  include/linux/page-flags.h \
+    $(wildcard include/config/ARCH_USES_PG_UNCACHED) \
+    $(wildcard include/config/MEMORY_FAILURE) \
+    $(wildcard include/config/PAGE_IDLE_FLAG) \
+    $(wildcard include/config/THP_SWAP) \
+    $(wildcard include/config/KSM) \
+  include/linux/local_lock.h \
+  include/linux/local_lock_internal.h \
+  include/linux/memory_hotplug.h \
+    $(wildcard include/config/ARCH_HAS_ADD_PAGES) \
+    $(wildcard include/config/HAVE_ARCH_NODEDATA_EXTENSION) \
+    $(wildcard include/config/MEMORY_HOTREMOVE) \
+  include/linux/notifier.h \
+    $(wildcard include/config/TREE_SRCU) \
+  include/linux/srcu.h \
+    $(wildcard include/config/TINY_SRCU) \
+    $(wildcard include/config/SRCU) \
+  include/linux/rcu_segcblist.h \
+  include/linux/srcutree.h \
+  include/linux/rcu_node_tree.h \
+    $(wildcard include/config/RCU_FANOUT) \
+    $(wildcard include/config/RCU_FANOUT_LEAF) \
+  arch/arm/include/asm/topology.h \
+    $(wildcard include/config/ARM_CPU_TOPOLOGY) \
+    $(wildcard include/config/BL_SWITCHER) \
+  include/asm-generic/topology.h \
+  include/linux/io.h \
+    $(wildcard include/config/HAS_IOPORT_MAP) \
+    $(wildcard include/config/PCI) \
+  arch/arm/include/asm/io.h \
+    $(wildcard include/config/NEED_MACH_IO_H) \
+    $(wildcard include/config/PCMCIA_SOC_COMMON) \
+    $(wildcard include/config/ISA) \
+    $(wildcard include/config/PCCARD) \
+  include/asm-generic/pci_iomap.h \
+    $(wildcard include/config/NO_GENERIC_PCI_IOPORT_MAP) \
+    $(wildcard include/config/GENERIC_PCI_IOMAP) \
+  include/asm-generic/io.h \
+    $(wildcard include/config/GENERIC_IOMAP) \
+    $(wildcard include/config/GENERIC_IOREMAP) \
+    $(wildcard include/config/VIRT_TO_BUS) \
+    $(wildcard include/config/GENERIC_DEVMEM_IS_ALLOWED) \
+  include/linux/logic_pio.h \
+    $(wildcard include/config/INDIRECT_PIO) \
+  include/linux/fwnode.h \
+  include/linux/vmalloc.h \
+    $(wildcard include/config/KASAN_VMALLOC) \
+    $(wildcard include/config/HAVE_ARCH_HUGE_VMALLOC) \
+  include/linux/overflow.h \
+  arch/arm/include/asm/vmalloc.h \
+  include/linux/slab.h \
+    $(wildcard include/config/DEBUG_SLAB) \
+    $(wildcard include/config/FAILSLAB) \
+    $(wildcard include/config/MEMCG_KMEM) \
+    $(wildcard include/config/HAVE_HARDENED_USERCOPY_ALLOCATOR) \
+    $(wildcard include/config/SLAB) \
+    $(wildcard include/config/SLUB) \
+    $(wildcard include/config/SLOB) \
+    $(wildcard include/config/CC_IS_GCC) \
+    $(wildcard include/config/CLANG_VERSION) \
+  include/linux/gfp.h \
+    $(wildcard include/config/PM_SLEEP) \
+    $(wildcard include/config/CONTIG_ALLOC) \
+  include/linux/percpu-refcount.h \
+  include/linux/kasan.h \
+    $(wildcard include/config/KASAN_STACK) \
+    $(wildcard include/config/KASAN_INLINE) \
+  arch/arm/include/generated/asm/irq_regs.h \
+  include/asm-generic/irq_regs.h \
+  include/linux/irqdesc.h \
+    $(wildcard include/config/GENERIC_IRQ_DEBUGFS) \
+    $(wildcard include/config/IRQ_DOMAIN) \
+    $(wildcard include/config/HANDLE_DOMAIN_IRQ) \
+  include/linux/kobject.h \
+    $(wildcard include/config/UEVENT_HELPER) \
+    $(wildcard include/config/DEBUG_KOBJECT_RELEASE) \
+  include/linux/sysfs.h \
+  include/linux/kernfs.h \
+    $(wildcard include/config/KERNFS) \
+  include/linux/idr.h \
+  include/linux/radix-tree.h \
+  include/linux/xarray.h \
+    $(wildcard include/config/XARRAY_MULTI) \
+  include/linux/kconfig.h \
+  include/linux/kobject_ns.h \
+  include/linux/stat.h \
+  arch/arm/include/uapi/asm/stat.h \
+  include/uapi/linux/stat.h \
+  include/linux/kref.h \
+  arch/arm/include/asm/hw_irq.h \
+  arch/arm/include/asm/sections.h \
+  include/asm-generic/sections.h \
+  include/linux/module.h \
+    $(wildcard include/config/MODULES_TREE_LOOKUP) \
+    $(wildcard include/config/STACKTRACE_BUILD_ID) \
+    $(wildcard include/config/MODULE_SIG) \
+    $(wildcard include/config/KALLSYMS) \
+    $(wildcard include/config/TRACEPOINTS) \
+    $(wildcard include/config/BPF_EVENTS) \
+    $(wildcard include/config/DEBUG_INFO_BTF_MODULES) \
+    $(wildcard include/config/EVENT_TRACING) \
+    $(wildcard include/config/KPROBES) \
+    $(wildcard include/config/MODULE_UNLOAD) \
+    $(wildcard include/config/CONSTRUCTORS) \
+    $(wildcard include/config/FUNCTION_ERROR_INJECTION) \
+  include/linux/buildid.h \
+    $(wildcard include/config/CRASH_CORE) \
+  include/linux/kmod.h \
+  include/linux/umh.h \
+  include/linux/sysctl.h \
+    $(wildcard include/config/SYSCTL) \
+  include/uapi/linux/sysctl.h \
+  include/linux/elf.h \
+    $(wildcard include/config/ARCH_USE_GNU_PROPERTY) \
+    $(wildcard include/config/ARCH_HAVE_ELF_PROT) \
+  arch/arm/include/asm/elf.h \
+  arch/arm/include/asm/vdso_datapage.h \
+  include/vdso/datapage.h \
+    $(wildcard include/config/ARCH_HAS_VDSO_DATA) \
+  include/uapi/asm-generic/errno-base.h \
+  include/vdso/clocksource.h \
+    $(wildcard include/config/GENERIC_GETTIMEOFDAY) \
+  arch/arm/include/asm/vdso/clocksource.h \
+  include/vdso/processor.h \
+  arch/arm/include/asm/vdso/gettimeofday.h \
+    $(wildcard include/config/ARM_ARCH_TIMER) \
+  arch/arm/include/asm/vdso/cp15.h \
+    $(wildcard include/config/CPU_CP15) \
+  arch/arm/include/asm/user.h \
+  include/uapi/linux/elf.h \
+  include/uapi/linux/elf-em.h \
+  include/linux/moduleparam.h \
+    $(wildcard include/config/ALPHA) \
+    $(wildcard include/config/IA64) \
+    $(wildcard include/config/PPC64) \
+  include/linux/rbtree_latch.h \
+  include/linux/error-injection.h \
+  include/asm-generic/error-injection.h \
+  include/linux/tracepoint-defs.h \
+  include/linux/cfi.h \
+    $(wildcard include/config/CFI_CLANG_SHADOW) \
+  arch/arm/include/asm/module.h \
+    $(wildcard include/config/ARM_UNWIND) \
+    $(wildcard include/config/ARM_MODULE_PLTS) \
+  include/asm-generic/module.h \
+    $(wildcard include/config/HAVE_MOD_ARCH_SPECIFIC) \
+    $(wildcard include/config/MODULES_USE_ELF_REL) \
+    $(wildcard include/config/MODULES_USE_ELF_RELA) \
+  include/linux/netdevice.h \
+    $(wildcard include/config/DCB) \
+    $(wildcard include/config/HYPERV_NET) \
+    $(wildcard include/config/WLAN) \
+    $(wildcard include/config/AX25) \
+    $(wildcard include/config/MAC80211_MESH) \
+    $(wildcard include/config/NET_IPIP) \
+    $(wildcard include/config/NET_IPGRE) \
+    $(wildcard include/config/IPV6_SIT) \
+    $(wildcard include/config/IPV6_TUNNEL) \
+    $(wildcard include/config/RPS) \
+    $(wildcard include/config/NETPOLL) \
+    $(wildcard include/config/XPS) \
+    $(wildcard include/config/XDP_SOCKETS) \
+    $(wildcard include/config/BQL) \
+    $(wildcard include/config/RFS_ACCEL) \
+    $(wildcard include/config/FCOE) \
+    $(wildcard include/config/XFRM_OFFLOAD) \
+    $(wildcard include/config/NET_POLL_CONTROLLER) \
+    $(wildcard include/config/LIBFCOE) \
+    $(wildcard include/config/WIRELESS_EXT) \
+    $(wildcard include/config/NET_L3_MASTER_DEV) \
+    $(wildcard include/config/IPV6) \
+    $(wildcard include/config/TLS_DEVICE) \
+    $(wildcard include/config/VLAN_8021Q) \
+    $(wildcard include/config/NET_DSA) \
+    $(wildcard include/config/TIPC) \
+    $(wildcard include/config/IRDA) \
+    $(wildcard include/config/ATALK) \
+    $(wildcard include/config/DECNET) \
+    $(wildcard include/config/MPLS_ROUTING) \
+    $(wildcard include/config/MCTP) \
+    $(wildcard include/config/NET_CLS_ACT) \
+    $(wildcard include/config/NETFILTER_INGRESS) \
+    $(wildcard include/config/NET_SCHED) \
+    $(wildcard include/config/PCPU_DEV_REFCNT) \
+    $(wildcard include/config/GARP) \
+    $(wildcard include/config/MRP) \
+    $(wildcard include/config/CGROUP_NET_PRIO) \
+    $(wildcard include/config/MACSEC) \
+    $(wildcard include/config/NET_FLOW_LIMIT) \
+    $(wildcard include/config/ETHTOOL_NETLINK) \
+  include/linux/delay.h \
+  arch/arm/include/asm/delay.h \
+  include/linux/dynamic_queue_limits.h \
+  include/net/net_namespace.h \
+    $(wildcard include/config/NF_CONNTRACK) \
+    $(wildcard include/config/IEEE802154_6LOWPAN) \
+    $(wildcard include/config/IP_SCTP) \
+    $(wildcard include/config/NETFILTER) \
+    $(wildcard include/config/NF_TABLES) \
+    $(wildcard include/config/WEXT_CORE) \
+    $(wildcard include/config/XFRM) \
+    $(wildcard include/config/IP_VS) \
+    $(wildcard include/config/MPLS) \
+    $(wildcard include/config/CAN) \
+    $(wildcard include/config/CRYPTO_USER) \
+    $(wildcard include/config/SMC) \
+    $(wildcard include/config/NET_NS) \
+    $(wildcard include/config/NET) \
+  include/net/flow.h \
+  include/linux/socket.h \
+  arch/arm/include/generated/uapi/asm/socket.h \
+  include/uapi/asm-generic/socket.h \
+  arch/arm/include/generated/uapi/asm/sockios.h \
+  include/uapi/asm-generic/sockios.h \
+  include/uapi/linux/sockios.h \
+  include/linux/uio.h \
+    $(wildcard include/config/ARCH_HAS_UACCESS_FLUSHCACHE) \
+    $(wildcard include/config/ARCH_HAS_COPY_MC) \
+  include/uapi/linux/uio.h \
+  include/uapi/linux/socket.h \
+  include/linux/in6.h \
+  include/uapi/linux/in6.h \
+  include/uapi/linux/libc-compat.h \
+  include/net/flow_dissector.h \
+  include/linux/siphash.h \
+    $(wildcard include/config/HAVE_EFFICIENT_UNALIGNED_ACCESS) \
+  include/uapi/linux/if_ether.h \
+  include/net/netns/core.h \
+  include/net/netns/mib.h \
+    $(wildcard include/config/XFRM_STATISTICS) \
+    $(wildcard include/config/TLS) \
+    $(wildcard include/config/MPTCP) \
+  include/net/snmp.h \
+  include/uapi/linux/snmp.h \
+  include/linux/u64_stats_sync.h \
+  include/net/netns/unix.h \
+  include/net/netns/packet.h \
+  include/net/netns/ipv4.h \
+    $(wildcard include/config/IP_MULTIPLE_TABLES) \
+    $(wildcard include/config/IP_ROUTE_CLASSID) \
+    $(wildcard include/config/IP_MROUTE) \
+    $(wildcard include/config/IP_MROUTE_MULTIPLE_TABLES) \
+    $(wildcard include/config/IP_ROUTE_MULTIPATH) \
+  include/net/inet_frag.h \
+  include/net/netns/ipv6.h \
+    $(wildcard include/config/IPV6_MULTIPLE_TABLES) \
+    $(wildcard include/config/IPV6_SUBTREES) \
+    $(wildcard include/config/IPV6_MROUTE) \
+    $(wildcard include/config/IPV6_MROUTE_MULTIPLE_TABLES) \
+    $(wildcard include/config/NF_DEFRAG_IPV6) \
+  include/net/dst_ops.h \
+  include/linux/percpu_counter.h \
+  include/uapi/linux/icmpv6.h \
+  include/net/netns/nexthop.h \
+  include/net/netns/ieee802154_6lowpan.h \
+  include/net/netns/sctp.h \
+  include/net/netns/netfilter.h \
+    $(wildcard include/config/NETFILTER_FAMILY_ARP) \
+    $(wildcard include/config/NETFILTER_FAMILY_BRIDGE) \
+    $(wildcard include/config/NF_DEFRAG_IPV4) \
+  include/linux/netfilter_defs.h \
+  include/uapi/linux/netfilter.h \
+  include/linux/in.h \
+  include/uapi/linux/in.h \
+  include/net/netns/conntrack.h \
+    $(wildcard include/config/NF_CT_PROTO_DCCP) \
+    $(wildcard include/config/NF_CT_PROTO_SCTP) \
+    $(wildcard include/config/NF_FLOW_TABLE) \
+    $(wildcard include/config/NF_CT_PROTO_GRE) \
+    $(wildcard include/config/NF_CONNTRACK_EVENTS) \
+    $(wildcard include/config/NF_CONNTRACK_LABELS) \
+  include/linux/list_nulls.h \
+  include/linux/netfilter/nf_conntrack_tcp.h \
+  include/uapi/linux/netfilter/nf_conntrack_tcp.h \
+  include/linux/netfilter/nf_conntrack_dccp.h \
+  include/uapi/linux/netfilter/nf_conntrack_tuple_common.h \
+  include/linux/netfilter/nf_conntrack_common.h \
+  include/uapi/linux/netfilter/nf_conntrack_common.h \
+  include/linux/netfilter/nf_conntrack_sctp.h \
+  include/uapi/linux/netfilter/nf_conntrack_sctp.h \
+  include/net/netns/nftables.h \
+  include/net/netns/xfrm.h \
+  include/uapi/linux/xfrm.h \
+  include/net/netns/mpls.h \
+  include/net/netns/can.h \
+  include/net/netns/xdp.h \
+  include/net/netns/smc.h \
+  include/net/netns/bpf.h \
+  include/linux/bpf-netns.h \
+  include/uapi/linux/bpf.h \
+    $(wildcard include/config/CGROUP_BPF) \
+    $(wildcard include/config/BPF_LIRC_MODE2) \
+    $(wildcard include/config/EFFICIENT_UNALIGNED_ACCESS) \
+    $(wildcard include/config/CGROUP_NET_CLASSID) \
+    $(wildcard include/config/BPF_KPROBE_OVERRIDE) \
+    $(wildcard include/config/SOCK_CGROUP_DATA) \
+  include/uapi/linux/bpf_common.h \
+  include/net/netns/mctp.h \
+  include/linux/ns_common.h \
+  include/linux/skbuff.h \
+    $(wildcard include/config/BRIDGE_NETFILTER) \
+    $(wildcard include/config/NET_TC_SKB_EXT) \
+    $(wildcard include/config/DEBUG_KMAP_LOCAL_FORCE_MAP) \
+    $(wildcard include/config/NET_SOCK_MSG) \
+    $(wildcard include/config/SKB_EXTENSIONS) \
+    $(wildcard include/config/IPV6_NDISC_NODETYPE) \
+    $(wildcard include/config/NET_SWITCHDEV) \
+    $(wildcard include/config/NET_REDIRECT) \
+    $(wildcard include/config/NET_RX_BUSY_POLL) \
+    $(wildcard include/config/NETWORK_SECMARK) \
+    $(wildcard include/config/PAGE_POOL) \
+    $(wildcard include/config/NETWORK_PHY_TIMESTAMPING) \
+    $(wildcard include/config/NETFILTER_XT_TARGET_TRACE) \
+  include/linux/bvec.h \
+  include/linux/highmem.h \
+  include/linux/fs.h \
+    $(wildcard include/config/READ_ONLY_THP_FOR_FS) \
+    $(wildcard include/config/FS_POSIX_ACL) \
+    $(wildcard include/config/CGROUP_WRITEBACK) \
+    $(wildcard include/config/IMA) \
+    $(wildcard include/config/FILE_LOCKING) \
+    $(wildcard include/config/FSNOTIFY) \
+    $(wildcard include/config/FS_ENCRYPTION) \
+    $(wildcard include/config/FS_VERITY) \
+    $(wildcard include/config/EPOLL) \
+    $(wildcard include/config/UNICODE) \
+    $(wildcard include/config/QUOTA) \
+    $(wildcard include/config/FS_DAX) \
+    $(wildcard include/config/MIGRATION) \
+  include/linux/wait_bit.h \
+  include/linux/kdev_t.h \
+  include/uapi/linux/kdev_t.h \
+  include/linux/dcache.h \
+  include/linux/rculist_bl.h \
+  include/linux/list_bl.h \
+  include/linux/bit_spinlock.h \
+  include/linux/lockref.h \
+    $(wildcard include/config/ARCH_USE_CMPXCHG_LOCKREF) \
+  include/linux/stringhash.h \
+    $(wildcard include/config/DCACHE_WORD_ACCESS) \
+  include/linux/hash.h \
+    $(wildcard include/config/HAVE_ARCH_HASH) \
+  include/linux/path.h \
+  include/linux/list_lru.h \
+  include/linux/shrinker.h \
+  include/linux/capability.h \
+  include/uapi/linux/capability.h \
+  include/linux/semaphore.h \
+  include/linux/fcntl.h \
+    $(wildcard include/config/ARCH_32BIT_OFF_T) \
+  include/uapi/linux/fcntl.h \
+  arch/arm/include/uapi/asm/fcntl.h \
+  include/uapi/asm-generic/fcntl.h \
+  include/uapi/linux/openat2.h \
+  include/linux/migrate_mode.h \
+  include/linux/percpu-rwsem.h \
+  include/linux/rcuwait.h \
+  include/linux/sched/signal.h \
+    $(wildcard include/config/SCHED_AUTOGROUP) \
+    $(wildcard include/config/BSD_PROCESS_ACCT) \
+    $(wildcard include/config/TASKSTATS) \
+    $(wildcard include/config/STACK_GROWSUP) \
+  include/linux/signal.h \
+  include/linux/sched/jobctl.h \
+  include/linux/sched/task.h \
+    $(wildcard include/config/HAVE_EXIT_THREAD) \
+    $(wildcard include/config/ARCH_WANTS_DYNAMIC_TASK_STRUCT) \
+    $(wildcard include/config/HAVE_ARCH_THREAD_STRUCT_WHITELIST) \
+  include/linux/uaccess.h \
+    $(wildcard include/config/SET_FS) \
+  include/linux/fault-inject-usercopy.h \
+    $(wildcard include/config/FAULT_INJECTION_USERCOPY) \
+  arch/arm/include/asm/uaccess.h \
+    $(wildcard include/config/CPU_SW_DOMAIN_PAN) \
+    $(wildcard include/config/CPU_USE_DOMAINS) \
+    $(wildcard include/config/UACCESS_WITH_MEMCPY) \
+  arch/arm/include/asm/domain.h \
+    $(wildcard include/config/IO_36) \
+    $(wildcard include/config/CPU_CP15_MMU) \
+  arch/arm/include/generated/asm/unaligned.h \
+  include/asm-generic/unaligned.h \
+  include/linux/unaligned/packed_struct.h \
+  arch/arm/include/generated/asm/extable.h \
+  include/asm-generic/extable.h \
+  include/linux/cred.h \
+    $(wildcard include/config/DEBUG_CREDENTIALS) \
+  include/linux/key.h \
+    $(wildcard include/config/KEY_NOTIFICATIONS) \
+  include/linux/assoc_array.h \
+    $(wildcard include/config/ASSOCIATIVE_ARRAY) \
+  include/linux/sched/user.h \
+    $(wildcard include/config/WATCH_QUEUE) \
+  include/linux/ratelimit.h \
+  include/linux/rcu_sync.h \
+  include/linux/delayed_call.h \
+  include/linux/uuid.h \
+  include/uapi/linux/uuid.h \
+  include/linux/errseq.h \
+  include/linux/ioprio.h \
+  include/linux/sched/rt.h \
+  include/linux/iocontext.h \
+  include/uapi/linux/ioprio.h \
+  include/linux/fs_types.h \
+  include/linux/mount.h \
+  include/linux/mnt_idmapping.h \
+  include/uapi/linux/fs.h \
+  include/uapi/linux/ioctl.h \
+  arch/arm/include/generated/uapi/asm/ioctl.h \
+  include/asm-generic/ioctl.h \
+  include/uapi/asm-generic/ioctl.h \
+  include/linux/quota.h \
+    $(wildcard include/config/QUOTA_NETLINK_INTERFACE) \
+  include/uapi/linux/dqblk_xfs.h \
+  include/linux/dqblk_v1.h \
+  include/linux/dqblk_v2.h \
+  include/linux/dqblk_qtree.h \
+  include/linux/projid.h \
+  include/uapi/linux/quota.h \
+  include/linux/nfs_fs_i.h \
+  include/linux/mm.h \
+    $(wildcard include/config/HAVE_ARCH_MMAP_RND_BITS) \
+    $(wildcard include/config/HAVE_ARCH_MMAP_RND_COMPAT_BITS) \
+    $(wildcard include/config/DEBUG_INFO_BTF) \
+    $(wildcard include/config/MEM_SOFT_DIRTY) \
+    $(wildcard include/config/ARCH_USES_HIGH_VMA_FLAGS) \
+    $(wildcard include/config/ARCH_HAS_PKEYS) \
+    $(wildcard include/config/PPC) \
+    $(wildcard include/config/X86) \
+    $(wildcard include/config/PARISC) \
+    $(wildcard include/config/SPARC64) \
+    $(wildcard include/config/ARM64) \
+    $(wildcard include/config/ARM64_MTE) \
+    $(wildcard include/config/HAVE_ARCH_USERFAULTFD_MINOR) \
+    $(wildcard include/config/SHMEM) \
+    $(wildcard include/config/DEV_PAGEMAP_OPS) \
+    $(wildcard include/config/DEVICE_PRIVATE) \
+    $(wildcard include/config/PCI_P2PDMA) \
+    $(wildcard include/config/ARCH_HAS_PTE_SPECIAL) \
+    $(wildcard include/config/ARCH_HAS_PTE_DEVMAP) \
+    $(wildcard include/config/DEBUG_VM_RB) \
+    $(wildcard include/config/PAGE_POISONING) \
+    $(wildcard include/config/INIT_ON_ALLOC_DEFAULT_ON) \
+    $(wildcard include/config/INIT_ON_FREE_DEFAULT_ON) \
+    $(wildcard include/config/DEBUG_PAGEALLOC) \
+    $(wildcard include/config/HUGETLBFS) \
+    $(wildcard include/config/MAPPING_DIRTY_HELPERS) \
+  include/linux/mmap_lock.h \
+  include/linux/range.h \
+  include/linux/page_ext.h \
+  include/linux/stacktrace.h \
+    $(wildcard include/config/STACKTRACE) \
+    $(wildcard include/config/ARCH_STACKWALK) \
+    $(wildcard include/config/HAVE_RELIABLE_STACKTRACE) \
+  include/linux/stackdepot.h \
+    $(wildcard include/config/STACKDEPOT) \
+  include/linux/page_ref.h \
+    $(wildcard include/config/DEBUG_PAGE_REF) \
+  include/linux/memremap.h \
+  include/linux/ioport.h \
+  include/linux/pgtable.h \
+    $(wildcard include/config/PGTABLE_LEVELS) \
+    $(wildcard include/config/HIGHPTE) \
+    $(wildcard include/config/GUP_GET_PTE_LOW_HIGH) \
+    $(wildcard include/config/HAVE_ARCH_TRANSPARENT_HUGEPAGE_PUD) \
+    $(wildcard include/config/HAVE_ARCH_SOFT_DIRTY) \
+    $(wildcard include/config/ARCH_ENABLE_THP_MIGRATION) \
+    $(wildcard include/config/HAVE_ARCH_HUGE_VMAP) \
+    $(wildcard include/config/X86_ESPFIX64) \
+  arch/arm/include/asm/pgtable.h \
+  arch/arm/include/asm/proc-fns.h \
+    $(wildcard include/config/BIG_LITTLE) \
+    $(wildcard include/config/HARDEN_BRANCH_PREDICTOR) \
+  arch/arm/include/asm/glue-proc.h \
+    $(wildcard include/config/CPU_ARM7TDMI) \
+    $(wildcard include/config/CPU_ARM720T) \
+    $(wildcard include/config/CPU_ARM740T) \
+    $(wildcard include/config/CPU_ARM9TDMI) \
+    $(wildcard include/config/CPU_ARM920T) \
+    $(wildcard include/config/CPU_ARM922T) \
+    $(wildcard include/config/CPU_ARM925T) \
+    $(wildcard include/config/CPU_ARM926T) \
+    $(wildcard include/config/CPU_ARM940T) \
+    $(wildcard include/config/CPU_ARM946E) \
+    $(wildcard include/config/CPU_ARM1020) \
+    $(wildcard include/config/CPU_ARM1020E) \
+    $(wildcard include/config/CPU_ARM1022) \
+    $(wildcard include/config/CPU_ARM1026) \
+    $(wildcard include/config/CPU_MOHAWK) \
+    $(wildcard include/config/CPU_FEROCEON) \
+    $(wildcard include/config/CPU_V6K) \
+    $(wildcard include/config/CPU_PJ4B) \
+    $(wildcard include/config/CPU_V7) \
+  include/asm-generic/pgtable-nopud.h \
+  include/asm-generic/pgtable-nop4d.h \
+  arch/arm/include/asm/pgtable-hwdef.h \
+  arch/arm/include/asm/pgtable-2level-hwdef.h \
+  arch/arm/include/asm/tlbflush.h \
+    $(wildcard include/config/SMP_ON_UP) \
+    $(wildcard include/config/CPU_TLB_V4WT) \
+    $(wildcard include/config/CPU_TLB_FA) \
+    $(wildcard include/config/CPU_TLB_V4WBI) \
+    $(wildcard include/config/CPU_TLB_FEROCEON) \
+    $(wildcard include/config/CPU_TLB_V4WB) \
+    $(wildcard include/config/CPU_TLB_V6) \
+    $(wildcard include/config/CPU_TLB_V7) \
+    $(wildcard include/config/ARM_ERRATA_720789) \
+    $(wildcard include/config/ARM_ERRATA_798181) \
+  arch/arm/include/asm/pgtable-2level.h \
+  include/asm-generic/pgtable_uffd.h \
+    $(wildcard include/config/HAVE_ARCH_USERFAULTFD_WP) \
+  include/linux/huge_mm.h \
+  include/linux/sched/coredump.h \
+    $(wildcard include/config/CORE_DUMP_DEFAULT_ELF_HEADERS) \
+  include/linux/vmstat.h \
+    $(wildcard include/config/VM_EVENT_COUNTERS) \
+    $(wildcard include/config/DEBUG_TLBFLUSH) \
+    $(wildcard include/config/DEBUG_VM_VMACACHE) \
+  include/linux/vm_event_item.h \
+    $(wildcard include/config/MEMORY_BALLOON) \
+    $(wildcard include/config/BALLOON_COMPACTION) \
+  arch/arm/include/asm/cacheflush.h \
+    $(wildcard include/config/ARM_ERRATA_411920) \
+    $(wildcard include/config/CPU_CACHE_VIPT) \
+    $(wildcard include/config/OUTER_CACHE) \
+    $(wildcard include/config/FRAME_POINTER) \
+    $(wildcard include/config/CPU_ICACHE_MISMATCH_WORKAROUND) \
+  arch/arm/include/asm/glue-cache.h \
+    $(wildcard include/config/CPU_CACHE_V4) \
+    $(wildcard include/config/CPU_CACHE_V4WB) \
+    $(wildcard include/config/CACHE_B15_RAC) \
+  arch/arm/include/asm/cachetype.h \
+    $(wildcard include/config/CPU_CACHE_VIVT) \
+  arch/arm/include/asm/outercache.h \
+    $(wildcard include/config/OUTER_CACHE_SYNC) \
+  include/linux/highmem-internal.h \
+  arch/arm/include/asm/highmem.h \
+    $(wildcard include/config/DEBUG_HIGHMEM) \
+  arch/arm/include/asm/fixmap.h \
+  include/asm-generic/fixmap.h \
+  include/linux/net.h \
+  include/linux/random.h \
+    $(wildcard include/config/ARCH_RANDOM) \
+  include/linux/once.h \
+  include/uapi/linux/random.h \
+  include/linux/prandom.h \
+  include/linux/sockptr.h \
+  include/uapi/linux/net.h \
+  include/linux/textsearch.h \
+  include/net/checksum.h \
+  arch/arm/include/asm/checksum.h \
+  include/linux/dma-mapping.h \
+    $(wildcard include/config/DMA_API_DEBUG) \
+    $(wildcard include/config/HAS_DMA) \
+    $(wildcard include/config/NEED_DMA_MAP_STATE) \
+  include/linux/device.h \
+    $(wildcard include/config/ENERGY_MODEL) \
+    $(wildcard include/config/GENERIC_MSI_IRQ_DOMAIN) \
+    $(wildcard include/config/PINCTRL) \
+    $(wildcard include/config/GENERIC_MSI_IRQ) \
+    $(wildcard include/config/DMA_OPS) \
+    $(wildcard include/config/DMA_DECLARE_COHERENT) \
+    $(wildcard include/config/DMA_CMA) \
+    $(wildcard include/config/SWIOTLB) \
+    $(wildcard include/config/ARCH_HAS_SYNC_DMA_FOR_DEVICE) \
+    $(wildcard include/config/ARCH_HAS_SYNC_DMA_FOR_CPU) \
+    $(wildcard include/config/ARCH_HAS_SYNC_DMA_FOR_CPU_ALL) \
+    $(wildcard include/config/DMA_OPS_BYPASS) \
+    $(wildcard include/config/OF) \
+    $(wildcard include/config/DEVTMPFS) \
+    $(wildcard include/config/SYSFS_DEPRECATED) \
+  include/linux/dev_printk.h \
+  include/linux/energy_model.h \
+  include/linux/sched/cpufreq.h \
+    $(wildcard include/config/CPU_FREQ) \
+  include/linux/sched/topology.h \
+    $(wildcard include/config/SCHED_DEBUG) \
+    $(wildcard include/config/SCHED_MC) \
+    $(wildcard include/config/CPU_FREQ_GOV_SCHEDUTIL) \
+  include/linux/sched/idle.h \
+  include/linux/klist.h \
+  include/linux/pm.h \
+    $(wildcard include/config/VT_CONSOLE_SLEEP) \
+    $(wildcard include/config/PM) \
+    $(wildcard include/config/PM_CLK) \
+    $(wildcard include/config/PM_GENERIC_DOMAINS) \
+  include/linux/device/bus.h \
+    $(wildcard include/config/ACPI) \
+  include/linux/device/class.h \
+  include/linux/device/driver.h \
+  arch/arm/include/asm/device.h \
+    $(wildcard include/config/DMABOUNCE) \
+    $(wildcard include/config/ARM_DMA_USE_IOMMU) \
+    $(wildcard include/config/ARCH_OMAP) \
+  include/linux/pm_wakeup.h \
+  include/linux/dma-direction.h \
+  include/linux/scatterlist.h \
+    $(wildcard include/config/NEED_SG_DMA_LENGTH) \
+    $(wildcard include/config/DEBUG_SG) \
+    $(wildcard include/config/SGL_ALLOC) \
+    $(wildcard include/config/ARCH_NO_SG_CHAIN) \
+    $(wildcard include/config/SG_POOL) \
+  include/linux/mem_encrypt.h \
+    $(wildcard include/config/ARCH_HAS_MEM_ENCRYPT) \
+  include/linux/netdev_features.h \
+  include/linux/sched/clock.h \
+    $(wildcard include/config/HAVE_UNSTABLE_SCHED_CLOCK) \
+  include/linux/splice.h \
+  include/linux/pipe_fs_i.h \
+  include/uapi/linux/if_packet.h \
+  include/net/page_pool.h \
+  include/linux/ptr_ring.h \
+  include/linux/seq_file_net.h \
+  include/linux/seq_file.h \
+  include/net/netprio_cgroup.h \
+  include/linux/cgroup.h \
+    $(wildcard include/config/CGROUP_CPUACCT) \
+    $(wildcard include/config/CGROUP_DATA) \
+  include/uapi/linux/cgroupstats.h \
+  include/uapi/linux/taskstats.h \
+  include/linux/nsproxy.h \
+  include/linux/user_namespace.h \
+    $(wildcard include/config/INOTIFY_USER) \
+    $(wildcard include/config/FANOTIFY) \
+    $(wildcard include/config/PERSISTENT_KEYRINGS) \
+  include/linux/kernel_stat.h \
+  include/linux/cgroup-defs.h \
+  include/linux/bpf-cgroup.h \
+  include/linux/bpf.h \
+    $(wildcard include/config/BPF_JIT) \
+    $(wildcard include/config/BPF_JIT_ALWAYS_ON) \
+    $(wildcard include/config/INET) \
+  include/linux/file.h \
+  include/linux/kallsyms.h \
+    $(wildcard include/config/KALLSYMS_ALL) \
+  include/linux/sched/mm.h \
+    $(wildcard include/config/ARCH_HAS_MEMBARRIER_CALLBACKS) \
+  include/linux/sync_core.h \
+    $(wildcard include/config/ARCH_HAS_SYNC_CORE_BEFORE_USERMODE) \
+  include/linux/bpfptr.h \
+  include/linux/psi_types.h \
+  include/linux/kthread.h \
+  include/linux/cgroup_subsys.h \
+    $(wildcard include/config/CGROUP_DEVICE) \
+    $(wildcard include/config/CGROUP_FREEZER) \
+    $(wildcard include/config/CGROUP_PERF) \
+    $(wildcard include/config/CGROUP_HUGETLB) \
+    $(wildcard include/config/CGROUP_PIDS) \
+    $(wildcard include/config/CGROUP_RDMA) \
+    $(wildcard include/config/CGROUP_MISC) \
+    $(wildcard include/config/CGROUP_DEBUG) \
+  include/net/xdp.h \
+  include/uapi/linux/neighbour.h \
+  include/linux/netlink.h \
+  include/net/scm.h \
+    $(wildcard include/config/SECURITY_NETWORK) \
+  include/linux/security.h \
+    $(wildcard include/config/SECURITY_INFINIBAND) \
+    $(wildcard include/config/SECURITY_NETWORK_XFRM) \
+    $(wildcard include/config/SECURITY_PATH) \
+    $(wildcard include/config/SECURITYFS) \
+  include/linux/kernel_read_file.h \
+  include/uapi/linux/netlink.h \
+  include/uapi/linux/netdevice.h \
+  include/uapi/linux/if.h \
+  include/uapi/linux/hdlc/ioctl.h \
+  include/linux/if_ether.h \
+  include/linux/if_link.h \
+  include/uapi/linux/if_link.h \
+  include/uapi/linux/if_bonding.h \
+  include/uapi/linux/pkt_cls.h \
+  include/uapi/linux/pkt_sched.h \
+  include/linux/hashtable.h \
+  include/linux/of.h \
+    $(wildcard include/config/OF_DYNAMIC) \
+    $(wildcard include/config/SPARC) \
+    $(wildcard include/config/OF_PROMTREE) \
+    $(wildcard include/config/OF_KOBJ) \
+    $(wildcard include/config/OF_NUMA) \
+    $(wildcard include/config/OF_OVERLAY) \
+  include/linux/mod_devicetable.h \
+  include/linux/property.h \
+  include/linux/of_device.h \
+  include/linux/cpu.h \
+    $(wildcard include/config/PM_SLEEP_SMP) \
+    $(wildcard include/config/PM_SLEEP_SMP_NONZERO_CPU) \
+    $(wildcard include/config/HOTPLUG_SMT) \
+  include/linux/node.h \
+    $(wildcard include/config/HMEM_REPORTING) \
+    $(wildcard include/config/MEMORY_HOTPLUG_SPARSE) \
+  include/linux/cpuhotplug.h \
+  include/linux/platform_device.h \
+    $(wildcard include/config/SUSPEND) \
+    $(wildcard include/config/HIBERNATE_CALLBACKS) \
+    $(wildcard include/config/SUPERH) \
+  include/linux/of_platform.h \
+    $(wildcard include/config/OF_ADDRESS) \
+  include/linux/pm_runtime.h \
+  include/linux/iopoll.h \
+  include/linux/can/dev.h \
+    $(wildcard include/config/CAN_LEDS) \
+  include/uapi/linux/can.h \
+  include/linux/can/bittiming.h \
+    $(wildcard include/config/CAN_CALC_BITTIMING) \
+  include/uapi/linux/can/netlink.h \
+  include/uapi/linux/can/error.h \
+  include/linux/can/led.h \
+  include/linux/leds.h \
+    $(wildcard include/config/LEDS_TRIGGERS) \
+    $(wildcard include/config/LEDS_BRIGHTNESS_HW_CHANGED) \
+    $(wildcard include/config/LEDS_TRIGGER_DISK) \
+    $(wildcard include/config/LEDS_TRIGGER_MTD) \
+    $(wildcard include/config/LEDS_TRIGGER_CAMERA) \
+    $(wildcard include/config/NEW_LEDS) \
+    $(wildcard include/config/LEDS_TRIGGER_CPU) \
+    $(wildcard include/config/LEDS_TRIGGER_AUDIO) \
+  include/dt-bindings/leds/common.h \
+  include/linux/can/length.h \
+  include/linux/can/skb.h \
+  include/net/sock.h \
+    $(wildcard include/config/SOCK_RX_QUEUE_MAPPING) \
+    $(wildcard include/config/SOCK_VALIDATE_XMIT) \
+  include/linux/page_counter.h \
+  include/linux/memcontrol.h \
+    $(wildcard include/config/MEMCG_SWAP) \
+  include/linux/vmpressure.h \
+  include/linux/eventfd.h \
+  include/linux/writeback.h \
+  include/linux/flex_proportions.h \
+  include/linux/backing-dev-defs.h \
+    $(wildcard include/config/DEBUG_FS) \
+  include/linux/blk_types.h \
+    $(wildcard include/config/FAIL_MAKE_REQUEST) \
+    $(wildcard include/config/BLK_CGROUP_IOCOST) \
+    $(wildcard include/config/BLK_INLINE_ENCRYPTION) \
+    $(wildcard include/config/BLK_DEV_INTEGRITY) \
+  include/linux/blk-cgroup.h \
+    $(wildcard include/config/BLK_CGROUP_FC_APPID) \
+  include/linux/blkdev.h \
+    $(wildcard include/config/BLK_RQ_ALLOC_TIME) \
+    $(wildcard include/config/BLK_WBT) \
+    $(wildcard include/config/BLK_DEV_ZONED) \
+    $(wildcard include/config/BLK_DEV_THROTTLING) \
+    $(wildcard include/config/BLK_DEBUG_FS) \
+  include/uapi/linux/major.h \
+  include/linux/genhd.h \
+    $(wildcard include/config/BLOCK_HOLDER_DEPRECATED) \
+    $(wildcard include/config/CDROM) \
+  include/linux/mempool.h \
+  include/linux/bio.h \
+  include/uapi/linux/blkzoned.h \
+  include/linux/sbitmap.h \
+  include/linux/elevator.h \
+  include/linux/blk-mq.h \
+    $(wildcard include/config/FAIL_IO_TIMEOUT) \
+  include/linux/filter.h \
+    $(wildcard include/config/HAVE_EBPF_JIT) \
+  include/linux/compat.h \
+    $(wildcard include/config/ARCH_HAS_SYSCALL_WRAPPER) \
+    $(wildcard include/config/X86_X32_ABI) \
+    $(wildcard include/config/COMPAT_OLD_SIGACTION) \
+    $(wildcard include/config/ODD_RT_SIGACTION) \
+  include/uapi/linux/aio_abi.h \
+  arch/arm/include/generated/asm/compat.h \
+  include/asm-generic/compat.h \
+    $(wildcard include/config/COMPAT_FOR_U64_ALIGNMENT) \
+  include/linux/set_memory.h \
+    $(wildcard include/config/ARCH_HAS_SET_MEMORY) \
+    $(wildcard include/config/ARCH_HAS_SET_DIRECT_MAP) \
+  arch/arm/include/asm/set_memory.h \
+  include/linux/if_vlan.h \
+  include/linux/etherdevice.h \
+  include/linux/crc32.h \
+  include/linux/bitrev.h \
+    $(wildcard include/config/HAVE_ARCH_BITREVERSE) \
+  arch/arm/include/asm/bitrev.h \
+  include/linux/rtnetlink.h \
+    $(wildcard include/config/NET_INGRESS) \
+    $(wildcard include/config/NET_EGRESS) \
+  include/uapi/linux/rtnetlink.h \
+  include/uapi/linux/if_addr.h \
+  include/uapi/linux/if_vlan.h \
+  include/crypto/sha1.h \
+  include/net/sch_generic.h \
+  include/uapi/linux/pkt_cls.h \
+  include/net/gen_stats.h \
+  include/uapi/linux/gen_stats.h \
+  include/net/rtnetlink.h \
+  include/net/netlink.h \
+  include/net/flow_offload.h \
+  include/uapi/linux/filter.h \
+  include/linux/rculist_nulls.h \
+  include/linux/poll.h \
+  include/uapi/linux/poll.h \
+  arch/arm/include/generated/uapi/asm/poll.h \
+  include/uapi/asm-generic/poll.h \
+  include/uapi/linux/eventpoll.h \
+  include/linux/indirect_call_wrapper.h \
+  include/net/dst.h \
+  include/net/neighbour.h \
+  include/net/tcp_states.h \
+  include/uapi/linux/net_tstamp.h \
+  include/net/l3mdev.h \
+  include/net/fib_rules.h \
+  include/uapi/linux/fib_rules.h \
+  include/net/fib_notifier.h \
+  include/linux/pinctrl/consumer.h \
+  include/linux/pinctrl/pinctrl-state.h \
+  drivers/net/can/m_can/m_can.h \
+  include/linux/can/core.h \
+  include/linux/freezer.h \
+  include/linux/clk.h \
+    $(wildcard include/config/COMMON_CLK) \
+    $(wildcard include/config/HAVE_CLK_PREPARE) \
+    $(wildcard include/config/HAVE_CLK) \
+  include/linux/gpio.h \
+    $(wildcard include/config/GPIOLIB) \
+    $(wildcard include/config/ARCH_HAVE_CUSTOM_GPIO_H) \
+  arch/arm/include/asm/gpio.h \
+  include/asm-generic/gpio.h \
+    $(wildcard include/config/ARCH_NR_GPIO) \
+  include/linux/gpio/driver.h \
+    $(wildcard include/config/GPIO_GENERIC) \
+    $(wildcard include/config/GPIOLIB_IRQCHIP) \
+    $(wildcard include/config/OF_GPIO) \
+  include/linux/irqchip/chained_irq.h \
+  include/linux/irqdomain.h \
+    $(wildcard include/config/IRQ_DOMAIN_NOMAP) \
+  include/linux/pinctrl/pinctrl.h \
+    $(wildcard include/config/GENERIC_PINCONF) \
+  include/linux/pinctrl/devinfo.h \
+  include/linux/pinctrl/pinconf-generic.h \
+  include/linux/pinctrl/machine.h \
+  include/linux/gpio/consumer.h \
+    $(wildcard include/config/GPIO_SYSFS) \
+
+drivers/net/can/m_can/m_can.o: $(deps_drivers/net/can/m_can/m_can.o)
+
+$(deps_drivers/net/can/m_can/m_can.o):
diff -Naur A/drivers/net/can/m_can/.m_can.o.d B/drivers/net/can/m_can/.m_can.o.d
--- A/drivers/net/can/m_can/.m_can.o.d	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/.m_can.o.d	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1,347 @@
+m_can.o: drivers/net/can/m_can/m_can.c include/linux/compiler-version.h \
+ include/linux/kconfig.h include/generated/autoconf.h \
+ include/linux/compiler_types.h include/linux/compiler_attributes.h \
+ include/linux/compiler-gcc.h include/linux/interrupt.h \
+ include/linux/kernel.h include/linux/stdarg.h include/linux/align.h \
+ include/linux/const.h include/vdso/const.h include/uapi/linux/const.h \
+ include/linux/limits.h include/uapi/linux/limits.h include/linux/types.h \
+ include/uapi/linux/types.h arch/arm/include/uapi/asm/types.h \
+ include/asm-generic/int-ll64.h include/uapi/asm-generic/int-ll64.h \
+ arch/arm/include/generated/uapi/asm/bitsperlong.h \
+ include/asm-generic/bitsperlong.h include/uapi/asm-generic/bitsperlong.h \
+ include/uapi/linux/posix_types.h include/linux/stddef.h \
+ include/uapi/linux/stddef.h include/linux/compiler_types.h \
+ arch/arm/include/uapi/asm/posix_types.h \
+ include/uapi/asm-generic/posix_types.h include/vdso/limits.h \
+ include/linux/linkage.h include/linux/stringify.h include/linux/export.h \
+ arch/arm/include/asm/linkage.h include/linux/compiler.h \
+ arch/arm/include/generated/asm/rwonce.h include/asm-generic/rwonce.h \
+ include/linux/kasan-checks.h include/linux/kcsan-checks.h \
+ include/linux/bitops.h include/linux/bits.h include/vdso/bits.h \
+ include/linux/build_bug.h include/linux/typecheck.h \
+ include/uapi/linux/kernel.h include/uapi/linux/sysinfo.h \
+ arch/arm/include/asm/bitops.h include/linux/irqflags.h \
+ arch/arm/include/asm/irqflags.h arch/arm/include/asm/ptrace.h \
+ arch/arm/include/uapi/asm/ptrace.h arch/arm/include/asm/hwcap.h \
+ arch/arm/include/uapi/asm/hwcap.h include/asm-generic/irqflags.h \
+ arch/arm/include/asm/percpu.h include/asm-generic/percpu.h \
+ include/linux/threads.h include/linux/percpu-defs.h \
+ arch/arm/include/asm/barrier.h include/asm-generic/barrier.h \
+ include/asm-generic/bitops/non-atomic.h \
+ include/asm-generic/bitops/builtin-__fls.h \
+ include/asm-generic/bitops/builtin-__ffs.h \
+ include/asm-generic/bitops/builtin-fls.h \
+ include/asm-generic/bitops/builtin-ffs.h \
+ include/asm-generic/bitops/ffz.h include/asm-generic/bitops/fls64.h \
+ include/asm-generic/bitops/sched.h include/asm-generic/bitops/hweight.h \
+ include/asm-generic/bitops/arch_hweight.h \
+ include/asm-generic/bitops/const_hweight.h \
+ include/asm-generic/bitops/lock.h include/linux/atomic.h \
+ arch/arm/include/asm/atomic.h include/linux/prefetch.h \
+ arch/arm/include/asm/processor.h arch/arm/include/asm/hw_breakpoint.h \
+ arch/arm/include/asm/unified.h arch/arm/include/asm/vdso/processor.h \
+ arch/arm/include/asm/cache.h arch/arm/include/asm/cmpxchg.h \
+ include/asm-generic/cmpxchg-local.h \
+ include/linux/atomic/atomic-arch-fallback.h \
+ include/linux/atomic/atomic-long.h \
+ include/linux/atomic/atomic-instrumented.h include/linux/instrumented.h \
+ include/asm-generic/bitops/instrumented-lock.h \
+ include/asm-generic/bitops/find.h include/asm-generic/bitops/le.h \
+ arch/arm/include/uapi/asm/byteorder.h \
+ include/linux/byteorder/little_endian.h \
+ include/uapi/linux/byteorder/little_endian.h include/linux/swab.h \
+ include/uapi/linux/swab.h arch/arm/include/asm/swab.h \
+ arch/arm/include/uapi/asm/swab.h include/linux/byteorder/generic.h \
+ include/asm-generic/bitops/ext2-atomic-setbit.h include/linux/kstrtox.h \
+ include/linux/log2.h include/linux/math.h arch/arm/include/asm/div64.h \
+ arch/arm/include/asm/compiler.h include/asm-generic/div64.h \
+ include/linux/minmax.h include/linux/panic.h include/linux/printk.h \
+ include/linux/init.h include/linux/kern_levels.h include/linux/cache.h \
+ include/linux/ratelimit_types.h include/uapi/linux/param.h \
+ arch/arm/include/generated/uapi/asm/param.h include/asm-generic/param.h \
+ include/uapi/asm-generic/param.h include/linux/spinlock_types.h \
+ include/linux/spinlock_types_raw.h include/linux/spinlock_types_up.h \
+ include/linux/lockdep_types.h include/linux/rwlock_types.h \
+ include/linux/once_lite.h include/linux/static_call_types.h \
+ include/linux/cpumask.h include/linux/bitmap.h include/linux/string.h \
+ include/linux/errno.h include/uapi/linux/errno.h \
+ arch/arm/include/generated/uapi/asm/errno.h \
+ include/uapi/asm-generic/errno.h include/uapi/asm-generic/errno-base.h \
+ include/uapi/linux/string.h arch/arm/include/asm/string.h \
+ include/linux/bug.h arch/arm/include/asm/bug.h \
+ arch/arm/include/asm/opcodes.h include/asm-generic/bug.h \
+ include/linux/instrumentation.h include/linux/irqreturn.h \
+ include/linux/irqnr.h include/uapi/linux/irqnr.h include/linux/hardirq.h \
+ include/linux/context_tracking_state.h include/linux/percpu.h \
+ include/linux/mmdebug.h include/linux/preempt.h include/linux/list.h \
+ include/linux/poison.h arch/arm/include/generated/asm/preempt.h \
+ include/asm-generic/preempt.h include/linux/thread_info.h \
+ include/linux/restart_block.h include/linux/time64.h \
+ include/linux/math64.h include/vdso/math64.h include/vdso/time64.h \
+ include/uapi/linux/time.h include/uapi/linux/time_types.h \
+ arch/arm/include/asm/thread_info.h arch/arm/include/asm/fpstate.h \
+ arch/arm/include/asm/page.h arch/arm/include/asm/glue.h \
+ arch/arm/include/asm/pgtable-2level-types.h \
+ arch/arm/include/asm/memory.h include/linux/sizes.h \
+ arch/arm/include/asm/kasan_def.h include/asm-generic/memory_model.h \
+ include/linux/pfn.h include/asm-generic/getorder.h include/linux/smp.h \
+ include/linux/smp_types.h include/linux/llist.h \
+ include/linux/static_key.h include/linux/jump_label.h \
+ include/linux/lockdep.h include/linux/ftrace_irq.h include/linux/sched.h \
+ include/uapi/linux/sched.h arch/arm/include/generated/asm/current.h \
+ include/asm-generic/current.h include/linux/pid.h \
+ include/linux/rculist.h include/linux/rcupdate.h \
+ include/linux/bottom_half.h include/linux/rcutree.h include/linux/wait.h \
+ include/linux/spinlock.h arch/arm/include/generated/asm/mmiowb.h \
+ include/asm-generic/mmiowb.h include/linux/spinlock_up.h \
+ include/linux/rwlock.h include/linux/spinlock_api_up.h \
+ include/uapi/linux/wait.h include/linux/refcount.h include/linux/sem.h \
+ include/uapi/linux/sem.h include/linux/ipc.h include/linux/uidgid.h \
+ include/linux/highuid.h include/linux/rhashtable-types.h \
+ include/linux/mutex.h include/linux/osq_lock.h \
+ include/linux/debug_locks.h include/linux/workqueue.h \
+ include/linux/timer.h include/linux/ktime.h include/linux/time.h \
+ include/linux/time32.h include/linux/timex.h include/uapi/linux/timex.h \
+ arch/arm/include/asm/timex.h include/vdso/time32.h include/vdso/time.h \
+ include/linux/jiffies.h include/vdso/jiffies.h \
+ include/generated/timeconst.h include/vdso/ktime.h \
+ include/linux/timekeeping.h include/linux/clocksource_ids.h \
+ include/linux/debugobjects.h include/uapi/linux/ipc.h \
+ arch/arm/include/generated/uapi/asm/ipcbuf.h \
+ include/uapi/asm-generic/ipcbuf.h \
+ arch/arm/include/generated/uapi/asm/sembuf.h \
+ include/uapi/asm-generic/sembuf.h include/linux/shm.h \
+ include/uapi/linux/shm.h include/uapi/asm-generic/hugetlb_encode.h \
+ arch/arm/include/generated/uapi/asm/shmbuf.h \
+ include/uapi/asm-generic/shmbuf.h arch/arm/include/asm/shmparam.h \
+ include/linux/plist.h include/linux/hrtimer.h \
+ include/linux/hrtimer_defs.h include/linux/rbtree.h \
+ include/linux/rbtree_types.h include/linux/seqlock.h \
+ include/linux/ww_mutex.h include/linux/rtmutex.h \
+ include/linux/timerqueue.h include/linux/seccomp.h \
+ include/uapi/linux/seccomp.h arch/arm/include/asm/seccomp.h \
+ include/asm-generic/seccomp.h include/uapi/linux/unistd.h \
+ arch/arm/include/asm/unistd.h arch/arm/include/uapi/asm/unistd.h \
+ arch/arm/include/generated/uapi/asm/unistd-eabi.h \
+ arch/arm/include/generated/asm/unistd-nr.h include/linux/nodemask.h \
+ include/linux/numa.h include/linux/resource.h \
+ include/uapi/linux/resource.h \
+ arch/arm/include/generated/uapi/asm/resource.h \
+ include/asm-generic/resource.h include/uapi/asm-generic/resource.h \
+ include/linux/latencytop.h include/linux/sched/prio.h \
+ include/linux/sched/types.h include/linux/signal_types.h \
+ include/uapi/linux/signal.h arch/arm/include/asm/signal.h \
+ arch/arm/include/uapi/asm/signal.h \
+ include/uapi/asm-generic/signal-defs.h \
+ arch/arm/include/uapi/asm/sigcontext.h \
+ arch/arm/include/generated/uapi/asm/siginfo.h \
+ include/uapi/asm-generic/siginfo.h include/linux/syscall_user_dispatch.h \
+ include/linux/mm_types_task.h include/linux/task_io_accounting.h \
+ include/linux/posix-timers.h include/linux/alarmtimer.h \
+ include/linux/task_work.h include/uapi/linux/rseq.h \
+ include/linux/kcsan.h arch/arm/include/generated/asm/kmap_size.h \
+ include/asm-generic/kmap_size.h include/linux/vtime.h \
+ arch/arm/include/asm/hardirq.h arch/arm/include/asm/irq.h \
+ include/asm-generic/hardirq.h include/linux/irq.h \
+ include/linux/irqhandler.h include/linux/topology.h \
+ include/linux/arch_topology.h include/linux/mmzone.h \
+ include/linux/pageblock-flags.h include/linux/page-flags-layout.h \
+ include/generated/bounds.h include/linux/mm_types.h \
+ include/linux/auxvec.h include/uapi/linux/auxvec.h \
+ arch/arm/include/asm/auxvec.h arch/arm/include/uapi/asm/auxvec.h \
+ include/linux/rwsem.h include/linux/err.h include/linux/completion.h \
+ include/linux/swait.h include/linux/uprobes.h arch/arm/include/asm/mmu.h \
+ include/linux/page-flags.h include/linux/local_lock.h \
+ include/linux/local_lock_internal.h include/linux/memory_hotplug.h \
+ include/linux/notifier.h include/linux/srcu.h \
+ include/linux/rcu_segcblist.h include/linux/srcutree.h \
+ include/linux/rcu_node_tree.h arch/arm/include/asm/topology.h \
+ include/asm-generic/topology.h include/linux/io.h \
+ arch/arm/include/asm/io.h include/asm-generic/pci_iomap.h \
+ include/asm-generic/io.h include/linux/logic_pio.h \
+ include/linux/fwnode.h include/linux/vmalloc.h include/linux/overflow.h \
+ arch/arm/include/asm/vmalloc.h include/linux/slab.h include/linux/gfp.h \
+ include/linux/percpu-refcount.h include/linux/kasan.h \
+ arch/arm/include/generated/asm/irq_regs.h include/asm-generic/irq_regs.h \
+ include/linux/irqdesc.h include/linux/kobject.h include/linux/sysfs.h \
+ include/linux/kernfs.h include/linux/idr.h include/linux/radix-tree.h \
+ include/linux/xarray.h include/linux/kconfig.h \
+ include/linux/kobject_ns.h include/linux/stat.h \
+ arch/arm/include/uapi/asm/stat.h include/uapi/linux/stat.h \
+ include/linux/kref.h arch/arm/include/asm/hw_irq.h \
+ arch/arm/include/asm/sections.h include/asm-generic/sections.h \
+ include/linux/module.h include/linux/buildid.h include/linux/kmod.h \
+ include/linux/umh.h include/linux/sysctl.h include/uapi/linux/sysctl.h \
+ include/linux/elf.h arch/arm/include/asm/elf.h \
+ arch/arm/include/asm/vdso_datapage.h include/vdso/datapage.h \
+ include/uapi/asm-generic/errno-base.h include/vdso/clocksource.h \
+ arch/arm/include/asm/vdso/clocksource.h include/vdso/processor.h \
+ arch/arm/include/asm/vdso/gettimeofday.h \
+ arch/arm/include/asm/vdso/cp15.h arch/arm/include/asm/user.h \
+ include/uapi/linux/elf.h include/uapi/linux/elf-em.h \
+ include/linux/moduleparam.h include/linux/rbtree_latch.h \
+ include/linux/error-injection.h include/asm-generic/error-injection.h \
+ include/linux/tracepoint-defs.h include/linux/cfi.h \
+ arch/arm/include/asm/module.h include/asm-generic/module.h \
+ include/linux/netdevice.h include/linux/delay.h \
+ arch/arm/include/asm/delay.h include/linux/dynamic_queue_limits.h \
+ include/net/net_namespace.h include/net/flow.h include/linux/socket.h \
+ arch/arm/include/generated/uapi/asm/socket.h \
+ include/uapi/asm-generic/socket.h \
+ arch/arm/include/generated/uapi/asm/sockios.h \
+ include/uapi/asm-generic/sockios.h include/uapi/linux/sockios.h \
+ include/linux/uio.h include/uapi/linux/uio.h include/uapi/linux/socket.h \
+ include/linux/in6.h include/uapi/linux/in6.h \
+ include/uapi/linux/libc-compat.h include/net/flow_dissector.h \
+ include/linux/siphash.h include/uapi/linux/if_ether.h \
+ include/net/netns/core.h include/net/netns/mib.h include/net/snmp.h \
+ include/uapi/linux/snmp.h include/linux/u64_stats_sync.h \
+ include/net/netns/unix.h include/net/netns/packet.h \
+ include/net/netns/ipv4.h include/net/inet_frag.h \
+ include/net/netns/ipv6.h include/net/dst_ops.h \
+ include/linux/percpu_counter.h include/uapi/linux/icmpv6.h \
+ include/net/netns/nexthop.h include/net/netns/ieee802154_6lowpan.h \
+ include/net/netns/sctp.h include/net/netns/netfilter.h \
+ include/linux/netfilter_defs.h include/uapi/linux/netfilter.h \
+ include/linux/in.h include/uapi/linux/in.h include/net/netns/conntrack.h \
+ include/linux/list_nulls.h include/linux/netfilter/nf_conntrack_tcp.h \
+ include/uapi/linux/netfilter/nf_conntrack_tcp.h \
+ include/linux/netfilter/nf_conntrack_dccp.h \
+ include/uapi/linux/netfilter/nf_conntrack_tuple_common.h \
+ include/linux/netfilter/nf_conntrack_common.h \
+ include/uapi/linux/netfilter/nf_conntrack_common.h \
+ include/linux/netfilter/nf_conntrack_sctp.h \
+ include/uapi/linux/netfilter/nf_conntrack_sctp.h \
+ include/net/netns/nftables.h include/net/netns/xfrm.h \
+ include/uapi/linux/xfrm.h include/net/netns/mpls.h \
+ include/net/netns/can.h include/net/netns/xdp.h include/net/netns/smc.h \
+ include/net/netns/bpf.h include/linux/bpf-netns.h \
+ include/uapi/linux/bpf.h include/uapi/linux/bpf_common.h \
+ include/net/netns/mctp.h include/linux/ns_common.h \
+ include/linux/skbuff.h include/linux/bvec.h include/linux/highmem.h \
+ include/linux/fs.h include/linux/wait_bit.h include/linux/kdev_t.h \
+ include/uapi/linux/kdev_t.h include/linux/dcache.h \
+ include/linux/rculist_bl.h include/linux/list_bl.h \
+ include/linux/bit_spinlock.h include/linux/lockref.h \
+ include/linux/stringhash.h include/linux/hash.h include/linux/path.h \
+ include/linux/list_lru.h include/linux/shrinker.h \
+ include/linux/capability.h include/uapi/linux/capability.h \
+ include/linux/semaphore.h include/linux/fcntl.h \
+ include/uapi/linux/fcntl.h arch/arm/include/uapi/asm/fcntl.h \
+ include/uapi/asm-generic/fcntl.h include/uapi/linux/openat2.h \
+ include/linux/migrate_mode.h include/linux/percpu-rwsem.h \
+ include/linux/rcuwait.h include/linux/sched/signal.h \
+ include/linux/signal.h include/linux/sched/jobctl.h \
+ include/linux/sched/task.h include/linux/uaccess.h \
+ include/linux/fault-inject-usercopy.h arch/arm/include/asm/uaccess.h \
+ arch/arm/include/asm/domain.h arch/arm/include/generated/asm/unaligned.h \
+ include/asm-generic/unaligned.h include/linux/unaligned/packed_struct.h \
+ arch/arm/include/generated/asm/extable.h include/asm-generic/extable.h \
+ include/linux/cred.h include/linux/key.h include/linux/assoc_array.h \
+ include/linux/sched/user.h include/linux/ratelimit.h \
+ include/linux/rcu_sync.h include/linux/delayed_call.h \
+ include/linux/uuid.h include/uapi/linux/uuid.h include/linux/errseq.h \
+ include/linux/ioprio.h include/linux/sched/rt.h \
+ include/linux/iocontext.h include/uapi/linux/ioprio.h \
+ include/linux/fs_types.h include/linux/mount.h \
+ include/linux/mnt_idmapping.h include/uapi/linux/fs.h \
+ include/uapi/linux/ioctl.h arch/arm/include/generated/uapi/asm/ioctl.h \
+ include/asm-generic/ioctl.h include/uapi/asm-generic/ioctl.h \
+ include/linux/quota.h include/uapi/linux/dqblk_xfs.h \
+ include/linux/dqblk_v1.h include/linux/dqblk_v2.h \
+ include/linux/dqblk_qtree.h include/linux/projid.h \
+ include/uapi/linux/quota.h include/linux/nfs_fs_i.h include/linux/mm.h \
+ include/linux/mmap_lock.h include/linux/range.h include/linux/page_ext.h \
+ include/linux/stacktrace.h include/linux/stackdepot.h \
+ include/linux/page_ref.h include/linux/memremap.h include/linux/ioport.h \
+ include/linux/pgtable.h arch/arm/include/asm/pgtable.h \
+ arch/arm/include/asm/proc-fns.h arch/arm/include/asm/glue-proc.h \
+ include/asm-generic/pgtable-nopud.h include/asm-generic/pgtable-nop4d.h \
+ arch/arm/include/asm/pgtable-hwdef.h \
+ arch/arm/include/asm/pgtable-2level-hwdef.h \
+ arch/arm/include/asm/tlbflush.h arch/arm/include/asm/pgtable-2level.h \
+ include/asm-generic/pgtable_uffd.h include/linux/huge_mm.h \
+ include/linux/sched/coredump.h include/linux/vmstat.h \
+ include/linux/vm_event_item.h arch/arm/include/asm/cacheflush.h \
+ arch/arm/include/asm/glue-cache.h arch/arm/include/asm/cachetype.h \
+ arch/arm/include/asm/outercache.h include/linux/highmem-internal.h \
+ arch/arm/include/asm/highmem.h arch/arm/include/asm/fixmap.h \
+ include/asm-generic/fixmap.h include/linux/net.h include/linux/random.h \
+ include/linux/once.h include/uapi/linux/random.h include/linux/prandom.h \
+ include/linux/sockptr.h include/uapi/linux/net.h \
+ include/linux/textsearch.h include/net/checksum.h \
+ arch/arm/include/asm/checksum.h include/linux/dma-mapping.h \
+ include/linux/device.h include/linux/dev_printk.h \
+ include/linux/energy_model.h include/linux/sched/cpufreq.h \
+ include/linux/sched/topology.h include/linux/sched/idle.h \
+ include/linux/klist.h include/linux/pm.h include/linux/device/bus.h \
+ include/linux/device/class.h include/linux/device/driver.h \
+ arch/arm/include/asm/device.h include/linux/pm_wakeup.h \
+ include/linux/dma-direction.h include/linux/scatterlist.h \
+ include/linux/mem_encrypt.h include/linux/netdev_features.h \
+ include/linux/sched/clock.h include/linux/splice.h \
+ include/linux/pipe_fs_i.h include/uapi/linux/if_packet.h \
+ include/net/page_pool.h include/linux/ptr_ring.h \
+ include/linux/seq_file_net.h include/linux/seq_file.h \
+ include/net/netprio_cgroup.h include/linux/cgroup.h \
+ include/uapi/linux/cgroupstats.h include/uapi/linux/taskstats.h \
+ include/linux/nsproxy.h include/linux/user_namespace.h \
+ include/linux/kernel_stat.h include/linux/cgroup-defs.h \
+ include/linux/bpf-cgroup.h include/linux/bpf.h include/linux/file.h \
+ include/linux/kallsyms.h include/linux/sched/mm.h \
+ include/linux/sync_core.h include/linux/bpfptr.h \
+ include/linux/psi_types.h include/linux/kthread.h \
+ include/linux/cgroup_subsys.h include/net/xdp.h \
+ include/uapi/linux/neighbour.h include/linux/netlink.h include/net/scm.h \
+ include/linux/security.h include/linux/kernel_read_file.h \
+ include/uapi/linux/netlink.h include/uapi/linux/netdevice.h \
+ include/uapi/linux/if.h include/uapi/linux/hdlc/ioctl.h \
+ include/linux/if_ether.h include/linux/if_link.h \
+ include/uapi/linux/if_link.h include/uapi/linux/if_bonding.h \
+ include/uapi/linux/pkt_cls.h include/uapi/linux/pkt_sched.h \
+ include/linux/hashtable.h include/linux/of.h \
+ include/linux/mod_devicetable.h include/linux/property.h \
+ include/linux/of_device.h include/linux/cpu.h include/linux/node.h \
+ include/linux/cpuhotplug.h include/linux/platform_device.h \
+ include/linux/of_platform.h include/linux/pm_runtime.h \
+ include/linux/iopoll.h include/linux/can/dev.h include/uapi/linux/can.h \
+ include/linux/can/bittiming.h include/uapi/linux/can/netlink.h \
+ include/uapi/linux/can/error.h include/linux/can/led.h \
+ include/linux/leds.h include/dt-bindings/leds/common.h \
+ include/linux/can/length.h include/linux/can/skb.h include/net/sock.h \
+ include/linux/page_counter.h include/linux/memcontrol.h \
+ include/linux/vmpressure.h include/linux/eventfd.h \
+ include/linux/writeback.h include/linux/flex_proportions.h \
+ include/linux/backing-dev-defs.h include/linux/blk_types.h \
+ include/linux/blk-cgroup.h include/linux/blkdev.h \
+ include/uapi/linux/major.h include/linux/genhd.h include/linux/mempool.h \
+ include/linux/bio.h include/uapi/linux/blkzoned.h \
+ include/linux/sbitmap.h include/linux/elevator.h include/linux/blk-mq.h \
+ include/linux/filter.h include/linux/compat.h \
+ include/uapi/linux/aio_abi.h arch/arm/include/generated/asm/compat.h \
+ include/asm-generic/compat.h include/linux/set_memory.h \
+ arch/arm/include/asm/set_memory.h include/linux/if_vlan.h \
+ include/linux/etherdevice.h include/linux/crc32.h include/linux/bitrev.h \
+ arch/arm/include/asm/bitrev.h include/linux/rtnetlink.h \
+ include/uapi/linux/rtnetlink.h include/uapi/linux/if_addr.h \
+ include/uapi/linux/if_vlan.h include/crypto/sha1.h \
+ include/net/sch_generic.h include/uapi/linux/pkt_cls.h \
+ include/net/gen_stats.h include/uapi/linux/gen_stats.h \
+ include/net/rtnetlink.h include/net/netlink.h include/net/flow_offload.h \
+ include/uapi/linux/filter.h include/linux/rculist_nulls.h \
+ include/linux/poll.h include/uapi/linux/poll.h \
+ arch/arm/include/generated/uapi/asm/poll.h \
+ include/uapi/asm-generic/poll.h include/uapi/linux/eventpoll.h \
+ include/linux/indirect_call_wrapper.h include/net/dst.h \
+ include/net/neighbour.h include/net/tcp_states.h \
+ include/uapi/linux/net_tstamp.h include/net/l3mdev.h \
+ include/net/fib_rules.h include/uapi/linux/fib_rules.h \
+ include/net/fib_notifier.h include/linux/pinctrl/consumer.h \
+ include/linux/pinctrl/pinctrl-state.h drivers/net/can/m_can/m_can.h \
+ include/linux/can/core.h include/linux/freezer.h include/linux/clk.h \
+ include/linux/gpio.h arch/arm/include/asm/gpio.h \
+ include/asm-generic/gpio.h include/linux/gpio/driver.h \
+ include/linux/irqchip/chained_irq.h include/linux/irqdomain.h \
+ include/linux/pinctrl/pinctrl.h include/linux/pinctrl/devinfo.h \
+ include/linux/pinctrl/pinconf-generic.h include/linux/pinctrl/machine.h \
+ include/linux/gpio/consumer.h
diff -Naur A/drivers/net/can/m_can/m_can_pci.c B/drivers/net/can/m_can/m_can_pci.c
--- A/drivers/net/can/m_can/m_can_pci.c	2023-06-26 14:34:49.963944560 +0530
+++ B/drivers/net/can/m_can/m_can_pci.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,203 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * PCI Specific M_CAN Glue
- *
- * Copyright (C) 2018-2020 Intel Corporation
- * Author: Felipe Balbi (Intel)
- * Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
- * Author: Raymond Tan <raymond.tan@intel.com>
- */
-
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/netdevice.h>
-#include <linux/pci.h>
-#include <linux/pm_runtime.h>
-
-#include "m_can.h"
-
-#define M_CAN_PCI_MMIO_BAR		0
-
-#define M_CAN_CLOCK_FREQ_EHL		200000000
-#define CTL_CSR_INT_CTL_OFFSET		0x508
-
-struct m_can_pci_priv {
-	struct m_can_classdev cdev;
-
-	void __iomem *base;
-};
-
-static inline struct m_can_pci_priv *cdev_to_priv(struct m_can_classdev *cdev)
-{
-	return container_of(cdev, struct m_can_pci_priv, cdev);
-}
-
-static u32 iomap_read_reg(struct m_can_classdev *cdev, int reg)
-{
-	struct m_can_pci_priv *priv = cdev_to_priv(cdev);
-
-	return readl(priv->base + reg);
-}
-
-static int iomap_read_fifo(struct m_can_classdev *cdev, int offset, void *val, size_t val_count)
-{
-	struct m_can_pci_priv *priv = cdev_to_priv(cdev);
-	void __iomem *src = priv->base + offset;
-
-	while (val_count--) {
-		*(unsigned int *)val = ioread32(src);
-		val += 4;
-		src += 4;
-	}
-
-	return 0;
-}
-
-static int iomap_write_reg(struct m_can_classdev *cdev, int reg, int val)
-{
-	struct m_can_pci_priv *priv = cdev_to_priv(cdev);
-
-	writel(val, priv->base + reg);
-
-	return 0;
-}
-
-static int iomap_write_fifo(struct m_can_classdev *cdev, int offset,
-			    const void *val, size_t val_count)
-{
-	struct m_can_pci_priv *priv = cdev_to_priv(cdev);
-	void __iomem *dst = priv->base + offset;
-
-	while (val_count--) {
-		iowrite32(*(unsigned int *)val, dst);
-		val += 4;
-		dst += 4;
-	}
-
-	return 0;
-}
-
-static struct m_can_ops m_can_pci_ops = {
-	.read_reg = iomap_read_reg,
-	.write_reg = iomap_write_reg,
-	.write_fifo = iomap_write_fifo,
-	.read_fifo = iomap_read_fifo,
-};
-
-static int m_can_pci_probe(struct pci_dev *pci, const struct pci_device_id *id)
-{
-	struct device *dev = &pci->dev;
-	struct m_can_classdev *mcan_class;
-	struct m_can_pci_priv *priv;
-	void __iomem *base;
-	int ret;
-
-	ret = pcim_enable_device(pci);
-	if (ret)
-		return ret;
-
-	pci_set_master(pci);
-
-	ret = pcim_iomap_regions(pci, BIT(M_CAN_PCI_MMIO_BAR), pci_name(pci));
-	if (ret)
-		return ret;
-
-	base = pcim_iomap_table(pci)[M_CAN_PCI_MMIO_BAR];
-
-	if (!base) {
-		dev_err(dev, "failed to map BARs\n");
-		return -ENOMEM;
-	}
-
-	mcan_class = m_can_class_allocate_dev(&pci->dev,
-					      sizeof(struct m_can_pci_priv));
-	if (!mcan_class)
-		return -ENOMEM;
-
-	priv = cdev_to_priv(mcan_class);
-
-	priv->base = base;
-
-	ret = pci_alloc_irq_vectors(pci, 1, 1, PCI_IRQ_ALL_TYPES);
-	if (ret < 0)
-		return ret;
-
-	mcan_class->dev = &pci->dev;
-	mcan_class->net->irq = pci_irq_vector(pci, 0);
-	mcan_class->pm_clock_support = 1;
-	mcan_class->can.clock.freq = id->driver_data;
-	mcan_class->ops = &m_can_pci_ops;
-
-	pci_set_drvdata(pci, mcan_class);
-
-	ret = m_can_class_register(mcan_class);
-	if (ret)
-		goto err;
-
-	/* Enable interrupt control at CAN wrapper IP */
-	writel(0x1, base + CTL_CSR_INT_CTL_OFFSET);
-
-	pm_runtime_set_autosuspend_delay(dev, 1000);
-	pm_runtime_use_autosuspend(dev);
-	pm_runtime_put_noidle(dev);
-	pm_runtime_allow(dev);
-
-	return 0;
-
-err:
-	pci_free_irq_vectors(pci);
-	return ret;
-}
-
-static void m_can_pci_remove(struct pci_dev *pci)
-{
-	struct m_can_classdev *mcan_class = pci_get_drvdata(pci);
-	struct m_can_pci_priv *priv = cdev_to_priv(mcan_class);
-
-	pm_runtime_forbid(&pci->dev);
-	pm_runtime_get_noresume(&pci->dev);
-
-	/* Disable interrupt control at CAN wrapper IP */
-	writel(0x0, priv->base + CTL_CSR_INT_CTL_OFFSET);
-
-	m_can_class_unregister(mcan_class);
-	pci_free_irq_vectors(pci);
-}
-
-static __maybe_unused int m_can_pci_suspend(struct device *dev)
-{
-	return m_can_class_suspend(dev);
-}
-
-static __maybe_unused int m_can_pci_resume(struct device *dev)
-{
-	return m_can_class_resume(dev);
-}
-
-static SIMPLE_DEV_PM_OPS(m_can_pci_pm_ops,
-			 m_can_pci_suspend, m_can_pci_resume);
-
-static const struct pci_device_id m_can_pci_id_table[] = {
-	{ PCI_VDEVICE(INTEL, 0x4bc1), M_CAN_CLOCK_FREQ_EHL, },
-	{ PCI_VDEVICE(INTEL, 0x4bc2), M_CAN_CLOCK_FREQ_EHL, },
-	{  }	/* Terminating Entry */
-};
-MODULE_DEVICE_TABLE(pci, m_can_pci_id_table);
-
-static struct pci_driver m_can_pci_driver = {
-	.name = "m_can_pci",
-	.probe = m_can_pci_probe,
-	.remove = m_can_pci_remove,
-	.id_table = m_can_pci_id_table,
-	.driver = {
-		.pm = &m_can_pci_pm_ops,
-	},
-};
-
-module_pci_driver(m_can_pci_driver);
-
-MODULE_AUTHOR("Felipe Balbi (Intel)");
-MODULE_AUTHOR("Jarkko Nikula <jarkko.nikula@linux.intel.com>");
-MODULE_AUTHOR("Raymond Tan <raymond.tan@intel.com>");
-MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("CAN bus driver for Bosch M_CAN controller on PCI bus");
diff -Naur A/drivers/net/can/m_can/m_can_platform.c B/drivers/net/can/m_can/m_can_platform.c
--- A/drivers/net/can/m_can/m_can_platform.c	2023-06-26 14:34:49.967944560 +0530
+++ B/drivers/net/can/m_can/m_can_platform.c	2023-06-26 15:23:54.203840598 +0530
@@ -6,63 +6,42 @@
 // Copyright (C) 2018-19 Texas Instruments Incorporated - http://www.ti.com/
 
 #include <linux/platform_device.h>
-#include <linux/phy/phy.h>
 
 #include "m_can.h"
 
 struct m_can_plat_priv {
-	struct m_can_classdev cdev;
-
 	void __iomem *base;
 	void __iomem *mram_base;
 };
 
-static inline struct m_can_plat_priv *cdev_to_priv(struct m_can_classdev *cdev)
-{
-	return container_of(cdev, struct m_can_plat_priv, cdev);
-}
-
 static u32 iomap_read_reg(struct m_can_classdev *cdev, int reg)
 {
-	struct m_can_plat_priv *priv = cdev_to_priv(cdev);
+	struct m_can_plat_priv *priv = cdev->device_data;
 
 	return readl(priv->base + reg);
 }
 
-static int iomap_read_fifo(struct m_can_classdev *cdev, int offset, void *val, size_t val_count)
+static u32 iomap_read_fifo(struct m_can_classdev *cdev, int offset)
 {
-	struct m_can_plat_priv *priv = cdev_to_priv(cdev);
-	void __iomem *src = priv->mram_base + offset;
+	struct m_can_plat_priv *priv = cdev->device_data;
 
-	while (val_count--) {
-		*(unsigned int *)val = ioread32(src);
-		val += 4;
-		src += 4;
-	}
-
-	return 0;
+	return readl(priv->mram_base + offset);
 }
 
 static int iomap_write_reg(struct m_can_classdev *cdev, int reg, int val)
 {
-	struct m_can_plat_priv *priv = cdev_to_priv(cdev);
+	struct m_can_plat_priv *priv = cdev->device_data;
 
 	writel(val, priv->base + reg);
 
 	return 0;
 }
 
-static int iomap_write_fifo(struct m_can_classdev *cdev, int offset,
-			    const void *val, size_t val_count)
+static int iomap_write_fifo(struct m_can_classdev *cdev, int offset, int val)
 {
-	struct m_can_plat_priv *priv = cdev_to_priv(cdev);
-	void __iomem *dst = priv->mram_base + offset;
+	struct m_can_plat_priv *priv = cdev->device_data;
 
-	while (val_count--) {
-		iowrite32(*(unsigned int *)val, dst);
-		val += 4;
-		dst += 4;
-	}
+	writel(val, priv->mram_base + offset);
 
 	return 0;
 }
@@ -81,50 +60,41 @@
 	struct resource *res;
 	void __iomem *addr;
 	void __iomem *mram_addr;
-	struct phy *transceiver;
 	int irq, ret = 0;
 
-	mcan_class = m_can_class_allocate_dev(&pdev->dev,
-					      sizeof(struct m_can_plat_priv));
+	mcan_class = m_can_class_allocate_dev(&pdev->dev);
 	if (!mcan_class)
 		return -ENOMEM;
 
-	priv = cdev_to_priv(mcan_class);
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	mcan_class->device_data = priv;
 
-	ret = m_can_class_get_clocks(mcan_class);
-	if (ret)
-		goto probe_fail;
+	m_can_class_get_clocks(mcan_class);
 
-	addr = devm_platform_ioremap_resource_byname(pdev, "m_can");
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "m_can");
+	addr = devm_ioremap_resource(&pdev->dev, res);
 	irq = platform_get_irq_byname(pdev, "int0");
 	if (IS_ERR(addr) || irq < 0) {
 		ret = -EINVAL;
-		goto probe_fail;
+		goto failed_ret;
 	}
 
 	/* message ram could be shared */
 	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "message_ram");
 	if (!res) {
 		ret = -ENODEV;
-		goto probe_fail;
+		goto failed_ret;
 	}
 
 	mram_addr = devm_ioremap(&pdev->dev, res->start, resource_size(res));
 	if (!mram_addr) {
 		ret = -ENOMEM;
-		goto probe_fail;
-	}
-
-	transceiver = devm_phy_optional_get(&pdev->dev, NULL);
-	if (IS_ERR(transceiver)) {
-		ret = PTR_ERR(transceiver);
-		dev_err_probe(&pdev->dev, ret, "failed to get phy\n");
-		goto probe_fail;
+		goto failed_ret;
 	}
 
-	if (transceiver)
-		mcan_class->can.bitrate_max = transceiver->attrs.max_link_rate;
-
 	priv->base = addr;
 	priv->mram_base = mram_addr;
 
@@ -132,29 +102,18 @@
 	mcan_class->pm_clock_support = 1;
 	mcan_class->can.clock.freq = clk_get_rate(mcan_class->cclk);
 	mcan_class->dev = &pdev->dev;
-	mcan_class->transceiver = transceiver;
 
 	mcan_class->ops = &m_can_plat_ops;
 
 	mcan_class->is_peripheral = false;
 
-	platform_set_drvdata(pdev, mcan_class);
+	platform_set_drvdata(pdev, mcan_class->net);
 
-	ret = m_can_init_ram(mcan_class);
-	if (ret)
-		goto probe_fail;
+	m_can_init_ram(mcan_class);
 
-	pm_runtime_enable(mcan_class->dev);
 	ret = m_can_class_register(mcan_class);
-	if (ret)
-		goto out_runtime_disable;
-
-	return ret;
 
-out_runtime_disable:
-	pm_runtime_disable(mcan_class->dev);
-probe_fail:
-	m_can_class_free_dev(mcan_class->net);
+failed_ret:
 	return ret;
 }
 
@@ -170,20 +129,22 @@
 
 static int m_can_plat_remove(struct platform_device *pdev)
 {
-	struct m_can_plat_priv *priv = platform_get_drvdata(pdev);
-	struct m_can_classdev *mcan_class = &priv->cdev;
+	struct net_device *dev = platform_get_drvdata(pdev);
+	struct m_can_classdev *mcan_class = netdev_priv(dev);
 
 	m_can_class_unregister(mcan_class);
 
-	m_can_class_free_dev(mcan_class->net);
+	platform_set_drvdata(pdev, NULL);
 
 	return 0;
 }
 
 static int __maybe_unused m_can_runtime_suspend(struct device *dev)
 {
-	struct m_can_plat_priv *priv = dev_get_drvdata(dev);
-	struct m_can_classdev *mcan_class = &priv->cdev;
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct m_can_classdev *mcan_class = netdev_priv(ndev);
+
+	m_can_class_suspend(dev);
 
 	clk_disable_unprepare(mcan_class->cclk);
 	clk_disable_unprepare(mcan_class->hclk);
@@ -193,8 +154,8 @@
 
 static int __maybe_unused m_can_runtime_resume(struct device *dev)
 {
-	struct m_can_plat_priv *priv = dev_get_drvdata(dev);
-	struct m_can_classdev *mcan_class = &priv->cdev;
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct m_can_classdev *mcan_class = netdev_priv(ndev);
 	int err;
 
 	err = clk_prepare_enable(mcan_class->hclk);
diff -Naur A/drivers/net/can/m_can/modules.builtin B/drivers/net/can/m_can/modules.builtin
--- A/drivers/net/can/m_can/modules.builtin	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/modules.builtin	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1 @@
+drivers/net/can/m_can/m_can.ko
diff -Naur A/drivers/net/can/m_can/modules.order B/drivers/net/can/m_can/modules.order
--- A/drivers/net/can/m_can/modules.order	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/modules.order	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1 @@
+drivers/net/can/m_can/tcan4x5x.ko
diff -Naur A/drivers/net/can/m_can/.modules.order.cmd B/drivers/net/can/m_can/.modules.order.cmd
--- A/drivers/net/can/m_can/.modules.order.cmd	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/.modules.order.cmd	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1 @@
+cmd_drivers/net/can/m_can/modules.order := {   echo drivers/net/can/m_can/tcan4x5x.ko; :; } | awk '!x[$$0]++' - > drivers/net/can/m_can/modules.order
diff -Naur A/drivers/net/can/m_can/tcan4x5x.c B/drivers/net/can/m_can/tcan4x5x.c
--- A/drivers/net/can/m_can/tcan4x5x.c	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/tcan4x5x.c	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1,631 @@
+// SPDX-License-Identifier: GPL-2.0
+// SPI to CAN driver for the Texas Instruments TCAN4x5x
+// Copyright (C) 2018-19 Texas Instruments Incorporated - http://www.ti.com/
+
+#include <linux/regmap.h>
+#include <linux/spi/spi.h>
+
+#include <linux/regulator/consumer.h>
+#include <linux/gpio/consumer.h>
+
+#include "m_can.h"
+
+#define DEVICE_NAME "tcan4x5x"
+#define TCAN4X5X_EXT_CLK_DEF 40000000
+
+#define TCAN4X5X_DEV_ID0 0x00
+#define TCAN4X5X_DEV_ID1 0x04
+#define TCAN4X5X_REV 0x08
+#define TCAN4X5X_STATUS 0x0C
+#define TCAN4X5X_ERROR_STATUS 0x10
+#define TCAN4X5X_CONTROL 0x14
+
+#define TCAN4X5X_CONFIG 0x800
+#define TCAN4X5X_TS_PRESCALE 0x804
+#define TCAN4X5X_TEST_REG 0x808
+#define TCAN4X5X_INT_FLAGS 0x820
+#define TCAN4X5X_MCAN_INT_REG 0x824
+#define TCAN4X5X_INT_EN 0x830
+
+/* Interrupt bits */
+#define TCAN4X5X_CANBUSTERMOPEN_INT_EN BIT(30)
+#define TCAN4X5X_CANHCANL_INT_EN BIT(29)
+#define TCAN4X5X_CANHBAT_INT_EN BIT(28)
+#define TCAN4X5X_CANLGND_INT_EN BIT(27)
+#define TCAN4X5X_CANBUSOPEN_INT_EN BIT(26)
+#define TCAN4X5X_CANBUSGND_INT_EN BIT(25)
+#define TCAN4X5X_CANBUSBAT_INT_EN BIT(24)
+#define TCAN4X5X_UVSUP_INT_EN BIT(22)
+#define TCAN4X5X_UVIO_INT_EN BIT(21)
+#define TCAN4X5X_TSD_INT_EN BIT(19)
+#define TCAN4X5X_ECCERR_INT_EN BIT(16)
+#define TCAN4X5X_CANINT_INT_EN BIT(15)
+#define TCAN4X5X_LWU_INT_EN BIT(14)
+#define TCAN4X5X_CANSLNT_INT_EN BIT(10)
+#define TCAN4X5X_CANDOM_INT_EN BIT(8)
+#define TCAN4X5X_CANBUS_ERR_INT_EN BIT(5)
+#define TCAN4X5X_BUS_FAULT BIT(4)
+#define TCAN4X5X_MCAN_INT BIT(1)
+#define TCAN4X5X_ENABLE_TCAN_INT \
+	(TCAN4X5X_MCAN_INT | TCAN4X5X_BUS_FAULT | \
+	 TCAN4X5X_CANBUS_ERR_INT_EN | TCAN4X5X_CANINT_INT_EN)
+
+/* MCAN Interrupt bits */
+#define TCAN4X5X_MCAN_IR_ARA BIT(29)
+#define TCAN4X5X_MCAN_IR_PED BIT(28)
+#define TCAN4X5X_MCAN_IR_PEA BIT(27)
+#define TCAN4X5X_MCAN_IR_WD BIT(26)
+#define TCAN4X5X_MCAN_IR_BO BIT(25)
+#define TCAN4X5X_MCAN_IR_EW BIT(24)
+#define TCAN4X5X_MCAN_IR_EP BIT(23)
+#define TCAN4X5X_MCAN_IR_ELO BIT(22)
+#define TCAN4X5X_MCAN_IR_BEU BIT(21)
+#define TCAN4X5X_MCAN_IR_BEC BIT(20)
+#define TCAN4X5X_MCAN_IR_DRX BIT(19)
+#define TCAN4X5X_MCAN_IR_TOO BIT(18)
+#define TCAN4X5X_MCAN_IR_MRAF BIT(17)
+#define TCAN4X5X_MCAN_IR_TSW BIT(16)
+#define TCAN4X5X_MCAN_IR_TEFL BIT(15)
+#define TCAN4X5X_MCAN_IR_TEFF BIT(14)
+#define TCAN4X5X_MCAN_IR_TEFW BIT(13)
+#define TCAN4X5X_MCAN_IR_TEFN BIT(12)
+#define TCAN4X5X_MCAN_IR_TFE BIT(11)
+#define TCAN4X5X_MCAN_IR_TCF BIT(10)
+#define TCAN4X5X_MCAN_IR_TC BIT(9)
+#define TCAN4X5X_MCAN_IR_HPM BIT(8)
+#define TCAN4X5X_MCAN_IR_RF1L BIT(7)
+#define TCAN4X5X_MCAN_IR_RF1F BIT(6)
+#define TCAN4X5X_MCAN_IR_RF1W BIT(5)
+#define TCAN4X5X_MCAN_IR_RF1N BIT(4)
+#define TCAN4X5X_MCAN_IR_RF0L BIT(3)
+#define TCAN4X5X_MCAN_IR_RF0F BIT(2)
+#define TCAN4X5X_MCAN_IR_RF0W BIT(1)
+#define TCAN4X5X_MCAN_IR_RF0N BIT(0)
+#define TCAN4X5X_RESET_GPIO 22
+
+#ifdef CONFIG_MX6ULL_IWG26I
+#define TCAN4X5X_ENABLE_MCAN_INT \
+	(TCAN4X5X_MCAN_IR_TC | TCAN4X5X_MCAN_IR_RF0F | \
+	 TCAN4X5X_MCAN_IR_RF1F | TCAN4X5X_MCAN_IR_RF0W | \
+	 TCAN4X5X_MCAN_IR_RF1W)
+#else /* CONFIG_MX6ULL_IWG26I */
+#define TCAN4X5X_ENABLE_MCAN_INT \
+	(TCAN4X5X_MCAN_IR_TC | TCAN4X5X_MCAN_IR_RF0N | \
+	 TCAN4X5X_MCAN_IR_RF1N | TCAN4X5X_MCAN_IR_RF0F | \
+	 TCAN4X5X_MCAN_IR_RF1F)
+#endif /* CONFIG_MX6ULL_IWG26I */
+
+#define TCAN4X5X_MRAM_START 0x8000
+#define TCAN4X5X_MCAN_OFFSET 0x1000
+#define TCAN4X5X_MAX_REGISTER 0x8fff
+
+#define TCAN4X5X_CLEAR_ALL_INT 0xffffffff
+#define TCAN4X5X_SET_ALL_INT 0xffffffff
+
+#define TCAN4X5X_WRITE_CMD (0x61 << 24)
+#define TCAN4X5X_READ_CMD (0x41 << 24)
+
+#define TCAN4X5X_MODE_SEL_MASK (BIT(7) | BIT(6))
+#define WDT_ENABLE (BIT(3) | BIT(4))
+#define WDT_ENABLE_BIT BIT(3)
+#define WDT_CLK (BIT(27) | BIT(28))
+#define WDT_CLK_BIT BIT(27)
+#define WDT_RESET (BIT(18) | BIT(19))
+#define WDT_RESET_BIT BIT(18)
+#define WDT_TIM (BIT(28) | BIT(29))
+#define WDT_TIM_BIT BIT(29)
+#define TCAN4X5X_MODE_SLEEP 0x00
+#define TCAN4X5X_MODE_STANDBY BIT(6)
+#define TCAN4X5X_MODE_NORMAL BIT(7)
+
+#define TCAN4X5X_SW_RESET BIT(2)
+
+#define TCAN4X5X_MCAN_CONFIGURED BIT(5)
+#define TCAN4X5X_WATCHDOG_EN BIT(3)
+#define TCAN4X5X_WD_60_MS_TIMER 0
+#define TCAN4X5X_WD_600_MS_TIMER BIT(28)
+#define TCAN4X5X_WD_3_S_TIMER BIT(29)
+#define TCAN4X5X_WD_6_S_TIMER (BIT(28) | BIT(29))
+
+bool iw_tcan_prop = false; /* Flag added for Rugged Telematics Device */
+
+struct tcan4x5x_priv {
+	struct regmap *regmap;
+	struct spi_device *spi;
+
+	struct m_can_classdev *mcan_dev;
+
+	struct gpio_desc *reset_gpio;
+	struct gpio_desc *device_wake_gpio;
+	struct gpio_desc *device_state_gpio;
+	struct regulator *power;
+
+	/* Register based ip */
+	int mram_start;
+	int reg_offset;
+};
+
+static struct can_bittiming_const tcan4x5x_bittiming_const = {
+	.name = DEVICE_NAME,
+	.tseg1_min = 2,
+	.tseg1_max = 31,
+	.tseg2_min = 2,
+	.tseg2_max = 16,
+	.sjw_max = 16,
+	.brp_min = 1,
+	.brp_max = 32,
+	.brp_inc = 1,
+};
+
+static struct can_bittiming_const tcan4x5x_data_bittiming_const = {
+	.name = DEVICE_NAME,
+	.tseg1_min = 1,
+	.tseg1_max = 32,
+	.tseg2_min = 1,
+	.tseg2_max = 16,
+	.sjw_max = 16,
+	.brp_min = 1,
+	.brp_max = 32,
+	.brp_inc = 1,
+};
+
+static void tcan4x5x_check_wake(struct tcan4x5x_priv *priv)
+{
+	int wake_state = 0;
+
+	if (priv->device_state_gpio)
+		wake_state = gpiod_get_value(priv->device_state_gpio);
+
+	if (priv->device_wake_gpio && wake_state) {
+		gpiod_set_value(priv->device_wake_gpio, 0);
+		usleep_range(5, 50);
+		gpiod_set_value(priv->device_wake_gpio, 1);
+	}
+}
+
+static int tcan4x5x_reset(struct tcan4x5x_priv *priv)
+{
+	int ret = 0;
+
+	if (priv->reset_gpio) {
+		gpiod_set_value(priv->reset_gpio, 1);
+
+		/* tpulse_width minimum 30us */
+		usleep_range(30, 100);
+		gpiod_set_value(priv->reset_gpio, 0);
+	} else {
+		ret = regmap_write(priv->regmap, TCAN4X5X_CONFIG,
+				TCAN4X5X_SW_RESET);
+		if (ret)
+			return ret;
+	}
+
+	usleep_range(700, 1000);
+
+	return ret;
+}
+
+static int regmap_spi_gather_write(void *context, const void *reg,
+		size_t reg_len, const void *val,
+		size_t val_len)
+{
+	struct device *dev = context;
+	struct spi_device *spi = to_spi_device(dev);
+	struct spi_message m;
+	u32 addr;
+	struct spi_transfer t[2] = {
+		{ .tx_buf = &addr, .len = reg_len, .cs_change = 0,},
+		{ .tx_buf = val, .len = val_len, },
+	};
+
+	addr = TCAN4X5X_WRITE_CMD | (*((u16 *)reg) << 8) | val_len >> 2;
+
+	spi_message_init(&m);
+	spi_message_add_tail(&t[0], &m);
+	spi_message_add_tail(&t[1], &m);
+
+	return spi_sync(spi, &m);
+}
+
+static int tcan4x5x_regmap_write(void *context, const void *data, size_t count)
+{
+	u16 *reg = (u16 *)(data);
+	const u32 *val = data + 4;
+
+	return regmap_spi_gather_write(context, reg, 4, val, count - 4);
+}
+
+static int regmap_spi_async_write(void *context,
+		const void *reg, size_t reg_len,
+		const void *val, size_t val_len,
+		struct regmap_async *a)
+{
+	return -ENOTSUPP;
+}
+
+static struct regmap_async *regmap_spi_async_alloc(void)
+{
+	return NULL;
+}
+
+static int tcan4x5x_regmap_read(void *context,
+		const void *reg, size_t reg_size,
+		void *val, size_t val_size)
+{
+	struct device *dev = context;
+	struct spi_device *spi = to_spi_device(dev);
+
+	u32 addr = TCAN4X5X_READ_CMD | (*((u16 *)reg) << 8) | val_size >> 2;
+
+	return spi_write_then_read(spi, &addr, reg_size, (u32 *)val, val_size);
+}
+
+static struct regmap_bus tcan4x5x_bus = {
+	.write = tcan4x5x_regmap_write,
+	.gather_write = regmap_spi_gather_write,
+	.async_write = regmap_spi_async_write,
+	.async_alloc = regmap_spi_async_alloc,
+	.read = tcan4x5x_regmap_read,
+	.read_flag_mask = 0x00,
+	.reg_format_endian_default = REGMAP_ENDIAN_NATIVE,
+	.val_format_endian_default = REGMAP_ENDIAN_NATIVE,
+};
+
+static u32 tcan4x5x_read_reg(struct m_can_classdev *cdev, int reg)
+{
+	struct tcan4x5x_priv *priv = cdev->device_data;
+	u32 val;
+
+	regmap_read(priv->regmap, priv->reg_offset + reg, &val);
+
+	return val;
+}
+
+static u32 tcan4x5x_read_fifo(struct m_can_classdev *cdev, int addr_offset)
+{
+	struct tcan4x5x_priv *priv = cdev->device_data;
+	u32 val;
+
+	regmap_read(priv->regmap, priv->mram_start + addr_offset, &val);
+
+	return val;
+}
+
+static int tcan4x5x_write_reg(struct m_can_classdev *cdev, int reg, int val)
+{
+	struct tcan4x5x_priv *priv = cdev->device_data;
+
+	return regmap_write(priv->regmap, priv->reg_offset + reg, val);
+}
+
+static int tcan4x5x_write_fifo(struct m_can_classdev *cdev,
+		int addr_offset, int val)
+{
+	struct tcan4x5x_priv *priv = cdev->device_data;
+
+	return regmap_write(priv->regmap, priv->mram_start + addr_offset, val);
+}
+
+static int tcan4x5x_power_enable(struct regulator *reg, int enable)
+{
+	if (IS_ERR_OR_NULL(reg))
+		return 0;
+
+	if (enable)
+		return regulator_enable(reg);
+	else
+		return regulator_disable(reg);
+}
+
+static int tcan4x5x_write_tcan_reg(struct m_can_classdev *cdev,
+		int reg, int val)
+{
+	struct tcan4x5x_priv *priv = cdev->device_data;
+
+	return regmap_write(priv->regmap, reg, val);
+}
+
+static int tcan4x5x_clear_interrupts(struct m_can_classdev *cdev)
+{
+	int ret;
+	struct tcan4x5x_priv *tcan4x5x = cdev->device_data;
+	ret = tcan4x5x_write_tcan_reg(cdev, TCAN4X5X_STATUS,
+			TCAN4X5X_CLEAR_ALL_INT);
+	if (ret)
+		return ret;
+
+	ret = tcan4x5x_write_tcan_reg(cdev, TCAN4X5X_MCAN_INT_REG,
+			TCAN4X5X_ENABLE_MCAN_INT);
+	if (ret)
+		return ret;
+
+	ret = tcan4x5x_write_tcan_reg(cdev, TCAN4X5X_INT_FLAGS,
+			TCAN4X5X_CLEAR_ALL_INT);
+	if (ret)
+		return ret;
+
+	ret = tcan4x5x_write_tcan_reg(cdev, TCAN4X5X_ERROR_STATUS,
+			TCAN4X5X_CLEAR_ALL_INT);
+	if (ret)
+		return ret;
+	/* Watchdog reset */
+	ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
+			WDT_RESET, WDT_RESET_BIT);
+	if (ret)
+		return ret;
+
+	return ret;
+}
+
+static int tcan4x5x_init(struct m_can_classdev *cdev)
+{
+	struct tcan4x5x_priv *tcan4x5x = cdev->device_data;
+	int ret;
+
+	tcan4x5x_check_wake(tcan4x5x);
+
+	ret = tcan4x5x_write_tcan_reg(cdev, TCAN4X5X_INT_EN,
+			TCAN4X5X_ENABLE_TCAN_INT);
+	if (ret)
+		return ret;
+	ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
+			WDT_CLK, WDT_CLK_BIT);
+	if (ret)
+		return ret;
+	ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
+			WDT_ENABLE, WDT_ENABLE_BIT);
+	if (ret)
+		return ret;
+	ret = tcan4x5x_clear_interrupts(cdev);
+	if (ret)
+		return ret;
+	ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
+			TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_NORMAL);
+	if (ret)
+		return ret;
+	/* Zero out the MCAN buffers */
+	m_can_init_ram(cdev);
+
+	return ret;
+}
+
+static int tcan4x5x_parse_config(struct m_can_classdev *cdev)
+{
+	struct tcan4x5x_priv *tcan4x5x = cdev->device_data;
+	int ret;
+
+	if (!iw_tcan_prop)
+	{
+		tcan4x5x->device_wake_gpio = devm_gpiod_get(cdev->dev, "device-wake",
+				GPIOD_OUT_HIGH);
+		if (IS_ERR(tcan4x5x->device_wake_gpio)) {
+			dev_err(cdev->dev, "device-wake gpio not defined\n");
+			return -EINVAL;
+		}
+	}
+
+	tcan4x5x->reset_gpio = devm_gpiod_get_optional(cdev->dev, "reset",
+			GPIOD_OUT_LOW);
+	if (IS_ERR(tcan4x5x->reset_gpio))
+		tcan4x5x->reset_gpio = NULL;
+
+	if (!iw_tcan_prop)
+	{
+		ret = tcan4x5x_reset(tcan4x5x);
+		if (ret)
+			return ret;
+	}
+
+	tcan4x5x->device_state_gpio = devm_gpiod_get_optional(cdev->dev,
+			"device-state",
+			GPIOD_IN);
+	if (IS_ERR(tcan4x5x->device_state_gpio))
+		tcan4x5x->device_state_gpio = NULL;
+
+	tcan4x5x->power = devm_regulator_get_optional(cdev->dev,
+			"vsup");
+	if (PTR_ERR(tcan4x5x->power) == -EPROBE_DEFER)
+		return -EPROBE_DEFER;
+
+	return 0;
+}
+
+static const struct regmap_config tcan4x5x_regmap = {
+	.reg_bits = 32,
+	.val_bits = 32,
+	.cache_type = REGCACHE_NONE,
+	.max_register = TCAN4X5X_MAX_REGISTER,
+};
+
+static struct m_can_ops tcan4x5x_ops = {
+	.init = tcan4x5x_init,
+	.read_reg = tcan4x5x_read_reg,
+	.write_reg = tcan4x5x_write_reg,
+	.write_fifo = tcan4x5x_write_fifo,
+	.read_fifo = tcan4x5x_read_fifo,
+	.clear_interrupts = tcan4x5x_clear_interrupts,
+};
+
+/*
+* Added for the reset of TCAN4X5X chip
+*/
+static int tcan4x5x_wakeup_mode( void )
+{
+	usleep_range(10, 50);
+	gpio_request(TCAN4X5X_RESET_GPIO, "TCAN_ON");
+	gpio_direction_output(TCAN4X5X_RESET_GPIO, 0);
+	gpio_set_value(TCAN4X5X_RESET_GPIO, 0);
+	usleep_range(1, 50);
+
+	gpio_request(TCAN4X5X_RESET_GPIO, "TCAN_ON");
+	gpio_direction_output(TCAN4X5X_RESET_GPIO, 0);
+	gpio_set_value(TCAN4X5X_RESET_GPIO, 1);
+	usleep_range(1, 50);
+
+	gpio_request(TCAN4X5X_RESET_GPIO, "TCAN_ON");
+	gpio_direction_output(TCAN4X5X_RESET_GPIO, 0);
+	gpio_set_value(TCAN4X5X_RESET_GPIO, 0);
+	usleep_range(1, 50);
+
+	return 0;
+}
+
+static int tcan4x5x_can_probe(struct spi_device *spi)
+{
+	struct tcan4x5x_priv *priv;
+	struct m_can_classdev *mcan_class;
+	int freq, ret;
+
+	/* For finding the TCAN node */
+	struct device_node *tcan_node;
+	tcan_node = of_find_compatible_node(NULL, NULL, "ti,tcan4x5x");
+	if (!tcan_node) {
+		printk("%s : can't find TCAN node\n", __func__);
+		return -EINVAL;
+	}
+
+	/* For finding the iWave flag defined in Device Tree */
+	if (of_get_property(tcan_node, "iw-tcan-prop", NULL))
+	{
+		iw_tcan_prop = true;
+		m_can_set_iw_mcan_prop_flag();
+		tcan4x5x_wakeup_mode( );
+		msleep(100);
+	}
+
+	mcan_class = m_can_class_allocate_dev(&spi->dev);
+	if (!mcan_class)
+		return -ENOMEM;
+
+	priv = devm_kzalloc(&spi->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	mcan_class->device_data = priv;
+
+	m_can_class_get_clocks(mcan_class);
+	if (IS_ERR(mcan_class->cclk)) {
+		dev_err(&spi->dev, "no CAN clock source defined\n");
+		freq = TCAN4X5X_EXT_CLK_DEF;
+	} else {
+		freq = clk_get_rate(mcan_class->cclk);
+	}
+
+	/* Sanity check */
+	if (freq < 20000000 || freq > TCAN4X5X_EXT_CLK_DEF)
+		return -ERANGE;
+
+	priv->reg_offset = TCAN4X5X_MCAN_OFFSET;
+	priv->mram_start = TCAN4X5X_MRAM_START;
+	priv->spi = spi;
+	priv->mcan_dev = mcan_class;
+
+	mcan_class->pm_clock_support = 0;
+	mcan_class->can.clock.freq = freq;
+	mcan_class->dev = &spi->dev;
+	mcan_class->ops = &tcan4x5x_ops;
+	mcan_class->is_peripheral = true;
+	mcan_class->bit_timing = &tcan4x5x_bittiming_const;
+	mcan_class->data_timing = &tcan4x5x_data_bittiming_const;
+	mcan_class->net->irq = spi->irq;
+
+	spi_set_drvdata(spi, priv);
+
+	ret = tcan4x5x_parse_config(mcan_class);
+	if (ret)
+		goto out_clk;
+
+	/* Configure the SPI bus */
+	spi->bits_per_word = 32;
+	ret = spi_setup(spi);
+	if (ret)
+		goto out_clk;
+
+	priv->regmap = devm_regmap_init(&spi->dev, &tcan4x5x_bus,
+			&spi->dev, &tcan4x5x_regmap);
+
+	tcan4x5x_power_enable(priv->power, 1);
+
+	ret = tcan4x5x_init(mcan_class);
+	if (ret)
+		goto out_power;
+
+	ret = m_can_class_register(mcan_class);
+	if (ret)
+		goto out_power;
+
+	if (of_get_property(tcan_node, "wakeup-source", NULL))
+        {
+                device_init_wakeup(mcan_class->dev, true);
+        }
+
+	netdev_info(mcan_class->net, "TCAN4X5X successfully initialized.\n");
+	return 0;
+
+out_power:
+	tcan4x5x_power_enable(priv->power, 0);
+out_clk:
+	if (!IS_ERR(mcan_class->cclk)) {
+		clk_disable_unprepare(mcan_class->cclk);
+		clk_disable_unprepare(mcan_class->hclk);
+	}
+
+	dev_err(&spi->dev, "Probe failed, err=%d\n", ret);
+	return ret;
+}
+
+static int tcan4x5x_sleep_mode( struct tcan4x5x_priv *priv )
+{
+	struct tcan4x5x_priv *tcan4x5x =
+		(struct tcan4x5x_priv *)priv;
+	int ret;
+	ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
+			TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_SLEEP );
+	return ret;
+}
+
+static int tcan4x5x_can_remove(struct spi_device *spi)
+{
+	struct tcan4x5x_priv *priv = spi_get_drvdata(spi);
+
+	if (iw_tcan_prop)
+	{
+		tcan4x5x_sleep_mode( priv );
+	}
+	tcan4x5x_power_enable(priv->power, 0);
+
+	m_can_class_unregister(priv->mcan_dev);
+
+	return 0;
+}
+
+static const struct of_device_id tcan4x5x_of_match[] = {
+	{ .compatible = "ti,tcan4x5x", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, tcan4x5x_of_match);
+
+static const struct spi_device_id tcan4x5x_id_table[] = {
+	{
+		.name		= "tcan4x5x",
+		.driver_data	= 0,
+	},
+	{ }
+};
+MODULE_DEVICE_TABLE(spi, tcan4x5x_id_table);
+
+static struct spi_driver tcan4x5x_can_driver = {
+	.driver = {
+		.name = DEVICE_NAME,
+		.of_match_table = tcan4x5x_of_match,
+		.pm = NULL,
+	},
+	.id_table = tcan4x5x_id_table,
+	.probe = tcan4x5x_can_probe,
+	.remove = tcan4x5x_can_remove,
+};
+module_spi_driver(tcan4x5x_can_driver);
+
+MODULE_AUTHOR("Dan Murphy <dmurphy@ti.com>");
+MODULE_DESCRIPTION("Texas Instruments TCAN4x5x CAN driver");
+MODULE_LICENSE("GPL v2");
diff -Naur A/drivers/net/can/m_can/tcan4x5x-core.c B/drivers/net/can/m_can/tcan4x5x-core.c
--- A/drivers/net/can/m_can/tcan4x5x-core.c	2023-06-26 14:34:49.967944560 +0530
+++ B/drivers/net/can/m_can/tcan4x5x-core.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,706 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-// SPI to CAN driver for the Texas Instruments TCAN4x5x
-// Copyright (C) 2018-19 Texas Instruments Incorporated - http://www.ti.com/
-
-#include "tcan4x5x.h"
-
-#define TCAN4X5X_EXT_CLK_DEF 40000000
-
-#define TCAN4X5X_DEV_ID0 0x00
-#define TCAN4X5X_DEV_ID1 0x04
-#define TCAN4X5X_REV 0x08
-#define TCAN4X5X_STATUS 0x0C
-#define TCAN4X5X_ERROR_STATUS 0x10
-#define TCAN4X5X_CONTROL 0x14
-
-#define TCAN4X5X_CONFIG 0x800
-#define TCAN4X5X_TS_PRESCALE 0x804
-#define TCAN4X5X_TEST_REG 0x808
-#define TCAN4X5X_INT_FLAGS 0x820
-#define TCAN4X5X_MCAN_INT_REG 0x824
-#define TCAN4X5X_INT_EN 0x830
-
-/* Interrupt bits */
-#define TCAN4X5X_CANBUSTERMOPEN_INT_EN BIT(30)
-#define TCAN4X5X_CANHCANL_INT_EN BIT(29)
-#define TCAN4X5X_CANHBAT_INT_EN BIT(28)
-#define TCAN4X5X_CANLGND_INT_EN BIT(27)
-#define TCAN4X5X_CANBUSOPEN_INT_EN BIT(26)
-#define TCAN4X5X_CANBUSGND_INT_EN BIT(25)
-#define TCAN4X5X_CANBUSBAT_INT_EN BIT(24)
-#define TCAN4X5X_UVSUP_INT_EN BIT(22)
-#define TCAN4X5X_UVIO_INT_EN BIT(21)
-#define TCAN4X5X_TSD_INT_EN BIT(19)
-#define TCAN4X5X_ECCERR_INT_EN BIT(16)
-#define TCAN4X5X_CANINT_INT_EN BIT(15)
-#define TCAN4X5X_LWU_INT_EN BIT(14)
-#define TCAN4X5X_CANSLNT_INT_EN BIT(10)
-#define TCAN4X5X_CANDOM_INT_EN BIT(8)
-#define TCAN4X5X_CANBUS_ERR_INT_EN BIT(5)
-#define TCAN4X5X_BUS_FAULT BIT(4)
-#define TCAN4X5X_MCAN_INT BIT(1)
-#define TCAN4X5X_ENABLE_TCAN_INT \
-	(TCAN4X5X_MCAN_INT | TCAN4X5X_BUS_FAULT | \
-	 TCAN4X5X_CANBUS_ERR_INT_EN | TCAN4X5X_CANINT_INT_EN)
-
-/* MCAN Interrupt bits */
-#define TCAN4X5X_MCAN_IR_ARA BIT(29)
-#define TCAN4X5X_MCAN_IR_PED BIT(28)
-#define TCAN4X5X_MCAN_IR_PEA BIT(27)
-#define TCAN4X5X_MCAN_IR_WD BIT(26)
-#define TCAN4X5X_MCAN_IR_BO BIT(25)
-#define TCAN4X5X_MCAN_IR_EW BIT(24)
-#define TCAN4X5X_MCAN_IR_EP BIT(23)
-#define TCAN4X5X_MCAN_IR_ELO BIT(22)
-#define TCAN4X5X_MCAN_IR_BEU BIT(21)
-#define TCAN4X5X_MCAN_IR_BEC BIT(20)
-#define TCAN4X5X_MCAN_IR_DRX BIT(19)
-#define TCAN4X5X_MCAN_IR_TOO BIT(18)
-#define TCAN4X5X_MCAN_IR_MRAF BIT(17)
-#define TCAN4X5X_MCAN_IR_TSW BIT(16)
-#define TCAN4X5X_MCAN_IR_TEFL BIT(15)
-#define TCAN4X5X_MCAN_IR_TEFF BIT(14)
-#define TCAN4X5X_MCAN_IR_TEFW BIT(13)
-#define TCAN4X5X_MCAN_IR_TEFN BIT(12)
-#define TCAN4X5X_MCAN_IR_TFE BIT(11)
-#define TCAN4X5X_MCAN_IR_TCF BIT(10)
-#define TCAN4X5X_MCAN_IR_TC BIT(9)
-#define TCAN4X5X_MCAN_IR_HPM BIT(8)
-#define TCAN4X5X_MCAN_IR_RF1L BIT(7)
-#define TCAN4X5X_MCAN_IR_RF1F BIT(6)
-#define TCAN4X5X_MCAN_IR_RF1W BIT(5)
-#define TCAN4X5X_MCAN_IR_RF1N BIT(4)
-#define TCAN4X5X_MCAN_IR_RF0L BIT(3)
-#define TCAN4X5X_MCAN_IR_RF0F BIT(2)
-#define TCAN4X5X_MCAN_IR_RF0W BIT(1)
-#define TCAN4X5X_MCAN_IR_RF0N BIT(0)
-#define TCAN4X5X_RESET_GPIO 22
-
-#ifdef CONFIG_MX6ULL_IWG26I
-#define TCAN4X5X_ENABLE_MCAN_INT \
-        (TCAN4X5X_MCAN_IR_TC | TCAN4X5X_MCAN_IR_RF0F | \
-         TCAN4X5X_MCAN_IR_RF1F | TCAN4X5X_MCAN_IR_RF0W | \
-         TCAN4X5X_MCAN_IR_RF1W)
-
-#define CTRL_REG	0x1018
-#define CTRL_INIT_BIT	BIT(0)
-#define CTRL_CCE_BIT	BIT(1)
-#define RX_FIFO0_CONFIGURATION_REG	0x10A0
-#define RX_FIFO0_WATERMARK_BIT	BIT(24)
-
-#define WDT_ENABLE (BIT(3) | BIT(4))
-#define WDT_ENABLE_BIT BIT(3)
-#define WDT_CLK (BIT(27) | BIT(28))
-#define WDT_CLK_BIT BIT(27)
-#define WDT_RESET (BIT(18) | BIT(19))
-#define WDT_RESET_BIT BIT(18)
-#define WDT_TIM (BIT(28) | BIT(29))
-#define WDT_TIM_BIT BIT(29)
-#else /* CONFIG_MX6ULL_IWG26I */
-#define TCAN4X5X_ENABLE_MCAN_INT \
-	(TCAN4X5X_MCAN_IR_TC | TCAN4X5X_MCAN_IR_RF0N | \
-	 TCAN4X5X_MCAN_IR_RF1N | TCAN4X5X_MCAN_IR_RF0F | \
-	 TCAN4X5X_MCAN_IR_RF1F)
-#endif /* CONFIG_MX6ULL_IWG26I */
-
-#define TCAN4X5X_MRAM_START 0x8000
-#define TCAN4X5X_MCAN_OFFSET 0x1000
-
-#define TCAN4X5X_CLEAR_ALL_INT 0xffffffff
-#define TCAN4X5X_SET_ALL_INT 0xffffffff
-
-#define TCAN4X5X_MODE_SEL_MASK (BIT(7) | BIT(6))
-#define TCAN4X5X_MODE_SLEEP 0x00
-#define TCAN4X5X_MODE_STANDBY BIT(6)
-#define TCAN4X5X_MODE_NORMAL BIT(7)
-
-#define TCAN4X5X_DISABLE_WAKE_MSK	(BIT(31) | BIT(30))
-#define TCAN4X5X_DISABLE_INH_MSK	BIT(9)
-
-#define TCAN4X5X_SW_RESET BIT(2)
-
-#define TCAN4X5X_MCAN_CONFIGURED BIT(5)
-#define TCAN4X5X_WATCHDOG_EN BIT(3)
-#define TCAN4X5X_WD_60_MS_TIMER 0
-#define TCAN4X5X_WD_600_MS_TIMER BIT(28)
-#define TCAN4X5X_WD_3_S_TIMER BIT(29)
-#define TCAN4X5X_WD_6_S_TIMER (BIT(28) | BIT(29))
-
-bool iw_tcan_prop = false; /* Flag added for Telematics Device */
-int iw_rxf0_reg_val; /* Variable to store the RX FIFO 0 Configuration register */
-
-static inline struct tcan4x5x_priv *cdev_to_priv(struct m_can_classdev *cdev)
-{
-	return container_of(cdev, struct tcan4x5x_priv, cdev);
-}
-
-static void tcan4x5x_check_wake(struct tcan4x5x_priv *priv)
-{
-	int wake_state = 0;
-
-	if (priv->device_state_gpio)
-		wake_state = gpiod_get_value(priv->device_state_gpio);
-
-	if (priv->device_wake_gpio && wake_state) {
-		gpiod_set_value(priv->device_wake_gpio, 0);
-		usleep_range(5, 50);
-		gpiod_set_value(priv->device_wake_gpio, 1);
-	}
-}
-
-static int tcan4x5x_reset(struct tcan4x5x_priv *priv)
-{
-	int ret = 0;
-
-	if (priv->reset_gpio) {
-		gpiod_set_value(priv->reset_gpio, 1);
-
-		/* tpulse_width minimum 30us */
-		usleep_range(30, 100);
-		gpiod_set_value(priv->reset_gpio, 0);
-	} else {
-		ret = regmap_write(priv->regmap, TCAN4X5X_CONFIG,
-				   TCAN4X5X_SW_RESET);
-		if (ret)
-			return ret;
-	}
-
-	usleep_range(700, 1000);
-
-	return ret;
-}
-
-static u32 tcan4x5x_read_reg(struct m_can_classdev *cdev, int reg)
-{
-	struct tcan4x5x_priv *priv = cdev_to_priv(cdev);
-	u32 val;
-
-	regmap_read(priv->regmap, TCAN4X5X_MCAN_OFFSET + reg, &val);
-
-	return val;
-}
-
-static int tcan4x5x_read_fifo(struct m_can_classdev *cdev, int addr_offset,
-			      void *val, size_t val_count)
-{
-	struct tcan4x5x_priv *priv = cdev_to_priv(cdev);
-
-	return regmap_bulk_read(priv->regmap, TCAN4X5X_MRAM_START + addr_offset, val, val_count);
-}
-
-static int tcan4x5x_write_reg(struct m_can_classdev *cdev, int reg, int val)
-{
-	struct tcan4x5x_priv *priv = cdev_to_priv(cdev);
-
-	return regmap_write(priv->regmap, TCAN4X5X_MCAN_OFFSET + reg, val);
-}
-
-static int tcan4x5x_write_fifo(struct m_can_classdev *cdev,
-			       int addr_offset, const void *val, size_t val_count)
-{
-	struct tcan4x5x_priv *priv = cdev_to_priv(cdev);
-
-	return regmap_bulk_write(priv->regmap, TCAN4X5X_MRAM_START + addr_offset, val, val_count);
-}
-
-static int tcan4x5x_power_enable(struct regulator *reg, int enable)
-{
-	if (IS_ERR_OR_NULL(reg))
-		return 0;
-
-	if (enable)
-		return regulator_enable(reg);
-	else
-		return regulator_disable(reg);
-}
-
-static int tcan4x5x_write_tcan_reg(struct m_can_classdev *cdev,
-				   int reg, int val)
-{
-	struct tcan4x5x_priv *priv = cdev_to_priv(cdev);
-
-	return regmap_write(priv->regmap, reg, val);
-}
-
-static int tcan4x5x_clear_interrupts(struct m_can_classdev *cdev)
-{
-	int ret;
-	struct tcan4x5x_priv *tcan4x5x = cdev_to_priv(cdev);
- 
-	ret = tcan4x5x_write_tcan_reg(cdev, TCAN4X5X_STATUS,
-				      TCAN4X5X_CLEAR_ALL_INT);
-	if (ret)
-		return ret;
-
-	ret = tcan4x5x_write_tcan_reg(cdev, TCAN4X5X_MCAN_INT_REG,
-				      TCAN4X5X_ENABLE_MCAN_INT);
-	if (ret)
-		return ret;
-
-	ret = tcan4x5x_write_tcan_reg(cdev, TCAN4X5X_INT_FLAGS,
-				      TCAN4X5X_CLEAR_ALL_INT);
-	if (ret)
-		return ret;
-
-	if (iw_tcan_prop)
-	{
-		ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
-				WDT_RESET, WDT_RESET_BIT);
-	}
-
-	return ret;
-}
-
-static int tcan4x5x_init(struct m_can_classdev *cdev)
-{
-	struct tcan4x5x_priv *tcan4x5x = cdev_to_priv(cdev);
-	int ret;
-
-	tcan4x5x_check_wake(tcan4x5x);
-
-	/* 2404 */
-	ret = tcan4x5x_clear_interrupts(cdev);
-        if (ret)
-                return ret;
-	/* */
-
-	ret = tcan4x5x_write_tcan_reg(cdev, TCAN4X5X_INT_EN,
-				      TCAN4X5X_ENABLE_TCAN_INT);
-	if (ret)
-		return ret;
-
-	/* Zero out the MCAN buffers */
-	//ret = m_can_init_ram(cdev);
-	//if (ret)
-	//	return ret;
-
-	if (iw_tcan_prop)
-	{
-		ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
-				WDT_CLK, WDT_CLK_BIT);
-		if (ret)
-			return ret;
-	
-		ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
-				WDT_ENABLE, WDT_ENABLE_BIT);
-		if (ret)
-			return ret;
-	
-	/*	ret = tcan4x5x_clear_interrupts(cdev);
-		if (ret)
-			return ret;*/
-	}
-
-	m_can_init_ram(cdev);
-	ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
-				 TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_NORMAL);
-	if (ret)
-		return ret;
-
-	return ret;
-}
-
-static int tcan4x5x_disable_wake(struct m_can_classdev *cdev)
-{
-	struct tcan4x5x_priv *tcan4x5x = cdev_to_priv(cdev);
-
-	return regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
-				  TCAN4X5X_DISABLE_WAKE_MSK, 0x00);
-}
-
-static int tcan4x5x_disable_state(struct m_can_classdev *cdev)
-{
-	struct tcan4x5x_priv *tcan4x5x = cdev_to_priv(cdev);
-
-	return regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
-				  TCAN4X5X_DISABLE_INH_MSK, 0x01);
-}
-
-static int tcan4x5x_get_gpios(struct m_can_classdev *cdev)
-{
-	struct tcan4x5x_priv *tcan4x5x = cdev_to_priv(cdev);
-	int ret;
-
-	if (!iw_tcan_prop)
-	{
-		tcan4x5x->device_wake_gpio = devm_gpiod_get(cdev->dev, "device-wake",
-				GPIOD_OUT_HIGH);
-		if (IS_ERR(tcan4x5x->device_wake_gpio)) {
-			if (PTR_ERR(tcan4x5x->device_wake_gpio) == -EPROBE_DEFER)
-				return -EPROBE_DEFER;
-
-			tcan4x5x_disable_wake(cdev);
-		}
-	}
-
-	tcan4x5x->reset_gpio = devm_gpiod_get_optional(cdev->dev, "reset",
-						       GPIOD_OUT_LOW);
-	if (IS_ERR(tcan4x5x->reset_gpio))
-		tcan4x5x->reset_gpio = NULL;
-
-	if (!iw_tcan_prop)
-	{
-		ret = tcan4x5x_reset(tcan4x5x);
-		if (ret)
-			return ret;
-	}
-
-	tcan4x5x->device_state_gpio = devm_gpiod_get_optional(cdev->dev,
-							      "device-state",
-							      GPIOD_IN);
-	if (IS_ERR(tcan4x5x->device_state_gpio)) {
-		tcan4x5x->device_state_gpio = NULL;
-		tcan4x5x_disable_state(cdev);
-	}
-
-	return 0;
-}
-
-static struct m_can_ops tcan4x5x_ops = {
-	.init = tcan4x5x_init,
-	.read_reg = tcan4x5x_read_reg,
-	.write_reg = tcan4x5x_write_reg,
-	.write_fifo = tcan4x5x_write_fifo,
-	.read_fifo = tcan4x5x_read_fifo,
-	.clear_interrupts = tcan4x5x_clear_interrupts,
-};
-
-/*
- * Added for the reset of TCAN4X5X chip
- */
-static int tcan4x5x_wakeup_mode( void )
-{
-	usleep_range(10, 50);
-	gpio_request(TCAN4X5X_RESET_GPIO, "TCAN_ON");
-	gpio_direction_output(TCAN4X5X_RESET_GPIO, 0);
-	gpio_set_value(TCAN4X5X_RESET_GPIO, 0);
-	usleep_range(1, 50);
-
-	gpio_request(TCAN4X5X_RESET_GPIO, "TCAN_ON");
-	gpio_direction_output(TCAN4X5X_RESET_GPIO, 0);
-	gpio_set_value(TCAN4X5X_RESET_GPIO, 1);
-	usleep_range(1, 50);
-
-	gpio_request(TCAN4X5X_RESET_GPIO, "TCAN_ON");
-	gpio_direction_output(TCAN4X5X_RESET_GPIO, 0);
-	gpio_set_value(TCAN4X5X_RESET_GPIO, 0);
-	usleep_range(1, 50);
-
-	return 0;
-}
-
-static int tcan4x5x_can_probe(struct spi_device *spi)
-{
-	struct tcan4x5x_priv *priv;
-	struct m_can_classdev *mcan_class;
-	int freq, ret;
-
-	/* For finding the TCAN node */
-	struct device_node *tcan_node;
-	tcan_node = of_find_compatible_node(NULL, NULL, "ti,tcan4x5x");
-	if (!tcan_node) {
-		printk("%s : can't find TCAN node\n", __func__);
-		return -EINVAL;
-	}
-
-	/* For finding the iWave flag defined in Device Tree */
-	if (of_get_property(tcan_node, "iw-tcan-prop", NULL))
-	{
-		iw_tcan_prop = true;
-		m_can_set_iw_mcan_prop_flag();
-		tcan4x5x_wakeup_mode( );
-		msleep(100);
-	}
-
-	mcan_class = m_can_class_allocate_dev(&spi->dev,
-					      sizeof(struct tcan4x5x_priv));
-	if (!mcan_class)
-		return -ENOMEM;
-
-	priv = cdev_to_priv(mcan_class);
-
-	priv->power = devm_regulator_get_optional(&spi->dev, "vsup");
-	if (PTR_ERR(priv->power) == -EPROBE_DEFER) {
-		ret = -EPROBE_DEFER;
-		goto out_m_can_class_free_dev;
-	} else {
-		priv->power = NULL;
-	}
-
-	m_can_class_get_clocks(mcan_class);
-	if (IS_ERR(mcan_class->cclk)) {
-		dev_err(&spi->dev, "no CAN clock source defined\n");
-		freq = TCAN4X5X_EXT_CLK_DEF;
-	} else {
-		freq = clk_get_rate(mcan_class->cclk);
-	}
-
-	/* Sanity check */
-	if (freq < 20000000 || freq > TCAN4X5X_EXT_CLK_DEF) {
-		ret = -ERANGE;
-		goto out_m_can_class_free_dev;
-	}
-
-	priv->spi = spi;
-
-	mcan_class->pm_clock_support = 0;
-	mcan_class->can.clock.freq = freq;
-	mcan_class->dev = &spi->dev;
-	mcan_class->ops = &tcan4x5x_ops;
-	mcan_class->is_peripheral = true;
-	mcan_class->net->irq = spi->irq;
-
-	spi_set_drvdata(spi, priv);
-
-	/* Configure the SPI bus */
-	spi->bits_per_word = 8;
-	ret = spi_setup(spi);
-	if (ret)
-		goto out_m_can_class_free_dev;
-
-	ret = tcan4x5x_regmap_init(priv);
-	if (ret)
-		goto out_m_can_class_free_dev;
-
-	ret = tcan4x5x_power_enable(priv->power, 1);
-	if (ret)
-		goto out_m_can_class_free_dev;
-
-	ret = tcan4x5x_get_gpios(mcan_class);
-	if (ret)
-		goto out_power;
-
-	ret = tcan4x5x_init(mcan_class);
-	if (ret)
-		goto out_power;
-
-	ret = m_can_class_register(mcan_class);
-	if (ret)
-		goto out_power;
-
-	if (of_get_property(tcan_node, "wakeup-source", NULL))
-	{
-		device_init_wakeup(mcan_class->dev, true);
-	}
-
-	netdev_info(mcan_class->net, "TCAN4X5X successfully initialized.\n");
-	return 0;
-
-out_power:
-	tcan4x5x_power_enable(priv->power, 0);
- out_m_can_class_free_dev:
-	m_can_class_free_dev(mcan_class->net);
-	return ret;
-}
-
-static int tcan4x5x_sleep_mode( struct tcan4x5x_priv *priv )
-{
-	struct tcan4x5x_priv *tcan4x5x =
-		(struct tcan4x5x_priv *)priv;
-	int ret;
-	ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
-			TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_SLEEP );
-	return ret;
-}
-
-static int tcan4x5x_can_remove(struct spi_device *spi)
-{
-	struct tcan4x5x_priv *priv = spi_get_drvdata(spi);
-
-	if(iw_tcan_prop)
-	{
-		tcan4x5x_sleep_mode( priv );
-	}
-
-	m_can_class_unregister(&priv->cdev);
-
-	tcan4x5x_power_enable(priv->power, 0);
-
-	m_can_class_free_dev(priv->cdev.net);
-
-	return 0;
-}
-
-#ifdef CONFIG_MX6ULL_IWG26I
-static int tcan4x5x_suspend(struct device *device)
-{
-	int err = 0, ret = 0;
-	struct tcan4x5x_priv *priv = spi_get_drvdata(to_spi_device(device));
-	struct net_device *dev = priv->cdev.net;
-
-	iw_rxf0_reg_val = 0;
-	if (netif_running(dev)) 
-	{
-		if (device_may_wakeup(device))
-		{
-			/* 
-			 * For modifying the watermark level for CAN, the INIT and \
-			 * CCE bits should be high. Those are Write protected bits. \
-			 * */
-			err = regmap_update_bits(priv->regmap, CTRL_REG, CTRL_INIT_BIT, CTRL_INIT_BIT);
-			if (err)
-				return err;
-
-			err = regmap_update_bits(priv->regmap, CTRL_REG, CTRL_CCE_BIT, CTRL_CCE_BIT);
-			if (err)
-				return err;
-
-			/* 
-			 * Reading the current value of RX FIFO 0 register and \
-			 * stores it in iw_rxf0_reg_val to revert it back. \
-			 * */
-			regmap_read(priv->regmap, RX_FIFO0_CONFIGURATION_REG, &iw_rxf0_reg_val);
-
-			/* Modify the watermark level as 1 in RX FIFO 0 CONF Register. */
-			err = iw_rxf0_reg_val & 0x80FFFFFF;
-			err |= 1 << 24;
-			ret = regmap_write(priv->regmap, RX_FIFO0_CONFIGURATION_REG, err);
-			if (ret)
-				return ret;
-
-		       	/* Disable the periodic Watchdog interrupt in RX FIFO 0 CONF Register. */
-			err = regmap_update_bits(priv->regmap, TCAN4X5X_CONFIG, TCAN4X5X_WATCHDOG_EN, !TCAN4X5X_WATCHDOG_EN);
-			if (err)
-				return err;
-
-			/* Disabling the INIT and CCE bits after changing the Watermark level. */
-			err = regmap_update_bits(priv->regmap, CTRL_REG, CTRL_CCE_BIT, !CTRL_CCE_BIT);
-			if (err)
-				return err;
-
-			err = regmap_update_bits(priv->regmap, CTRL_REG, CTRL_INIT_BIT, !CTRL_INIT_BIT);
-			if (err)
-				return err;
-
-			/* Enable the IRQ wakeup */
-			err = enable_irq_wake(priv->cdev.net->irq);
-			if(err)
-				return err;
-
-			err = m_can_class_suspend(device);
-			  if(err)
-			  return err;
-		}
-	}
-
-	return err;
-}
-
-static int tcan4x5x_resume(struct device *device)
-{
-	int err = 0;
-	struct tcan4x5x_priv *priv = spi_get_drvdata(to_spi_device(device));
-	struct net_device *dev = priv->cdev.net;
-
-	if (netif_running(dev))
-	{
-		if (device_may_wakeup(device))
-		{
-			/* Disable the RX interrupts */
-			m_can_disable_rx_irq(&priv->cdev);
-
-			/* Disable the IRQ wakeup */
-			err = disable_irq_wake(priv->cdev.net->irq);
-			if(err)
-				return err;
-
-			if (priv->cdev.ops->clear_interrupts)
-			{
-				priv->cdev.ops->clear_interrupts(&priv->cdev);
-			}
-
-			err = m_can_rx_clear(dev);
-			if(err)
-				return err;
-
-			/* 
-			 * For modifying the watermark level for CAN, the INIT and \
-			 * CCE bits should be high. Those are Write protected bits. \
-			 * */
-			err = regmap_update_bits(priv->regmap, CTRL_REG, CTRL_INIT_BIT, CTRL_INIT_BIT);
-			if (err)
-				return err;
-
-			err = regmap_update_bits(priv->regmap, CTRL_REG, CTRL_CCE_BIT, CTRL_CCE_BIT);
-			if (err)
-				return err;
-
-			err = regmap_update_bits(priv->regmap, TCAN4X5X_CONFIG, WDT_RESET, WDT_RESET_BIT);
-			if (err)
-				return err; 
-
-			err = regmap_update_bits(priv->regmap, TCAN4X5X_CONFIG, TCAN4X5X_WATCHDOG_EN, TCAN4X5X_WATCHDOG_EN);
-			if (err)
-				return err; 
-
-			/* 
-			 * Reverting back the value of RX FIFO 0 register which was \
-			 * stored in iw_rxf0_reg_val. This will reverts the Watermark \
-			 * value to the previous value. \
-			 * */
-			err = regmap_write(priv->regmap, RX_FIFO0_CONFIGURATION_REG, iw_rxf0_reg_val);
-			if (err)
-				return err;
-
-			err = regmap_update_bits(priv->regmap, CTRL_REG, CTRL_CCE_BIT, !CTRL_CCE_BIT);
-			if (err)
-				return err;
-
-			err = regmap_update_bits(priv->regmap, CTRL_REG, CTRL_INIT_BIT, !CTRL_INIT_BIT);
-			if (err)
-				return err;
-
-			err = m_can_class_resume(device);
-			if(err)
-				return err;
-
-			/* Enable the RX interrupts */
-			m_can_enable_rx_irq(&priv->cdev);
-		}
-	}
-
-	return err;
-}
-
-static const struct dev_pm_ops tcan4x5x_pm_ops = {
-	SET_SYSTEM_SLEEP_PM_OPS(tcan4x5x_suspend, tcan4x5x_resume)
-};
-#endif /* CONFIG_MX6ULL_IWG26I */
-
-static const struct of_device_id tcan4x5x_of_match[] = {
-	{
-		.compatible = "ti,tcan4x5x",
-	}, {
-		/* sentinel */
-	},
-};
-MODULE_DEVICE_TABLE(of, tcan4x5x_of_match);
-
-static const struct spi_device_id tcan4x5x_id_table[] = {
-	{
-		.name = "tcan4x5x",
-	}, {
-		/* sentinel */
-	},
-};
-MODULE_DEVICE_TABLE(spi, tcan4x5x_id_table);
-
-static struct spi_driver tcan4x5x_can_driver = {
-	.driver = {
-		.name = KBUILD_MODNAME,
-		.of_match_table = tcan4x5x_of_match,
-#ifdef CONFIG_MX6ULL_IWG26I
-		.pm = &tcan4x5x_pm_ops,
-#else /* CONFIG_MX6ULL_IWG26I */
-		.pm = NULL,
-#endif /* CONFIG_MX6ULL_IWG26I */
-	},
-	.id_table = tcan4x5x_id_table,
-	.probe = tcan4x5x_can_probe,
-	.remove = tcan4x5x_can_remove,
-};
-module_spi_driver(tcan4x5x_can_driver);
-
-MODULE_AUTHOR("Dan Murphy <dmurphy@ti.com>");
-MODULE_DESCRIPTION("Texas Instruments TCAN4x5x CAN driver");
-MODULE_LICENSE("GPL v2");
diff -Naur A/drivers/net/can/m_can/tcan4x5x.h B/drivers/net/can/m_can/tcan4x5x.h
--- A/drivers/net/can/m_can/tcan4x5x.h	2023-06-26 14:34:49.967944560 +0530
+++ B/drivers/net/can/m_can/tcan4x5x.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,56 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0
- *
- * tcan4x5x - Texas Instruments TCAN4x5x Family CAN controller driver
- *
- * Copyright (c) 2020 Pengutronix,
- *                    Marc Kleine-Budde <kernel@pengutronix.de>
- */
-
-#ifndef _TCAN4X5X_H
-#define _TCAN4X5X_H
-
-#include <linux/gpio/consumer.h>
-#include <linux/regmap.h>
-#include <linux/regulator/consumer.h>
-#include <linux/spi/spi.h>
-
-#include "m_can.h"
-
-#define TCAN4X5X_SANITIZE_SPI 1
-
-struct __packed tcan4x5x_buf_cmd {
-	u8 cmd;
-	__be16 addr;
-	u8 len;
-};
-
-struct tcan4x5x_map_buf {
-	struct tcan4x5x_buf_cmd cmd;
-	u8 data[256 * sizeof(u32)];
-} ____cacheline_aligned;
-
-struct tcan4x5x_priv {
-	struct m_can_classdev cdev;
-
-	struct regmap *regmap;
-	struct spi_device *spi;
-
-	struct gpio_desc *reset_gpio;
-	struct gpio_desc *device_wake_gpio;
-	struct gpio_desc *device_state_gpio;
-	struct regulator *power;
-
-	struct tcan4x5x_map_buf map_buf_rx;
-	struct tcan4x5x_map_buf map_buf_tx;
-};
-
-static inline void
-tcan4x5x_spi_cmd_set_len(struct tcan4x5x_buf_cmd *cmd, u8 len)
-{
-	/* number of u32 */
-	cmd->len = len >> 2;
-}
-
-int tcan4x5x_regmap_init(struct tcan4x5x_priv *priv);
-
-#endif
diff -Naur A/drivers/net/can/m_can/.tcan4x5x.ko.cmd B/drivers/net/can/m_can/.tcan4x5x.ko.cmd
--- A/drivers/net/can/m_can/.tcan4x5x.ko.cmd	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/.tcan4x5x.ko.cmd	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1 @@
+cmd_drivers/net/can/m_can/tcan4x5x.ko := arm-poky-linux-gnueabi-ld -r  -EL  --build-id=sha1  -T scripts/module.lds -o drivers/net/can/m_can/tcan4x5x.ko drivers/net/can/m_can/tcan4x5x.o drivers/net/can/m_can/tcan4x5x.mod.o;  true
diff -Naur A/drivers/net/can/m_can/tcan4x5x.mod B/drivers/net/can/m_can/tcan4x5x.mod
--- A/drivers/net/can/m_can/tcan4x5x.mod	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/tcan4x5x.mod	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1,2 @@
+drivers/net/can/m_can/tcan4x5x.o
+
diff -Naur A/drivers/net/can/m_can/tcan4x5x.mod.c B/drivers/net/can/m_can/tcan4x5x.mod.c
--- A/drivers/net/can/m_can/tcan4x5x.mod.c	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/tcan4x5x.mod.c	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1,82 @@
+#include <linux/module.h>
+#define INCLUDE_VERMAGIC
+#include <linux/build-salt.h>
+#include <linux/elfnote-lto.h>
+#include <linux/vermagic.h>
+#include <linux/compiler.h>
+
+BUILD_SALT;
+BUILD_LTO_INFO;
+
+MODULE_INFO(vermagic, VERMAGIC_STRING);
+MODULE_INFO(name, KBUILD_MODNAME);
+
+__visible struct module __this_module
+__section(".gnu.linkonce.this_module") = {
+	.name = KBUILD_MODNAME,
+	.init = init_module,
+#ifdef CONFIG_MODULE_UNLOAD
+	.exit = cleanup_module,
+#endif
+	.arch = MODULE_ARCH_INIT,
+};
+
+MODULE_INFO(intree, "Y");
+
+#ifdef CONFIG_RETPOLINE
+MODULE_INFO(retpoline, "Y");
+#endif
+
+static const struct modversion_info ____versions[]
+__used __section("__versions") = {
+	{ 0x85e20eb0, "module_layout" },
+	{ 0x99e65814, "driver_unregister" },
+	{ 0xceac289, "__spi_register_driver" },
+	{ 0x92997ed8, "_printk" },
+	{ 0x9c3bc88d, "netdev_info" },
+	{ 0xce7506e3, "m_can_class_register" },
+	{ 0x2af32695, "devm_gpiod_get" },
+	{ 0xe8c2d931, "_dev_err" },
+	{ 0xb077e70a, "clk_unprepare" },
+	{ 0xb6e6d99d, "clk_disable" },
+	{ 0x52f8e72b, "regulator_enable" },
+	{ 0xcf6fdd12, "__devm_regmap_init" },
+	{ 0x836dd32f, "spi_setup" },
+	{ 0x6e4e7948, "devm_regulator_get_optional" },
+	{ 0x340e0598, "devm_gpiod_get_optional" },
+	{ 0x556e4390, "clk_get_rate" },
+	{ 0x3a228260, "m_can_class_get_clocks" },
+	{ 0xeedd601f, "devm_kmalloc" },
+	{ 0x2a6f8619, "m_can_class_allocate_dev" },
+	{ 0xf9a482f9, "msleep" },
+	{ 0xa1d357cb, "gpiod_set_raw_value" },
+	{ 0xda38e758, "gpiod_direction_output_raw" },
+	{ 0x84395622, "gpio_to_desc" },
+	{ 0x47229b5c, "gpio_request" },
+	{ 0x62483576, "m_can_set_iw_mcan_prop_flag" },
+	{ 0xcef7c01e, "of_get_property" },
+	{ 0x48f3fbb9, "of_find_compatible_node" },
+	{ 0x93cb7f30, "m_can_class_unregister" },
+	{ 0x3cbe5b6c, "regulator_disable" },
+	{ 0x2550193a, "m_can_init_ram" },
+	{ 0xc3055d20, "usleep_range_state" },
+	{ 0xbe3b27b0, "gpiod_set_value" },
+	{ 0xcc319f6f, "gpiod_get_value" },
+	{ 0xa8ba3e8b, "regmap_read" },
+	{ 0xa606c1ef, "regmap_update_bits_base" },
+	{ 0x81f24f34, "regmap_write" },
+	{ 0x386d3eb0, "spi_sync" },
+	{ 0x5f754e5a, "memset" },
+	{ 0x3ea1b6e4, "__stack_chk_fail" },
+	{ 0x340c624b, "spi_write_then_read" },
+	{ 0x8f678b07, "__stack_chk_guard" },
+	{ 0xefd6cf06, "__aeabi_unwind_cpp_pr0" },
+};
+
+MODULE_INFO(depends, "");
+
+MODULE_ALIAS("spi:tcan4x5x");
+MODULE_ALIAS("of:N*T*Cti,tcan4x5x");
+MODULE_ALIAS("of:N*T*Cti,tcan4x5xC*");
+
+MODULE_INFO(srcversion, "3F08B150F0C0EE780834BFE");
diff -Naur A/drivers/net/can/m_can/.tcan4x5x.mod.cmd B/drivers/net/can/m_can/.tcan4x5x.mod.cmd
--- A/drivers/net/can/m_can/.tcan4x5x.mod.cmd	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/.tcan4x5x.mod.cmd	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1 @@
+cmd_drivers/net/can/m_can/tcan4x5x.mod := { echo  drivers/net/can/m_can/tcan4x5x.o;  echo; } > drivers/net/can/m_can/tcan4x5x.mod
diff -Naur A/drivers/net/can/m_can/.tcan4x5x.mod.o.cmd B/drivers/net/can/m_can/.tcan4x5x.mod.o.cmd
--- A/drivers/net/can/m_can/.tcan4x5x.mod.o.cmd	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/.tcan4x5x.mod.o.cmd	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1,579 @@
+cmd_drivers/net/can/m_can/tcan4x5x.mod.o := arm-poky-linux-gnueabi-gcc -Wp,-MMD,drivers/net/can/m_can/.tcan4x5x.mod.o.d -nostdinc -isystem /opt/fsl-imx-x11/5.4-zeus/sysroots/x86_64-pokysdk-linux/usr/lib/arm-poky-linux-gnueabi/gcc/arm-poky-linux-gnueabi/9.2.0/include -I./arch/arm/include -I./arch/arm/include/generated -I./include -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h -include ./include/linux/compiler_types.h -D__KERNEL__ -mlittle-endian -fmacro-prefix-map=./= -Wall -Wundef -Werror=strict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -Werror=implicit-function-declaration -Werror=implicit-int -Werror=return-type -Wno-format-security -std=gnu89 -fno-dwarf2-cfi-asm -fno-ipa-sra -mabi=aapcs-linux -mfpu=vfp -funwind-tables -marm -Wa,-mno-warn-deprecated -D__LINUX_ARM_ARCH__=7 -march=armv7-a -msoft-float -Uarm -fno-delete-null-pointer-checks -Wno-frame-address -Wno-format-truncation -Wno-format-overflow -Wno-address-of-packed-member -O2 --param=allow-store-data-races=0 -Wframe-larger-than=1024 -fstack-protector-strong -Wimplicit-fallthrough=5 -Wno-main -Wno-unused-but-set-variable -Wno-unused-const-variable -fomit-frame-pointer -fno-stack-clash-protection -Wdeclaration-after-statement -Wvla -Wno-pointer-sign -Wno-stringop-truncation -Wno-array-bounds -Wno-stringop-overflow -Wno-restrict -Wno-maybe-uninitialized -fno-strict-overflow -fno-stack-check -fconserve-stack -Werror=date-time -Werror=incompatible-pointer-types -Werror=designated-init -Wno-packed-not-aligned --sysroot=/opt/fsl-imx-x11/5.4-zeus/sysroots/cortexa7t2hf-neon-poky-linux-gnueabi -DMODULE -DKBUILD_BASENAME='"tcan4x5x.mod"' -DKBUILD_MODNAME='"tcan4x5x"' -D__KBUILD_MODNAME=kmod_tcan4x5x -c -o drivers/net/can/m_can/tcan4x5x.mod.o drivers/net/can/m_can/tcan4x5x.mod.c
+
+source_drivers/net/can/m_can/tcan4x5x.mod.o := drivers/net/can/m_can/tcan4x5x.mod.c
+
+deps_drivers/net/can/m_can/tcan4x5x.mod.o := \
+    $(wildcard include/config/MODULE_UNLOAD) \
+    $(wildcard include/config/RETPOLINE) \
+  include/linux/compiler-version.h \
+    $(wildcard include/config/CC_VERSION_TEXT) \
+  include/linux/kconfig.h \
+    $(wildcard include/config/CPU_BIG_ENDIAN) \
+    $(wildcard include/config/BOOGER) \
+    $(wildcard include/config/FOO) \
+  include/linux/compiler_types.h \
+    $(wildcard include/config/HAVE_ARCH_COMPILER_H) \
+    $(wildcard include/config/CC_HAS_ASM_INLINE) \
+  include/linux/compiler_attributes.h \
+  include/linux/compiler-gcc.h \
+    $(wildcard include/config/ARCH_USE_BUILTIN_BSWAP) \
+    $(wildcard include/config/KCOV) \
+  include/linux/module.h \
+    $(wildcard include/config/MODULES) \
+    $(wildcard include/config/SYSFS) \
+    $(wildcard include/config/MODULES_TREE_LOOKUP) \
+    $(wildcard include/config/LIVEPATCH) \
+    $(wildcard include/config/STACKTRACE_BUILD_ID) \
+    $(wildcard include/config/CFI_CLANG) \
+    $(wildcard include/config/MODULE_SIG) \
+    $(wildcard include/config/GENERIC_BUG) \
+    $(wildcard include/config/KALLSYMS) \
+    $(wildcard include/config/SMP) \
+    $(wildcard include/config/TRACEPOINTS) \
+    $(wildcard include/config/TREE_SRCU) \
+    $(wildcard include/config/BPF_EVENTS) \
+    $(wildcard include/config/DEBUG_INFO_BTF_MODULES) \
+    $(wildcard include/config/JUMP_LABEL) \
+    $(wildcard include/config/TRACING) \
+    $(wildcard include/config/EVENT_TRACING) \
+    $(wildcard include/config/FTRACE_MCOUNT_RECORD) \
+    $(wildcard include/config/KPROBES) \
+    $(wildcard include/config/HAVE_STATIC_CALL_INLINE) \
+    $(wildcard include/config/PRINTK_INDEX) \
+    $(wildcard include/config/CONSTRUCTORS) \
+    $(wildcard include/config/FUNCTION_ERROR_INJECTION) \
+  include/linux/list.h \
+    $(wildcard include/config/DEBUG_LIST) \
+  include/linux/types.h \
+    $(wildcard include/config/HAVE_UID16) \
+    $(wildcard include/config/UID16) \
+    $(wildcard include/config/ARCH_DMA_ADDR_T_64BIT) \
+    $(wildcard include/config/PHYS_ADDR_T_64BIT) \
+    $(wildcard include/config/64BIT) \
+    $(wildcard include/config/ARCH_32BIT_USTAT_F_TINODE) \
+  include/uapi/linux/types.h \
+  arch/arm/include/uapi/asm/types.h \
+  include/asm-generic/int-ll64.h \
+  include/uapi/asm-generic/int-ll64.h \
+  arch/arm/include/generated/uapi/asm/bitsperlong.h \
+  include/asm-generic/bitsperlong.h \
+  include/uapi/asm-generic/bitsperlong.h \
+  include/uapi/linux/posix_types.h \
+  include/linux/stddef.h \
+  include/uapi/linux/stddef.h \
+  include/linux/compiler_types.h \
+  arch/arm/include/uapi/asm/posix_types.h \
+  include/uapi/asm-generic/posix_types.h \
+  include/linux/poison.h \
+    $(wildcard include/config/ILLEGAL_POINTER_VALUE) \
+  include/linux/const.h \
+  include/vdso/const.h \
+  include/uapi/linux/const.h \
+  include/linux/kernel.h \
+    $(wildcard include/config/PREEMPT_VOLUNTARY) \
+    $(wildcard include/config/PREEMPT_DYNAMIC) \
+    $(wildcard include/config/PREEMPT_) \
+    $(wildcard include/config/DEBUG_ATOMIC_SLEEP) \
+    $(wildcard include/config/MMU) \
+    $(wildcard include/config/PROVE_LOCKING) \
+  include/linux/stdarg.h \
+  include/linux/align.h \
+  include/linux/limits.h \
+  include/uapi/linux/limits.h \
+  include/vdso/limits.h \
+  include/linux/linkage.h \
+    $(wildcard include/config/ARCH_USE_SYM_ANNOTATIONS) \
+  include/linux/stringify.h \
+  include/linux/export.h \
+    $(wildcard include/config/MODVERSIONS) \
+    $(wildcard include/config/MODULE_REL_CRCS) \
+    $(wildcard include/config/HAVE_ARCH_PREL32_RELOCATIONS) \
+    $(wildcard include/config/TRIM_UNUSED_KSYMS) \
+  arch/arm/include/asm/linkage.h \
+  include/linux/compiler.h \
+    $(wildcard include/config/TRACE_BRANCH_PROFILING) \
+    $(wildcard include/config/PROFILE_ALL_BRANCHES) \
+    $(wildcard include/config/STACK_VALIDATION) \
+  arch/arm/include/generated/asm/rwonce.h \
+  include/asm-generic/rwonce.h \
+  include/linux/kasan-checks.h \
+    $(wildcard include/config/KASAN_GENERIC) \
+    $(wildcard include/config/KASAN_SW_TAGS) \
+  include/linux/kcsan-checks.h \
+    $(wildcard include/config/KCSAN) \
+    $(wildcard include/config/KCSAN_IGNORE_ATOMICS) \
+  include/linux/bitops.h \
+  include/linux/bits.h \
+  include/vdso/bits.h \
+  include/linux/build_bug.h \
+  include/linux/typecheck.h \
+  include/uapi/linux/kernel.h \
+  include/uapi/linux/sysinfo.h \
+  arch/arm/include/asm/bitops.h \
+  include/linux/irqflags.h \
+    $(wildcard include/config/TRACE_IRQFLAGS) \
+    $(wildcard include/config/IRQSOFF_TRACER) \
+    $(wildcard include/config/PREEMPT_TRACER) \
+    $(wildcard include/config/DEBUG_IRQFLAGS) \
+    $(wildcard include/config/TRACE_IRQFLAGS_SUPPORT) \
+  arch/arm/include/asm/irqflags.h \
+    $(wildcard include/config/CPU_V7M) \
+  arch/arm/include/asm/ptrace.h \
+    $(wildcard include/config/ARM_THUMB) \
+    $(wildcard include/config/THUMB2_KERNEL) \
+  arch/arm/include/uapi/asm/ptrace.h \
+    $(wildcard include/config/CPU_ENDIAN_BE8) \
+  arch/arm/include/asm/hwcap.h \
+  arch/arm/include/uapi/asm/hwcap.h \
+  include/asm-generic/irqflags.h \
+  arch/arm/include/asm/percpu.h \
+    $(wildcard include/config/CPU_V6) \
+  include/asm-generic/percpu.h \
+    $(wildcard include/config/DEBUG_PREEMPT) \
+    $(wildcard include/config/HAVE_SETUP_PER_CPU_AREA) \
+  include/linux/threads.h \
+    $(wildcard include/config/NR_CPUS) \
+    $(wildcard include/config/BASE_SMALL) \
+  include/linux/percpu-defs.h \
+    $(wildcard include/config/DEBUG_FORCE_WEAK_PER_CPU) \
+    $(wildcard include/config/AMD_MEM_ENCRYPT) \
+  arch/arm/include/asm/barrier.h \
+    $(wildcard include/config/CPU_32v6K) \
+    $(wildcard include/config/CPU_XSC3) \
+    $(wildcard include/config/CPU_FA526) \
+    $(wildcard include/config/ARM_HEAVY_MB) \
+    $(wildcard include/config/ARM_DMA_MEM_BUFFERABLE) \
+    $(wildcard include/config/CPU_SPECTRE) \
+  include/asm-generic/barrier.h \
+  include/asm-generic/bitops/non-atomic.h \
+  include/asm-generic/bitops/builtin-__fls.h \
+  include/asm-generic/bitops/builtin-__ffs.h \
+  include/asm-generic/bitops/builtin-fls.h \
+  include/asm-generic/bitops/builtin-ffs.h \
+  include/asm-generic/bitops/ffz.h \
+  include/asm-generic/bitops/fls64.h \
+  include/asm-generic/bitops/sched.h \
+  include/asm-generic/bitops/hweight.h \
+  include/asm-generic/bitops/arch_hweight.h \
+  include/asm-generic/bitops/const_hweight.h \
+  include/asm-generic/bitops/lock.h \
+  include/linux/atomic.h \
+  arch/arm/include/asm/atomic.h \
+    $(wildcard include/config/GENERIC_ATOMIC64) \
+    $(wildcard include/config/ARM_LPAE) \
+  include/linux/prefetch.h \
+  arch/arm/include/asm/processor.h \
+    $(wildcard include/config/HAVE_HW_BREAKPOINT) \
+    $(wildcard include/config/BINFMT_ELF_FDPIC) \
+  arch/arm/include/asm/hw_breakpoint.h \
+  arch/arm/include/asm/unified.h \
+  arch/arm/include/asm/vdso/processor.h \
+    $(wildcard include/config/ARM_ERRATA_754327) \
+  arch/arm/include/asm/cache.h \
+    $(wildcard include/config/ARM_L1_CACHE_SHIFT) \
+    $(wildcard include/config/AEABI) \
+  arch/arm/include/asm/cmpxchg.h \
+    $(wildcard include/config/CPU_SA1100) \
+    $(wildcard include/config/CPU_SA110) \
+  include/asm-generic/cmpxchg-local.h \
+  include/linux/atomic/atomic-arch-fallback.h \
+  include/linux/atomic/atomic-long.h \
+  include/linux/atomic/atomic-instrumented.h \
+  include/linux/instrumented.h \
+  include/asm-generic/bitops/instrumented-lock.h \
+  include/asm-generic/bitops/find.h \
+    $(wildcard include/config/GENERIC_FIND_FIRST_BIT) \
+  include/asm-generic/bitops/le.h \
+  arch/arm/include/uapi/asm/byteorder.h \
+  include/linux/byteorder/little_endian.h \
+  include/uapi/linux/byteorder/little_endian.h \
+  include/linux/swab.h \
+  include/uapi/linux/swab.h \
+  arch/arm/include/asm/swab.h \
+  arch/arm/include/uapi/asm/swab.h \
+  include/linux/byteorder/generic.h \
+  include/asm-generic/bitops/ext2-atomic-setbit.h \
+  include/linux/kstrtox.h \
+  include/linux/log2.h \
+    $(wildcard include/config/ARCH_HAS_ILOG2_U32) \
+    $(wildcard include/config/ARCH_HAS_ILOG2_U64) \
+  include/linux/math.h \
+  arch/arm/include/asm/div64.h \
+  arch/arm/include/asm/compiler.h \
+  include/asm-generic/div64.h \
+  include/linux/minmax.h \
+  include/linux/panic.h \
+    $(wildcard include/config/PANIC_TIMEOUT) \
+  include/linux/printk.h \
+    $(wildcard include/config/MESSAGE_LOGLEVEL_DEFAULT) \
+    $(wildcard include/config/CONSOLE_LOGLEVEL_DEFAULT) \
+    $(wildcard include/config/CONSOLE_LOGLEVEL_QUIET) \
+    $(wildcard include/config/EARLY_PRINTK) \
+    $(wildcard include/config/PRINTK) \
+    $(wildcard include/config/DYNAMIC_DEBUG) \
+    $(wildcard include/config/DYNAMIC_DEBUG_CORE) \
+  include/linux/init.h \
+    $(wildcard include/config/STRICT_KERNEL_RWX) \
+    $(wildcard include/config/STRICT_MODULE_RWX) \
+    $(wildcard include/config/LTO_CLANG) \
+  include/linux/kern_levels.h \
+  include/linux/cache.h \
+    $(wildcard include/config/ARCH_HAS_CACHE_LINE_SIZE) \
+  include/linux/ratelimit_types.h \
+  include/uapi/linux/param.h \
+  arch/arm/include/generated/uapi/asm/param.h \
+  include/asm-generic/param.h \
+    $(wildcard include/config/HZ) \
+  include/uapi/asm-generic/param.h \
+  include/linux/spinlock_types.h \
+    $(wildcard include/config/PREEMPT_RT) \
+    $(wildcard include/config/DEBUG_LOCK_ALLOC) \
+  include/linux/spinlock_types_raw.h \
+    $(wildcard include/config/DEBUG_SPINLOCK) \
+  include/linux/spinlock_types_up.h \
+  include/linux/lockdep_types.h \
+    $(wildcard include/config/PROVE_RAW_LOCK_NESTING) \
+    $(wildcard include/config/PREEMPT_LOCK) \
+    $(wildcard include/config/LOCKDEP) \
+    $(wildcard include/config/LOCK_STAT) \
+  include/linux/rwlock_types.h \
+  include/linux/once_lite.h \
+  include/linux/static_call_types.h \
+    $(wildcard include/config/HAVE_STATIC_CALL) \
+  include/linux/stat.h \
+  arch/arm/include/uapi/asm/stat.h \
+  include/uapi/linux/stat.h \
+  include/linux/time.h \
+    $(wildcard include/config/POSIX_TIMERS) \
+  include/linux/math64.h \
+    $(wildcard include/config/ARCH_SUPPORTS_INT128) \
+  include/vdso/math64.h \
+  include/linux/time64.h \
+  include/vdso/time64.h \
+  include/uapi/linux/time.h \
+  include/uapi/linux/time_types.h \
+  include/linux/time32.h \
+  include/linux/timex.h \
+  include/uapi/linux/timex.h \
+  arch/arm/include/asm/timex.h \
+  include/vdso/time32.h \
+  include/vdso/time.h \
+  include/linux/uidgid.h \
+    $(wildcard include/config/MULTIUSER) \
+    $(wildcard include/config/USER_NS) \
+  include/linux/highuid.h \
+  include/linux/buildid.h \
+    $(wildcard include/config/CRASH_CORE) \
+  include/linux/mm_types.h \
+    $(wildcard include/config/HAVE_ALIGNED_STRUCT_PAGE) \
+    $(wildcard include/config/MEMCG) \
+    $(wildcard include/config/USERFAULTFD) \
+    $(wildcard include/config/SWAP) \
+    $(wildcard include/config/NUMA) \
+    $(wildcard include/config/HAVE_ARCH_COMPAT_MMAP_BASES) \
+    $(wildcard include/config/MEMBARRIER) \
+    $(wildcard include/config/AIO) \
+    $(wildcard include/config/MMU_NOTIFIER) \
+    $(wildcard include/config/TRANSPARENT_HUGEPAGE) \
+    $(wildcard include/config/NUMA_BALANCING) \
+    $(wildcard include/config/ARCH_WANT_BATCHED_UNMAP_TLB_FLUSH) \
+    $(wildcard include/config/HUGETLB_PAGE) \
+    $(wildcard include/config/IOMMU_SUPPORT) \
+  include/linux/mm_types_task.h \
+    $(wildcard include/config/SPLIT_PTLOCK_CPUS) \
+    $(wildcard include/config/ARCH_ENABLE_SPLIT_PMD_PTLOCK) \
+  include/linux/cpumask.h \
+    $(wildcard include/config/CPUMASK_OFFSTACK) \
+    $(wildcard include/config/HOTPLUG_CPU) \
+    $(wildcard include/config/DEBUG_PER_CPU_MAPS) \
+  include/linux/bitmap.h \
+  include/linux/string.h \
+    $(wildcard include/config/BINARY_PRINTF) \
+    $(wildcard include/config/FORTIFY_SOURCE) \
+  include/linux/errno.h \
+  include/uapi/linux/errno.h \
+  arch/arm/include/generated/uapi/asm/errno.h \
+  include/uapi/asm-generic/errno.h \
+  include/uapi/asm-generic/errno-base.h \
+  include/uapi/linux/string.h \
+  arch/arm/include/asm/string.h \
+    $(wildcard include/config/KASAN) \
+  include/linux/bug.h \
+    $(wildcard include/config/BUG_ON_DATA_CORRUPTION) \
+  arch/arm/include/asm/bug.h \
+    $(wildcard include/config/DEBUG_BUGVERBOSE) \
+  arch/arm/include/asm/opcodes.h \
+    $(wildcard include/config/CPU_ENDIAN_BE32) \
+  include/asm-generic/bug.h \
+    $(wildcard include/config/BUG) \
+    $(wildcard include/config/GENERIC_BUG_RELATIVE_POINTERS) \
+  include/linux/instrumentation.h \
+    $(wildcard include/config/DEBUG_ENTRY) \
+  arch/arm/include/asm/page.h \
+    $(wildcard include/config/CPU_COPY_V4WT) \
+    $(wildcard include/config/CPU_COPY_V4WB) \
+    $(wildcard include/config/CPU_COPY_FEROCEON) \
+    $(wildcard include/config/CPU_COPY_FA) \
+    $(wildcard include/config/CPU_XSCALE) \
+    $(wildcard include/config/CPU_COPY_V6) \
+    $(wildcard include/config/KUSER_HELPERS) \
+    $(wildcard include/config/HAVE_ARCH_PFN_VALID) \
+  arch/arm/include/asm/glue.h \
+  arch/arm/include/asm/pgtable-2level-types.h \
+  arch/arm/include/asm/memory.h \
+    $(wildcard include/config/NEED_MACH_MEMORY_H) \
+    $(wildcard include/config/PAGE_OFFSET) \
+    $(wildcard include/config/HIGHMEM) \
+    $(wildcard include/config/DRAM_BASE) \
+    $(wildcard include/config/DRAM_SIZE) \
+    $(wildcard include/config/XIP_KERNEL) \
+    $(wildcard include/config/HAVE_TCM) \
+    $(wildcard include/config/ARM_PATCH_PHYS_VIRT) \
+    $(wildcard include/config/PHYS_OFFSET) \
+    $(wildcard include/config/DEBUG_VIRTUAL) \
+  include/linux/sizes.h \
+  arch/arm/include/asm/kasan_def.h \
+    $(wildcard include/config/KASAN_SHADOW_OFFSET) \
+  include/asm-generic/memory_model.h \
+    $(wildcard include/config/FLATMEM) \
+    $(wildcard include/config/SPARSEMEM_VMEMMAP) \
+    $(wildcard include/config/SPARSEMEM) \
+  include/linux/pfn.h \
+  include/asm-generic/getorder.h \
+  include/linux/auxvec.h \
+  include/uapi/linux/auxvec.h \
+  arch/arm/include/asm/auxvec.h \
+  arch/arm/include/uapi/asm/auxvec.h \
+  include/linux/spinlock.h \
+    $(wildcard include/config/PREEMPTION) \
+  include/linux/preempt.h \
+    $(wildcard include/config/PREEMPT_COUNT) \
+    $(wildcard include/config/TRACE_PREEMPT_TOGGLE) \
+    $(wildcard include/config/PREEMPT_NOTIFIERS) \
+  arch/arm/include/generated/asm/preempt.h \
+  include/asm-generic/preempt.h \
+  include/linux/thread_info.h \
+    $(wildcard include/config/THREAD_INFO_IN_TASK) \
+    $(wildcard include/config/GENERIC_ENTRY) \
+    $(wildcard include/config/HAVE_ARCH_WITHIN_STACK_FRAMES) \
+    $(wildcard include/config/HARDENED_USERCOPY) \
+  include/linux/restart_block.h \
+  arch/arm/include/asm/thread_info.h \
+    $(wildcard include/config/STACKPROTECTOR_PER_TASK) \
+    $(wildcard include/config/ARM_THUMBEE) \
+  arch/arm/include/asm/fpstate.h \
+    $(wildcard include/config/VFPv3) \
+    $(wildcard include/config/IWMMXT) \
+  include/linux/bottom_half.h \
+  include/linux/lockdep.h \
+    $(wildcard include/config/DEBUG_LOCKING_API_SELFTESTS) \
+  include/linux/smp.h \
+    $(wildcard include/config/UP_LATE_INIT) \
+  include/linux/smp_types.h \
+  include/linux/llist.h \
+    $(wildcard include/config/ARCH_HAVE_NMI_SAFE_CMPXCHG) \
+  arch/arm/include/generated/asm/mmiowb.h \
+  include/asm-generic/mmiowb.h \
+    $(wildcard include/config/MMIOWB) \
+  include/linux/spinlock_up.h \
+  include/linux/rwlock.h \
+    $(wildcard include/config/PREEMPT) \
+  include/linux/spinlock_api_up.h \
+  include/linux/rbtree.h \
+  include/linux/rbtree_types.h \
+  include/linux/rcupdate.h \
+    $(wildcard include/config/PREEMPT_RCU) \
+    $(wildcard include/config/TINY_RCU) \
+    $(wildcard include/config/TASKS_RCU_GENERIC) \
+    $(wildcard include/config/RCU_STALL_COMMON) \
+    $(wildcard include/config/NO_HZ_FULL) \
+    $(wildcard include/config/RCU_NOCB_CPU) \
+    $(wildcard include/config/TASKS_RCU) \
+    $(wildcard include/config/TASKS_TRACE_RCU) \
+    $(wildcard include/config/TASKS_RUDE_RCU) \
+    $(wildcard include/config/TREE_RCU) \
+    $(wildcard include/config/DEBUG_OBJECTS_RCU_HEAD) \
+    $(wildcard include/config/PROVE_RCU) \
+    $(wildcard include/config/ARCH_WEAK_RELEASE_ACQUIRE) \
+  include/linux/rcutree.h \
+  include/linux/rwsem.h \
+    $(wildcard include/config/RWSEM_SPIN_ON_OWNER) \
+    $(wildcard include/config/DEBUG_RWSEMS) \
+  include/linux/err.h \
+  include/linux/completion.h \
+  include/linux/swait.h \
+  include/linux/wait.h \
+  arch/arm/include/generated/asm/current.h \
+  include/asm-generic/current.h \
+  include/uapi/linux/wait.h \
+  include/linux/uprobes.h \
+    $(wildcard include/config/UPROBES) \
+  include/linux/page-flags-layout.h \
+    $(wildcard include/config/KASAN_HW_TAGS) \
+  include/linux/numa.h \
+    $(wildcard include/config/NODES_SHIFT) \
+    $(wildcard include/config/NUMA_KEEP_MEMINFO) \
+  include/generated/bounds.h \
+  include/linux/workqueue.h \
+    $(wildcard include/config/DEBUG_OBJECTS_WORK) \
+    $(wildcard include/config/FREEZER) \
+    $(wildcard include/config/WQ_WATCHDOG) \
+  include/linux/timer.h \
+    $(wildcard include/config/DEBUG_OBJECTS_TIMERS) \
+    $(wildcard include/config/NO_HZ_COMMON) \
+  include/linux/ktime.h \
+  include/linux/jiffies.h \
+  include/vdso/jiffies.h \
+  include/generated/timeconst.h \
+  include/vdso/ktime.h \
+  include/linux/timekeeping.h \
+    $(wildcard include/config/GENERIC_CMOS_UPDATE) \
+  include/linux/clocksource_ids.h \
+  include/linux/debugobjects.h \
+    $(wildcard include/config/DEBUG_OBJECTS) \
+    $(wildcard include/config/DEBUG_OBJECTS_FREE) \
+  include/linux/seqlock.h \
+  include/linux/mutex.h \
+    $(wildcard include/config/MUTEX_SPIN_ON_OWNER) \
+    $(wildcard include/config/DEBUG_MUTEXES) \
+  include/linux/osq_lock.h \
+  include/linux/debug_locks.h \
+  include/linux/ww_mutex.h \
+    $(wildcard include/config/DEBUG_RT_MUTEXES) \
+    $(wildcard include/config/DEBUG_WW_MUTEX_SLOWPATH) \
+  include/linux/rtmutex.h \
+  arch/arm/include/asm/mmu.h \
+    $(wildcard include/config/CPU_HAS_ASID) \
+    $(wildcard include/config/VDSO) \
+  include/linux/kmod.h \
+  include/linux/umh.h \
+  include/linux/gfp.h \
+    $(wildcard include/config/ZONE_DMA) \
+    $(wildcard include/config/ZONE_DMA32) \
+    $(wildcard include/config/ZONE_DEVICE) \
+    $(wildcard include/config/PM_SLEEP) \
+    $(wildcard include/config/CONTIG_ALLOC) \
+    $(wildcard include/config/CMA) \
+  include/linux/mmdebug.h \
+    $(wildcard include/config/DEBUG_VM) \
+    $(wildcard include/config/DEBUG_VM_PGFLAGS) \
+  include/linux/mmzone.h \
+    $(wildcard include/config/FORCE_MAX_ZONEORDER) \
+    $(wildcard include/config/MEMORY_ISOLATION) \
+    $(wildcard include/config/ZSMALLOC) \
+    $(wildcard include/config/SHADOW_CALL_STACK) \
+    $(wildcard include/config/MEMORY_HOTPLUG) \
+    $(wildcard include/config/COMPACTION) \
+    $(wildcard include/config/PAGE_EXTENSION) \
+    $(wildcard include/config/DEFERRED_STRUCT_PAGE_INIT) \
+    $(wildcard include/config/HAVE_MEMORYLESS_NODES) \
+    $(wildcard include/config/SPARSEMEM_EXTREME) \
+  include/linux/nodemask.h \
+  include/linux/pageblock-flags.h \
+    $(wildcard include/config/HUGETLB_PAGE_SIZE_VARIABLE) \
+  include/linux/page-flags.h \
+    $(wildcard include/config/ARCH_USES_PG_UNCACHED) \
+    $(wildcard include/config/MEMORY_FAILURE) \
+    $(wildcard include/config/PAGE_IDLE_FLAG) \
+    $(wildcard include/config/THP_SWAP) \
+    $(wildcard include/config/KSM) \
+  include/linux/local_lock.h \
+  include/linux/local_lock_internal.h \
+  include/linux/memory_hotplug.h \
+    $(wildcard include/config/ARCH_HAS_ADD_PAGES) \
+    $(wildcard include/config/HAVE_ARCH_NODEDATA_EXTENSION) \
+    $(wildcard include/config/MEMORY_HOTREMOVE) \
+  include/linux/notifier.h \
+  include/linux/srcu.h \
+    $(wildcard include/config/TINY_SRCU) \
+    $(wildcard include/config/SRCU) \
+  include/linux/rcu_segcblist.h \
+  include/linux/srcutree.h \
+  include/linux/rcu_node_tree.h \
+    $(wildcard include/config/RCU_FANOUT) \
+    $(wildcard include/config/RCU_FANOUT_LEAF) \
+  include/linux/topology.h \
+    $(wildcard include/config/USE_PERCPU_NUMA_NODE_ID) \
+    $(wildcard include/config/SCHED_SMT) \
+  include/linux/arch_topology.h \
+    $(wildcard include/config/GENERIC_ARCH_TOPOLOGY) \
+  include/linux/percpu.h \
+    $(wildcard include/config/NEED_PER_CPU_EMBED_FIRST_CHUNK) \
+    $(wildcard include/config/NEED_PER_CPU_PAGE_FIRST_CHUNK) \
+  arch/arm/include/asm/topology.h \
+    $(wildcard include/config/ARM_CPU_TOPOLOGY) \
+    $(wildcard include/config/BL_SWITCHER) \
+  include/asm-generic/topology.h \
+  include/linux/sysctl.h \
+    $(wildcard include/config/SYSCTL) \
+  include/uapi/linux/sysctl.h \
+  include/linux/elf.h \
+    $(wildcard include/config/ARCH_USE_GNU_PROPERTY) \
+    $(wildcard include/config/ARCH_HAVE_ELF_PROT) \
+  arch/arm/include/asm/elf.h \
+  arch/arm/include/asm/vdso_datapage.h \
+  include/vdso/datapage.h \
+    $(wildcard include/config/ARCH_HAS_VDSO_DATA) \
+  include/uapi/asm-generic/errno-base.h \
+  include/vdso/clocksource.h \
+    $(wildcard include/config/GENERIC_GETTIMEOFDAY) \
+  arch/arm/include/asm/vdso/clocksource.h \
+  include/vdso/processor.h \
+  arch/arm/include/asm/vdso/gettimeofday.h \
+    $(wildcard include/config/ARM_ARCH_TIMER) \
+  arch/arm/include/asm/unistd.h \
+    $(wildcard include/config/OABI_COMPAT) \
+  arch/arm/include/uapi/asm/unistd.h \
+  arch/arm/include/generated/uapi/asm/unistd-eabi.h \
+  arch/arm/include/generated/asm/unistd-nr.h \
+  arch/arm/include/asm/vdso/cp15.h \
+    $(wildcard include/config/CPU_CP15) \
+  arch/arm/include/asm/user.h \
+  include/uapi/linux/elf.h \
+  include/uapi/linux/elf-em.h \
+  include/linux/kobject.h \
+    $(wildcard include/config/UEVENT_HELPER) \
+    $(wildcard include/config/DEBUG_KOBJECT_RELEASE) \
+  include/linux/sysfs.h \
+  include/linux/kernfs.h \
+    $(wildcard include/config/KERNFS) \
+  include/linux/idr.h \
+  include/linux/radix-tree.h \
+  include/linux/xarray.h \
+    $(wildcard include/config/XARRAY_MULTI) \
+  include/linux/kconfig.h \
+  include/linux/kobject_ns.h \
+  include/linux/kref.h \
+  include/linux/refcount.h \
+  include/linux/moduleparam.h \
+    $(wildcard include/config/ALPHA) \
+    $(wildcard include/config/IA64) \
+    $(wildcard include/config/PPC64) \
+  include/linux/jump_label.h \
+    $(wildcard include/config/HAVE_ARCH_JUMP_LABEL_RELATIVE) \
+  include/linux/rbtree_latch.h \
+  include/linux/error-injection.h \
+  include/asm-generic/error-injection.h \
+  include/linux/tracepoint-defs.h \
+  include/linux/static_key.h \
+  include/linux/cfi.h \
+    $(wildcard include/config/CFI_CLANG_SHADOW) \
+  arch/arm/include/asm/module.h \
+    $(wildcard include/config/ARM_UNWIND) \
+    $(wildcard include/config/ARM_MODULE_PLTS) \
+  include/asm-generic/module.h \
+    $(wildcard include/config/HAVE_MOD_ARCH_SPECIFIC) \
+    $(wildcard include/config/MODULES_USE_ELF_REL) \
+    $(wildcard include/config/MODULES_USE_ELF_RELA) \
+  include/linux/build-salt.h \
+    $(wildcard include/config/BUILD_SALT) \
+  include/linux/elfnote.h \
+  include/linux/elfnote-lto.h \
+    $(wildcard include/config/LTO) \
+  include/linux/vermagic.h \
+  include/generated/utsrelease.h \
+  arch/arm/include/asm/vermagic.h \
+
+drivers/net/can/m_can/tcan4x5x.mod.o: $(deps_drivers/net/can/m_can/tcan4x5x.mod.o)
+
+$(deps_drivers/net/can/m_can/tcan4x5x.mod.o):
diff -Naur A/drivers/net/can/m_can/.tcan4x5x.o.cmd B/drivers/net/can/m_can/.tcan4x5x.o.cmd
--- A/drivers/net/can/m_can/.tcan4x5x.o.cmd	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/net/can/m_can/.tcan4x5x.o.cmd	2023-06-26 15:23:54.203840598 +0530
@@ -0,0 +1,1484 @@
+cmd_drivers/net/can/m_can/tcan4x5x.o := arm-poky-linux-gnueabi-gcc -Wp,-MMD,drivers/net/can/m_can/.tcan4x5x.o.d  -nostdinc -isystem /opt/fsl-imx-x11/5.4-zeus/sysroots/x86_64-pokysdk-linux/usr/lib/arm-poky-linux-gnueabi/gcc/arm-poky-linux-gnueabi/9.2.0/include -I./arch/arm/include -I./arch/arm/include/generated  -I./include -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h -include ./include/linux/compiler_types.h -D__KERNEL__ -mlittle-endian -fmacro-prefix-map=./= -Wall -Wundef -Werror=strict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -Werror=implicit-function-declaration -Werror=implicit-int -Werror=return-type -Wno-format-security -std=gnu89 -fno-dwarf2-cfi-asm -fno-ipa-sra -mabi=aapcs-linux -mfpu=vfp -funwind-tables -marm -Wa,-mno-warn-deprecated -D__LINUX_ARM_ARCH__=7 -march=armv7-a -msoft-float -Uarm -fno-delete-null-pointer-checks -Wno-frame-address -Wno-format-truncation -Wno-format-overflow -Wno-address-of-packed-member -O2 --param=allow-store-data-races=0 -Wframe-larger-than=1024 -fstack-protector-strong -Wimplicit-fallthrough=5 -Wno-main -Wno-unused-but-set-variable -Wno-unused-const-variable -fomit-frame-pointer -fno-stack-clash-protection -Wdeclaration-after-statement -Wvla -Wno-pointer-sign -Wno-stringop-truncation -Wno-array-bounds -Wno-stringop-overflow -Wno-restrict -Wno-maybe-uninitialized -fno-strict-overflow -fno-stack-check -fconserve-stack -Werror=date-time -Werror=incompatible-pointer-types -Werror=designated-init -Wno-packed-not-aligned --sysroot=/opt/fsl-imx-x11/5.4-zeus/sysroots/cortexa7t2hf-neon-poky-linux-gnueabi  -DMODULE  -DKBUILD_BASENAME='"tcan4x5x"' -DKBUILD_MODNAME='"tcan4x5x"' -D__KBUILD_MODNAME=kmod_tcan4x5x -c -o drivers/net/can/m_can/tcan4x5x.o drivers/net/can/m_can/tcan4x5x.c
+
+source_drivers/net/can/m_can/tcan4x5x.o := drivers/net/can/m_can/tcan4x5x.c
+
+deps_drivers/net/can/m_can/tcan4x5x.o := \
+    $(wildcard include/config/MX6ULL_IWG26I) \
+  include/linux/compiler-version.h \
+    $(wildcard include/config/CC_VERSION_TEXT) \
+  include/linux/kconfig.h \
+    $(wildcard include/config/CPU_BIG_ENDIAN) \
+    $(wildcard include/config/BOOGER) \
+    $(wildcard include/config/FOO) \
+  include/linux/compiler_types.h \
+    $(wildcard include/config/HAVE_ARCH_COMPILER_H) \
+    $(wildcard include/config/CC_HAS_ASM_INLINE) \
+  include/linux/compiler_attributes.h \
+  include/linux/compiler-gcc.h \
+    $(wildcard include/config/RETPOLINE) \
+    $(wildcard include/config/ARCH_USE_BUILTIN_BSWAP) \
+    $(wildcard include/config/KCOV) \
+  include/linux/regmap.h \
+    $(wildcard include/config/REGMAP) \
+    $(wildcard include/config/LOCKDEP) \
+  include/linux/list.h \
+    $(wildcard include/config/DEBUG_LIST) \
+  include/linux/types.h \
+    $(wildcard include/config/HAVE_UID16) \
+    $(wildcard include/config/UID16) \
+    $(wildcard include/config/ARCH_DMA_ADDR_T_64BIT) \
+    $(wildcard include/config/PHYS_ADDR_T_64BIT) \
+    $(wildcard include/config/64BIT) \
+    $(wildcard include/config/ARCH_32BIT_USTAT_F_TINODE) \
+  include/uapi/linux/types.h \
+  arch/arm/include/uapi/asm/types.h \
+  include/asm-generic/int-ll64.h \
+  include/uapi/asm-generic/int-ll64.h \
+  arch/arm/include/generated/uapi/asm/bitsperlong.h \
+  include/asm-generic/bitsperlong.h \
+  include/uapi/asm-generic/bitsperlong.h \
+  include/uapi/linux/posix_types.h \
+  include/linux/stddef.h \
+  include/uapi/linux/stddef.h \
+  include/linux/compiler_types.h \
+  arch/arm/include/uapi/asm/posix_types.h \
+  include/uapi/asm-generic/posix_types.h \
+  include/linux/poison.h \
+    $(wildcard include/config/ILLEGAL_POINTER_VALUE) \
+  include/linux/const.h \
+  include/vdso/const.h \
+  include/uapi/linux/const.h \
+  include/linux/kernel.h \
+    $(wildcard include/config/PREEMPT_VOLUNTARY) \
+    $(wildcard include/config/PREEMPT_DYNAMIC) \
+    $(wildcard include/config/PREEMPT_) \
+    $(wildcard include/config/DEBUG_ATOMIC_SLEEP) \
+    $(wildcard include/config/SMP) \
+    $(wildcard include/config/MMU) \
+    $(wildcard include/config/PROVE_LOCKING) \
+    $(wildcard include/config/TRACING) \
+    $(wildcard include/config/FTRACE_MCOUNT_RECORD) \
+  include/linux/stdarg.h \
+  include/linux/align.h \
+  include/linux/limits.h \
+  include/uapi/linux/limits.h \
+  include/vdso/limits.h \
+  include/linux/linkage.h \
+    $(wildcard include/config/ARCH_USE_SYM_ANNOTATIONS) \
+  include/linux/stringify.h \
+  include/linux/export.h \
+    $(wildcard include/config/MODVERSIONS) \
+    $(wildcard include/config/MODULE_REL_CRCS) \
+    $(wildcard include/config/HAVE_ARCH_PREL32_RELOCATIONS) \
+    $(wildcard include/config/MODULES) \
+    $(wildcard include/config/TRIM_UNUSED_KSYMS) \
+  arch/arm/include/asm/linkage.h \
+  include/linux/compiler.h \
+    $(wildcard include/config/TRACE_BRANCH_PROFILING) \
+    $(wildcard include/config/PROFILE_ALL_BRANCHES) \
+    $(wildcard include/config/STACK_VALIDATION) \
+    $(wildcard include/config/CFI_CLANG) \
+  arch/arm/include/generated/asm/rwonce.h \
+  include/asm-generic/rwonce.h \
+  include/linux/kasan-checks.h \
+    $(wildcard include/config/KASAN_GENERIC) \
+    $(wildcard include/config/KASAN_SW_TAGS) \
+  include/linux/kcsan-checks.h \
+    $(wildcard include/config/KCSAN) \
+    $(wildcard include/config/KCSAN_IGNORE_ATOMICS) \
+  include/linux/bitops.h \
+  include/linux/bits.h \
+  include/vdso/bits.h \
+  include/linux/build_bug.h \
+  include/linux/typecheck.h \
+  include/uapi/linux/kernel.h \
+  include/uapi/linux/sysinfo.h \
+  arch/arm/include/asm/bitops.h \
+  include/linux/irqflags.h \
+    $(wildcard include/config/TRACE_IRQFLAGS) \
+    $(wildcard include/config/IRQSOFF_TRACER) \
+    $(wildcard include/config/PREEMPT_TRACER) \
+    $(wildcard include/config/DEBUG_IRQFLAGS) \
+    $(wildcard include/config/TRACE_IRQFLAGS_SUPPORT) \
+  arch/arm/include/asm/irqflags.h \
+    $(wildcard include/config/CPU_V7M) \
+  arch/arm/include/asm/ptrace.h \
+    $(wildcard include/config/ARM_THUMB) \
+    $(wildcard include/config/THUMB2_KERNEL) \
+  arch/arm/include/uapi/asm/ptrace.h \
+    $(wildcard include/config/CPU_ENDIAN_BE8) \
+  arch/arm/include/asm/hwcap.h \
+  arch/arm/include/uapi/asm/hwcap.h \
+  include/asm-generic/irqflags.h \
+  arch/arm/include/asm/percpu.h \
+    $(wildcard include/config/CPU_V6) \
+  include/asm-generic/percpu.h \
+    $(wildcard include/config/DEBUG_PREEMPT) \
+    $(wildcard include/config/HAVE_SETUP_PER_CPU_AREA) \
+  include/linux/threads.h \
+    $(wildcard include/config/NR_CPUS) \
+    $(wildcard include/config/BASE_SMALL) \
+  include/linux/percpu-defs.h \
+    $(wildcard include/config/DEBUG_FORCE_WEAK_PER_CPU) \
+    $(wildcard include/config/AMD_MEM_ENCRYPT) \
+  arch/arm/include/asm/barrier.h \
+    $(wildcard include/config/CPU_32v6K) \
+    $(wildcard include/config/CPU_XSC3) \
+    $(wildcard include/config/CPU_FA526) \
+    $(wildcard include/config/ARM_HEAVY_MB) \
+    $(wildcard include/config/ARM_DMA_MEM_BUFFERABLE) \
+    $(wildcard include/config/CPU_SPECTRE) \
+  include/asm-generic/barrier.h \
+  include/asm-generic/bitops/non-atomic.h \
+  include/asm-generic/bitops/builtin-__fls.h \
+  include/asm-generic/bitops/builtin-__ffs.h \
+  include/asm-generic/bitops/builtin-fls.h \
+  include/asm-generic/bitops/builtin-ffs.h \
+  include/asm-generic/bitops/ffz.h \
+  include/asm-generic/bitops/fls64.h \
+  include/asm-generic/bitops/sched.h \
+  include/asm-generic/bitops/hweight.h \
+  include/asm-generic/bitops/arch_hweight.h \
+  include/asm-generic/bitops/const_hweight.h \
+  include/asm-generic/bitops/lock.h \
+  include/linux/atomic.h \
+  arch/arm/include/asm/atomic.h \
+    $(wildcard include/config/GENERIC_ATOMIC64) \
+    $(wildcard include/config/ARM_LPAE) \
+  include/linux/prefetch.h \
+  arch/arm/include/asm/processor.h \
+    $(wildcard include/config/HAVE_HW_BREAKPOINT) \
+    $(wildcard include/config/BINFMT_ELF_FDPIC) \
+  arch/arm/include/asm/hw_breakpoint.h \
+  arch/arm/include/asm/unified.h \
+  arch/arm/include/asm/vdso/processor.h \
+    $(wildcard include/config/ARM_ERRATA_754327) \
+  arch/arm/include/asm/cache.h \
+    $(wildcard include/config/ARM_L1_CACHE_SHIFT) \
+    $(wildcard include/config/AEABI) \
+  arch/arm/include/asm/cmpxchg.h \
+    $(wildcard include/config/CPU_SA1100) \
+    $(wildcard include/config/CPU_SA110) \
+  include/asm-generic/cmpxchg-local.h \
+  include/linux/atomic/atomic-arch-fallback.h \
+  include/linux/atomic/atomic-long.h \
+  include/linux/atomic/atomic-instrumented.h \
+  include/linux/instrumented.h \
+  include/asm-generic/bitops/instrumented-lock.h \
+  include/asm-generic/bitops/find.h \
+    $(wildcard include/config/GENERIC_FIND_FIRST_BIT) \
+  include/asm-generic/bitops/le.h \
+  arch/arm/include/uapi/asm/byteorder.h \
+  include/linux/byteorder/little_endian.h \
+  include/uapi/linux/byteorder/little_endian.h \
+  include/linux/swab.h \
+  include/uapi/linux/swab.h \
+  arch/arm/include/asm/swab.h \
+  arch/arm/include/uapi/asm/swab.h \
+  include/linux/byteorder/generic.h \
+  include/asm-generic/bitops/ext2-atomic-setbit.h \
+  include/linux/kstrtox.h \
+  include/linux/log2.h \
+    $(wildcard include/config/ARCH_HAS_ILOG2_U32) \
+    $(wildcard include/config/ARCH_HAS_ILOG2_U64) \
+  include/linux/math.h \
+  arch/arm/include/asm/div64.h \
+  arch/arm/include/asm/compiler.h \
+  include/asm-generic/div64.h \
+  include/linux/minmax.h \
+  include/linux/panic.h \
+    $(wildcard include/config/PANIC_TIMEOUT) \
+  include/linux/printk.h \
+    $(wildcard include/config/MESSAGE_LOGLEVEL_DEFAULT) \
+    $(wildcard include/config/CONSOLE_LOGLEVEL_DEFAULT) \
+    $(wildcard include/config/CONSOLE_LOGLEVEL_QUIET) \
+    $(wildcard include/config/EARLY_PRINTK) \
+    $(wildcard include/config/PRINTK) \
+    $(wildcard include/config/PRINTK_INDEX) \
+    $(wildcard include/config/DYNAMIC_DEBUG) \
+    $(wildcard include/config/DYNAMIC_DEBUG_CORE) \
+  include/linux/init.h \
+    $(wildcard include/config/STRICT_KERNEL_RWX) \
+    $(wildcard include/config/STRICT_MODULE_RWX) \
+    $(wildcard include/config/LTO_CLANG) \
+  include/linux/kern_levels.h \
+  include/linux/cache.h \
+    $(wildcard include/config/ARCH_HAS_CACHE_LINE_SIZE) \
+  include/linux/ratelimit_types.h \
+  include/uapi/linux/param.h \
+  arch/arm/include/generated/uapi/asm/param.h \
+  include/asm-generic/param.h \
+    $(wildcard include/config/HZ) \
+  include/uapi/asm-generic/param.h \
+  include/linux/spinlock_types.h \
+    $(wildcard include/config/PREEMPT_RT) \
+    $(wildcard include/config/DEBUG_LOCK_ALLOC) \
+  include/linux/spinlock_types_raw.h \
+    $(wildcard include/config/DEBUG_SPINLOCK) \
+  include/linux/spinlock_types_up.h \
+  include/linux/lockdep_types.h \
+    $(wildcard include/config/PROVE_RAW_LOCK_NESTING) \
+    $(wildcard include/config/PREEMPT_LOCK) \
+    $(wildcard include/config/LOCK_STAT) \
+  include/linux/rwlock_types.h \
+  include/linux/once_lite.h \
+  include/linux/static_call_types.h \
+    $(wildcard include/config/HAVE_STATIC_CALL) \
+    $(wildcard include/config/HAVE_STATIC_CALL_INLINE) \
+  include/linux/rbtree.h \
+  include/linux/rbtree_types.h \
+  include/linux/rcupdate.h \
+    $(wildcard include/config/PREEMPT_RCU) \
+    $(wildcard include/config/TINY_RCU) \
+    $(wildcard include/config/TASKS_RCU_GENERIC) \
+    $(wildcard include/config/RCU_STALL_COMMON) \
+    $(wildcard include/config/NO_HZ_FULL) \
+    $(wildcard include/config/RCU_NOCB_CPU) \
+    $(wildcard include/config/TASKS_RCU) \
+    $(wildcard include/config/TASKS_TRACE_RCU) \
+    $(wildcard include/config/TASKS_RUDE_RCU) \
+    $(wildcard include/config/TREE_RCU) \
+    $(wildcard include/config/DEBUG_OBJECTS_RCU_HEAD) \
+    $(wildcard include/config/HOTPLUG_CPU) \
+    $(wildcard include/config/PROVE_RCU) \
+    $(wildcard include/config/PREEMPTION) \
+    $(wildcard include/config/ARCH_WEAK_RELEASE_ACQUIRE) \
+  include/linux/preempt.h \
+    $(wildcard include/config/PREEMPT_COUNT) \
+    $(wildcard include/config/TRACE_PREEMPT_TOGGLE) \
+    $(wildcard include/config/PREEMPT_NOTIFIERS) \
+  arch/arm/include/generated/asm/preempt.h \
+  include/asm-generic/preempt.h \
+  include/linux/thread_info.h \
+    $(wildcard include/config/THREAD_INFO_IN_TASK) \
+    $(wildcard include/config/GENERIC_ENTRY) \
+    $(wildcard include/config/HAVE_ARCH_WITHIN_STACK_FRAMES) \
+    $(wildcard include/config/HARDENED_USERCOPY) \
+  include/linux/bug.h \
+    $(wildcard include/config/GENERIC_BUG) \
+    $(wildcard include/config/BUG_ON_DATA_CORRUPTION) \
+  arch/arm/include/asm/bug.h \
+    $(wildcard include/config/DEBUG_BUGVERBOSE) \
+  arch/arm/include/asm/opcodes.h \
+    $(wildcard include/config/CPU_ENDIAN_BE32) \
+  include/asm-generic/bug.h \
+    $(wildcard include/config/BUG) \
+    $(wildcard include/config/GENERIC_BUG_RELATIVE_POINTERS) \
+  include/linux/instrumentation.h \
+    $(wildcard include/config/DEBUG_ENTRY) \
+  include/linux/restart_block.h \
+  include/linux/time64.h \
+  include/linux/math64.h \
+    $(wildcard include/config/ARCH_SUPPORTS_INT128) \
+  include/vdso/math64.h \
+  include/vdso/time64.h \
+  include/uapi/linux/time.h \
+  include/uapi/linux/time_types.h \
+  include/linux/errno.h \
+  include/uapi/linux/errno.h \
+  arch/arm/include/generated/uapi/asm/errno.h \
+  include/uapi/asm-generic/errno.h \
+  include/uapi/asm-generic/errno-base.h \
+  arch/arm/include/asm/thread_info.h \
+    $(wildcard include/config/KASAN) \
+    $(wildcard include/config/STACKPROTECTOR_PER_TASK) \
+    $(wildcard include/config/ARM_THUMBEE) \
+  arch/arm/include/asm/fpstate.h \
+    $(wildcard include/config/VFPv3) \
+    $(wildcard include/config/IWMMXT) \
+  arch/arm/include/asm/page.h \
+    $(wildcard include/config/CPU_COPY_V4WT) \
+    $(wildcard include/config/CPU_COPY_V4WB) \
+    $(wildcard include/config/CPU_COPY_FEROCEON) \
+    $(wildcard include/config/CPU_COPY_FA) \
+    $(wildcard include/config/CPU_XSCALE) \
+    $(wildcard include/config/CPU_COPY_V6) \
+    $(wildcard include/config/KUSER_HELPERS) \
+    $(wildcard include/config/HAVE_ARCH_PFN_VALID) \
+  arch/arm/include/asm/glue.h \
+  arch/arm/include/asm/pgtable-2level-types.h \
+  arch/arm/include/asm/memory.h \
+    $(wildcard include/config/NEED_MACH_MEMORY_H) \
+    $(wildcard include/config/PAGE_OFFSET) \
+    $(wildcard include/config/HIGHMEM) \
+    $(wildcard include/config/DRAM_BASE) \
+    $(wildcard include/config/DRAM_SIZE) \
+    $(wildcard include/config/XIP_KERNEL) \
+    $(wildcard include/config/HAVE_TCM) \
+    $(wildcard include/config/ARM_PATCH_PHYS_VIRT) \
+    $(wildcard include/config/PHYS_OFFSET) \
+    $(wildcard include/config/DEBUG_VIRTUAL) \
+  include/linux/sizes.h \
+  arch/arm/include/asm/kasan_def.h \
+    $(wildcard include/config/KASAN_SHADOW_OFFSET) \
+  include/asm-generic/memory_model.h \
+    $(wildcard include/config/FLATMEM) \
+    $(wildcard include/config/SPARSEMEM_VMEMMAP) \
+    $(wildcard include/config/SPARSEMEM) \
+  include/linux/pfn.h \
+  include/asm-generic/getorder.h \
+  include/linux/bottom_half.h \
+  include/linux/lockdep.h \
+    $(wildcard include/config/DEBUG_LOCKING_API_SELFTESTS) \
+  include/linux/smp.h \
+    $(wildcard include/config/UP_LATE_INIT) \
+  include/linux/cpumask.h \
+    $(wildcard include/config/CPUMASK_OFFSTACK) \
+    $(wildcard include/config/DEBUG_PER_CPU_MAPS) \
+  include/linux/bitmap.h \
+  include/linux/string.h \
+    $(wildcard include/config/BINARY_PRINTF) \
+    $(wildcard include/config/FORTIFY_SOURCE) \
+  include/uapi/linux/string.h \
+  arch/arm/include/asm/string.h \
+  include/linux/smp_types.h \
+  include/linux/llist.h \
+    $(wildcard include/config/ARCH_HAVE_NMI_SAFE_CMPXCHG) \
+  include/linux/rcutree.h \
+  include/linux/ktime.h \
+  include/linux/time.h \
+    $(wildcard include/config/POSIX_TIMERS) \
+  include/linux/time32.h \
+  include/linux/timex.h \
+  include/uapi/linux/timex.h \
+  arch/arm/include/asm/timex.h \
+  include/vdso/time32.h \
+  include/vdso/time.h \
+  include/linux/jiffies.h \
+  include/vdso/jiffies.h \
+  include/generated/timeconst.h \
+  include/vdso/ktime.h \
+  include/linux/timekeeping.h \
+    $(wildcard include/config/GENERIC_CMOS_UPDATE) \
+  include/linux/clocksource_ids.h \
+  include/linux/delay.h \
+  include/linux/sched.h \
+    $(wildcard include/config/VIRT_CPU_ACCOUNTING_NATIVE) \
+    $(wildcard include/config/SCHED_INFO) \
+    $(wildcard include/config/SCHEDSTATS) \
+    $(wildcard include/config/FAIR_GROUP_SCHED) \
+    $(wildcard include/config/RT_GROUP_SCHED) \
+    $(wildcard include/config/RT_MUTEXES) \
+    $(wildcard include/config/UCLAMP_TASK) \
+    $(wildcard include/config/UCLAMP_BUCKETS_COUNT) \
+    $(wildcard include/config/KMAP_LOCAL) \
+    $(wildcard include/config/SCHED_CORE) \
+    $(wildcard include/config/CGROUP_SCHED) \
+    $(wildcard include/config/BLK_DEV_IO_TRACE) \
+    $(wildcard include/config/PSI) \
+    $(wildcard include/config/MEMCG) \
+    $(wildcard include/config/COMPAT_BRK) \
+    $(wildcard include/config/CGROUPS) \
+    $(wildcard include/config/BLK_CGROUP) \
+    $(wildcard include/config/PAGE_OWNER) \
+    $(wildcard include/config/EVENTFD) \
+    $(wildcard include/config/STACKPROTECTOR) \
+    $(wildcard include/config/ARCH_HAS_SCALED_CPUTIME) \
+    $(wildcard include/config/VIRT_CPU_ACCOUNTING_GEN) \
+    $(wildcard include/config/POSIX_CPUTIMERS) \
+    $(wildcard include/config/POSIX_CPU_TIMERS_TASK_WORK) \
+    $(wildcard include/config/KEYS) \
+    $(wildcard include/config/SYSVIPC) \
+    $(wildcard include/config/DETECT_HUNG_TASK) \
+    $(wildcard include/config/IO_URING) \
+    $(wildcard include/config/AUDIT) \
+    $(wildcard include/config/AUDITSYSCALL) \
+    $(wildcard include/config/DEBUG_MUTEXES) \
+    $(wildcard include/config/UBSAN) \
+    $(wildcard include/config/UBSAN_TRAP) \
+    $(wildcard include/config/BLOCK) \
+    $(wildcard include/config/COMPACTION) \
+    $(wildcard include/config/TASK_XACCT) \
+    $(wildcard include/config/CPUSETS) \
+    $(wildcard include/config/X86_CPU_RESCTRL) \
+    $(wildcard include/config/FUTEX) \
+    $(wildcard include/config/COMPAT) \
+    $(wildcard include/config/PERF_EVENTS) \
+    $(wildcard include/config/NUMA) \
+    $(wildcard include/config/NUMA_BALANCING) \
+    $(wildcard include/config/RSEQ) \
+    $(wildcard include/config/TASK_DELAY_ACCT) \
+    $(wildcard include/config/FAULT_INJECTION) \
+    $(wildcard include/config/LATENCYTOP) \
+    $(wildcard include/config/KUNIT) \
+    $(wildcard include/config/FUNCTION_GRAPH_TRACER) \
+    $(wildcard include/config/UPROBES) \
+    $(wildcard include/config/BCACHE) \
+    $(wildcard include/config/VMAP_STACK) \
+    $(wildcard include/config/LIVEPATCH) \
+    $(wildcard include/config/SECURITY) \
+    $(wildcard include/config/BPF_SYSCALL) \
+    $(wildcard include/config/GCC_PLUGIN_STACKLEAK) \
+    $(wildcard include/config/X86_MCE) \
+    $(wildcard include/config/KRETPROBES) \
+    $(wildcard include/config/ARCH_HAS_PARANOID_L1D_FLUSH) \
+    $(wildcard include/config/ARCH_TASK_STRUCT_ON_STACK) \
+    $(wildcard include/config/DEBUG_RSEQ) \
+  include/uapi/linux/sched.h \
+  arch/arm/include/generated/asm/current.h \
+  include/asm-generic/current.h \
+  include/linux/pid.h \
+  include/linux/rculist.h \
+    $(wildcard include/config/PROVE_RCU_LIST) \
+  include/linux/wait.h \
+  include/linux/spinlock.h \
+  arch/arm/include/generated/asm/mmiowb.h \
+  include/asm-generic/mmiowb.h \
+    $(wildcard include/config/MMIOWB) \
+  include/linux/spinlock_up.h \
+  include/linux/rwlock.h \
+    $(wildcard include/config/PREEMPT) \
+  include/linux/spinlock_api_up.h \
+  include/uapi/linux/wait.h \
+  include/linux/refcount.h \
+  include/linux/sem.h \
+  include/uapi/linux/sem.h \
+  include/linux/ipc.h \
+  include/linux/uidgid.h \
+    $(wildcard include/config/MULTIUSER) \
+    $(wildcard include/config/USER_NS) \
+  include/linux/highuid.h \
+  include/linux/rhashtable-types.h \
+  include/linux/mutex.h \
+    $(wildcard include/config/MUTEX_SPIN_ON_OWNER) \
+  include/linux/osq_lock.h \
+  include/linux/debug_locks.h \
+  include/linux/workqueue.h \
+    $(wildcard include/config/DEBUG_OBJECTS_WORK) \
+    $(wildcard include/config/FREEZER) \
+    $(wildcard include/config/SYSFS) \
+    $(wildcard include/config/WQ_WATCHDOG) \
+  include/linux/timer.h \
+    $(wildcard include/config/DEBUG_OBJECTS_TIMERS) \
+    $(wildcard include/config/NO_HZ_COMMON) \
+  include/linux/debugobjects.h \
+    $(wildcard include/config/DEBUG_OBJECTS) \
+    $(wildcard include/config/DEBUG_OBJECTS_FREE) \
+  include/uapi/linux/ipc.h \
+  arch/arm/include/generated/uapi/asm/ipcbuf.h \
+  include/uapi/asm-generic/ipcbuf.h \
+  arch/arm/include/generated/uapi/asm/sembuf.h \
+  include/uapi/asm-generic/sembuf.h \
+  include/linux/shm.h \
+  include/uapi/linux/shm.h \
+  include/uapi/asm-generic/hugetlb_encode.h \
+  arch/arm/include/generated/uapi/asm/shmbuf.h \
+  include/uapi/asm-generic/shmbuf.h \
+  arch/arm/include/asm/shmparam.h \
+  include/linux/plist.h \
+    $(wildcard include/config/DEBUG_PLIST) \
+  include/linux/hrtimer.h \
+    $(wildcard include/config/HIGH_RES_TIMERS) \
+    $(wildcard include/config/TIME_LOW_RES) \
+    $(wildcard include/config/TIMERFD) \
+  include/linux/hrtimer_defs.h \
+  include/linux/percpu.h \
+    $(wildcard include/config/NEED_PER_CPU_EMBED_FIRST_CHUNK) \
+    $(wildcard include/config/NEED_PER_CPU_PAGE_FIRST_CHUNK) \
+  include/linux/mmdebug.h \
+    $(wildcard include/config/DEBUG_VM) \
+    $(wildcard include/config/DEBUG_VM_PGFLAGS) \
+  include/linux/seqlock.h \
+  include/linux/ww_mutex.h \
+    $(wildcard include/config/DEBUG_RT_MUTEXES) \
+    $(wildcard include/config/DEBUG_WW_MUTEX_SLOWPATH) \
+  include/linux/rtmutex.h \
+  include/linux/timerqueue.h \
+  include/linux/seccomp.h \
+    $(wildcard include/config/SECCOMP) \
+    $(wildcard include/config/HAVE_ARCH_SECCOMP_FILTER) \
+    $(wildcard include/config/SECCOMP_FILTER) \
+    $(wildcard include/config/CHECKPOINT_RESTORE) \
+    $(wildcard include/config/SECCOMP_CACHE_DEBUG) \
+  include/uapi/linux/seccomp.h \
+  arch/arm/include/asm/seccomp.h \
+  include/asm-generic/seccomp.h \
+  include/uapi/linux/unistd.h \
+  arch/arm/include/asm/unistd.h \
+    $(wildcard include/config/OABI_COMPAT) \
+  arch/arm/include/uapi/asm/unistd.h \
+  arch/arm/include/generated/uapi/asm/unistd-eabi.h \
+  arch/arm/include/generated/asm/unistd-nr.h \
+  include/linux/nodemask.h \
+  include/linux/numa.h \
+    $(wildcard include/config/NODES_SHIFT) \
+    $(wildcard include/config/NUMA_KEEP_MEMINFO) \
+  include/linux/resource.h \
+  include/uapi/linux/resource.h \
+  arch/arm/include/generated/uapi/asm/resource.h \
+  include/asm-generic/resource.h \
+  include/uapi/asm-generic/resource.h \
+  include/linux/latencytop.h \
+  include/linux/sched/prio.h \
+  include/linux/sched/types.h \
+  include/linux/signal_types.h \
+    $(wildcard include/config/OLD_SIGACTION) \
+  include/uapi/linux/signal.h \
+  arch/arm/include/asm/signal.h \
+  arch/arm/include/uapi/asm/signal.h \
+  include/uapi/asm-generic/signal-defs.h \
+  arch/arm/include/uapi/asm/sigcontext.h \
+  arch/arm/include/generated/uapi/asm/siginfo.h \
+  include/uapi/asm-generic/siginfo.h \
+  include/linux/syscall_user_dispatch.h \
+  include/linux/mm_types_task.h \
+    $(wildcard include/config/ARCH_WANT_BATCHED_UNMAP_TLB_FLUSH) \
+    $(wildcard include/config/SPLIT_PTLOCK_CPUS) \
+    $(wildcard include/config/ARCH_ENABLE_SPLIT_PMD_PTLOCK) \
+  include/linux/task_io_accounting.h \
+    $(wildcard include/config/TASK_IO_ACCOUNTING) \
+  include/linux/posix-timers.h \
+  include/linux/alarmtimer.h \
+    $(wildcard include/config/RTC_CLASS) \
+  include/linux/task_work.h \
+  include/uapi/linux/rseq.h \
+  include/linux/kcsan.h \
+  arch/arm/include/generated/asm/kmap_size.h \
+  include/asm-generic/kmap_size.h \
+    $(wildcard include/config/DEBUG_KMAP_LOCAL) \
+  arch/arm/include/asm/delay.h \
+  include/linux/err.h \
+  include/linux/iopoll.h \
+  include/linux/io.h \
+    $(wildcard include/config/HAS_IOPORT_MAP) \
+    $(wildcard include/config/PCI) \
+  arch/arm/include/asm/io.h \
+    $(wildcard include/config/NEED_MACH_IO_H) \
+    $(wildcard include/config/PCMCIA_SOC_COMMON) \
+    $(wildcard include/config/ISA) \
+    $(wildcard include/config/PCCARD) \
+  include/asm-generic/pci_iomap.h \
+    $(wildcard include/config/NO_GENERIC_PCI_IOPORT_MAP) \
+    $(wildcard include/config/GENERIC_PCI_IOMAP) \
+  include/asm-generic/io.h \
+    $(wildcard include/config/GENERIC_IOMAP) \
+    $(wildcard include/config/GENERIC_IOREMAP) \
+    $(wildcard include/config/VIRT_TO_BUS) \
+    $(wildcard include/config/GENERIC_DEVMEM_IS_ALLOWED) \
+  include/linux/logic_pio.h \
+    $(wildcard include/config/INDIRECT_PIO) \
+  include/linux/fwnode.h \
+  include/linux/vmalloc.h \
+    $(wildcard include/config/KASAN_VMALLOC) \
+    $(wildcard include/config/HAVE_ARCH_HUGE_VMALLOC) \
+  include/linux/overflow.h \
+  arch/arm/include/asm/vmalloc.h \
+  include/linux/spi/spi.h \
+    $(wildcard include/config/SPI_SLAVE) \
+    $(wildcard include/config/SPI) \
+    $(wildcard include/config/OF) \
+  include/linux/device.h \
+    $(wildcard include/config/ENERGY_MODEL) \
+    $(wildcard include/config/GENERIC_MSI_IRQ_DOMAIN) \
+    $(wildcard include/config/PINCTRL) \
+    $(wildcard include/config/GENERIC_MSI_IRQ) \
+    $(wildcard include/config/DMA_OPS) \
+    $(wildcard include/config/DMA_DECLARE_COHERENT) \
+    $(wildcard include/config/DMA_CMA) \
+    $(wildcard include/config/SWIOTLB) \
+    $(wildcard include/config/ARCH_HAS_SYNC_DMA_FOR_DEVICE) \
+    $(wildcard include/config/ARCH_HAS_SYNC_DMA_FOR_CPU) \
+    $(wildcard include/config/ARCH_HAS_SYNC_DMA_FOR_CPU_ALL) \
+    $(wildcard include/config/DMA_OPS_BYPASS) \
+    $(wildcard include/config/PM_SLEEP) \
+    $(wildcard include/config/DEVTMPFS) \
+    $(wildcard include/config/SYSFS_DEPRECATED) \
+  include/linux/dev_printk.h \
+  include/linux/ratelimit.h \
+  include/linux/energy_model.h \
+  include/linux/jump_label.h \
+    $(wildcard include/config/JUMP_LABEL) \
+    $(wildcard include/config/HAVE_ARCH_JUMP_LABEL_RELATIVE) \
+  include/linux/kobject.h \
+    $(wildcard include/config/UEVENT_HELPER) \
+    $(wildcard include/config/DEBUG_KOBJECT_RELEASE) \
+  include/linux/sysfs.h \
+  include/linux/kernfs.h \
+    $(wildcard include/config/KERNFS) \
+  include/linux/idr.h \
+  include/linux/radix-tree.h \
+  include/linux/xarray.h \
+    $(wildcard include/config/XARRAY_MULTI) \
+  include/linux/gfp.h \
+    $(wildcard include/config/ZONE_DMA) \
+    $(wildcard include/config/ZONE_DMA32) \
+    $(wildcard include/config/ZONE_DEVICE) \
+    $(wildcard include/config/CONTIG_ALLOC) \
+    $(wildcard include/config/CMA) \
+  include/linux/mmzone.h \
+    $(wildcard include/config/FORCE_MAX_ZONEORDER) \
+    $(wildcard include/config/MEMORY_ISOLATION) \
+    $(wildcard include/config/ZSMALLOC) \
+    $(wildcard include/config/SHADOW_CALL_STACK) \
+    $(wildcard include/config/SWAP) \
+    $(wildcard include/config/TRANSPARENT_HUGEPAGE) \
+    $(wildcard include/config/MEMORY_HOTPLUG) \
+    $(wildcard include/config/PAGE_EXTENSION) \
+    $(wildcard include/config/DEFERRED_STRUCT_PAGE_INIT) \
+    $(wildcard include/config/HAVE_MEMORYLESS_NODES) \
+    $(wildcard include/config/SPARSEMEM_EXTREME) \
+  include/linux/pageblock-flags.h \
+    $(wildcard include/config/HUGETLB_PAGE) \
+    $(wildcard include/config/HUGETLB_PAGE_SIZE_VARIABLE) \
+  include/linux/page-flags-layout.h \
+    $(wildcard include/config/KASAN_HW_TAGS) \
+  include/generated/bounds.h \
+  include/linux/mm_types.h \
+    $(wildcard include/config/HAVE_ALIGNED_STRUCT_PAGE) \
+    $(wildcard include/config/USERFAULTFD) \
+    $(wildcard include/config/HAVE_ARCH_COMPAT_MMAP_BASES) \
+    $(wildcard include/config/MEMBARRIER) \
+    $(wildcard include/config/AIO) \
+    $(wildcard include/config/MMU_NOTIFIER) \
+    $(wildcard include/config/IOMMU_SUPPORT) \
+  include/linux/auxvec.h \
+  include/uapi/linux/auxvec.h \
+  arch/arm/include/asm/auxvec.h \
+  arch/arm/include/uapi/asm/auxvec.h \
+  include/linux/rwsem.h \
+    $(wildcard include/config/RWSEM_SPIN_ON_OWNER) \
+    $(wildcard include/config/DEBUG_RWSEMS) \
+  include/linux/completion.h \
+  include/linux/swait.h \
+  include/linux/uprobes.h \
+  arch/arm/include/asm/mmu.h \
+    $(wildcard include/config/CPU_HAS_ASID) \
+    $(wildcard include/config/VDSO) \
+  include/linux/page-flags.h \
+    $(wildcard include/config/ARCH_USES_PG_UNCACHED) \
+    $(wildcard include/config/MEMORY_FAILURE) \
+    $(wildcard include/config/PAGE_IDLE_FLAG) \
+    $(wildcard include/config/THP_SWAP) \
+    $(wildcard include/config/KSM) \
+  include/linux/local_lock.h \
+  include/linux/local_lock_internal.h \
+  include/linux/memory_hotplug.h \
+    $(wildcard include/config/ARCH_HAS_ADD_PAGES) \
+    $(wildcard include/config/HAVE_ARCH_NODEDATA_EXTENSION) \
+    $(wildcard include/config/MEMORY_HOTREMOVE) \
+  include/linux/notifier.h \
+    $(wildcard include/config/TREE_SRCU) \
+  include/linux/srcu.h \
+    $(wildcard include/config/TINY_SRCU) \
+    $(wildcard include/config/SRCU) \
+  include/linux/rcu_segcblist.h \
+  include/linux/srcutree.h \
+  include/linux/rcu_node_tree.h \
+    $(wildcard include/config/RCU_FANOUT) \
+    $(wildcard include/config/RCU_FANOUT_LEAF) \
+  include/linux/topology.h \
+    $(wildcard include/config/USE_PERCPU_NUMA_NODE_ID) \
+    $(wildcard include/config/SCHED_SMT) \
+  include/linux/arch_topology.h \
+    $(wildcard include/config/GENERIC_ARCH_TOPOLOGY) \
+  arch/arm/include/asm/topology.h \
+    $(wildcard include/config/ARM_CPU_TOPOLOGY) \
+    $(wildcard include/config/BL_SWITCHER) \
+  include/asm-generic/topology.h \
+  include/linux/kconfig.h \
+  include/linux/kobject_ns.h \
+  include/linux/stat.h \
+  arch/arm/include/uapi/asm/stat.h \
+  include/uapi/linux/stat.h \
+  include/linux/kref.h \
+  include/linux/sched/cpufreq.h \
+    $(wildcard include/config/CPU_FREQ) \
+  include/linux/sched/topology.h \
+    $(wildcard include/config/SCHED_DEBUG) \
+    $(wildcard include/config/SCHED_MC) \
+    $(wildcard include/config/CPU_FREQ_GOV_SCHEDUTIL) \
+  include/linux/sched/idle.h \
+  include/linux/ioport.h \
+  include/linux/klist.h \
+  include/linux/pm.h \
+    $(wildcard include/config/VT_CONSOLE_SLEEP) \
+    $(wildcard include/config/PM) \
+    $(wildcard include/config/PM_CLK) \
+    $(wildcard include/config/PM_GENERIC_DOMAINS) \
+  include/linux/device/bus.h \
+    $(wildcard include/config/ACPI) \
+  include/linux/device/class.h \
+  include/linux/device/driver.h \
+  arch/arm/include/asm/device.h \
+    $(wildcard include/config/DMABOUNCE) \
+    $(wildcard include/config/ARM_DMA_USE_IOMMU) \
+    $(wildcard include/config/ARCH_OMAP) \
+  include/linux/pm_wakeup.h \
+  include/linux/mod_devicetable.h \
+  include/linux/uuid.h \
+  include/uapi/linux/uuid.h \
+  include/linux/slab.h \
+    $(wildcard include/config/DEBUG_SLAB) \
+    $(wildcard include/config/FAILSLAB) \
+    $(wildcard include/config/MEMCG_KMEM) \
+    $(wildcard include/config/HAVE_HARDENED_USERCOPY_ALLOCATOR) \
+    $(wildcard include/config/SLAB) \
+    $(wildcard include/config/SLUB) \
+    $(wildcard include/config/SLOB) \
+    $(wildcard include/config/CC_IS_GCC) \
+    $(wildcard include/config/CLANG_VERSION) \
+  include/linux/percpu-refcount.h \
+  include/linux/kasan.h \
+    $(wildcard include/config/KASAN_STACK) \
+    $(wildcard include/config/KASAN_INLINE) \
+  include/linux/static_key.h \
+  include/linux/kthread.h \
+  include/linux/scatterlist.h \
+    $(wildcard include/config/NEED_SG_DMA_LENGTH) \
+    $(wildcard include/config/DEBUG_SG) \
+    $(wildcard include/config/SGL_ALLOC) \
+    $(wildcard include/config/ARCH_NO_SG_CHAIN) \
+    $(wildcard include/config/SG_POOL) \
+  include/linux/mm.h \
+    $(wildcard include/config/SYSCTL) \
+    $(wildcard include/config/HAVE_ARCH_MMAP_RND_BITS) \
+    $(wildcard include/config/HAVE_ARCH_MMAP_RND_COMPAT_BITS) \
+    $(wildcard include/config/DEBUG_INFO_BTF) \
+    $(wildcard include/config/MEM_SOFT_DIRTY) \
+    $(wildcard include/config/ARCH_USES_HIGH_VMA_FLAGS) \
+    $(wildcard include/config/ARCH_HAS_PKEYS) \
+    $(wildcard include/config/PPC) \
+    $(wildcard include/config/X86) \
+    $(wildcard include/config/PARISC) \
+    $(wildcard include/config/IA64) \
+    $(wildcard include/config/SPARC64) \
+    $(wildcard include/config/ARM64) \
+    $(wildcard include/config/ARM64_MTE) \
+    $(wildcard include/config/HAVE_ARCH_USERFAULTFD_MINOR) \
+    $(wildcard include/config/STACK_GROWSUP) \
+    $(wildcard include/config/SHMEM) \
+    $(wildcard include/config/DEV_PAGEMAP_OPS) \
+    $(wildcard include/config/DEVICE_PRIVATE) \
+    $(wildcard include/config/PCI_P2PDMA) \
+    $(wildcard include/config/MIGRATION) \
+    $(wildcard include/config/ARCH_HAS_PTE_SPECIAL) \
+    $(wildcard include/config/ARCH_HAS_PTE_DEVMAP) \
+    $(wildcard include/config/DEBUG_VM_RB) \
+    $(wildcard include/config/PAGE_POISONING) \
+    $(wildcard include/config/INIT_ON_ALLOC_DEFAULT_ON) \
+    $(wildcard include/config/INIT_ON_FREE_DEFAULT_ON) \
+    $(wildcard include/config/DEBUG_PAGEALLOC) \
+    $(wildcard include/config/HUGETLBFS) \
+    $(wildcard include/config/MAPPING_DIRTY_HELPERS) \
+  include/linux/mmap_lock.h \
+  include/linux/tracepoint-defs.h \
+    $(wildcard include/config/TRACEPOINTS) \
+  include/linux/range.h \
+  include/linux/bit_spinlock.h \
+  include/linux/shrinker.h \
+  include/linux/page_ext.h \
+  include/linux/stacktrace.h \
+    $(wildcard include/config/STACKTRACE) \
+    $(wildcard include/config/ARCH_STACKWALK) \
+    $(wildcard include/config/HAVE_RELIABLE_STACKTRACE) \
+  include/linux/stackdepot.h \
+    $(wildcard include/config/STACKDEPOT) \
+  include/linux/page_ref.h \
+    $(wildcard include/config/DEBUG_PAGE_REF) \
+  include/linux/memremap.h \
+  include/linux/pgtable.h \
+    $(wildcard include/config/PGTABLE_LEVELS) \
+    $(wildcard include/config/HIGHPTE) \
+    $(wildcard include/config/GUP_GET_PTE_LOW_HIGH) \
+    $(wildcard include/config/HAVE_ARCH_TRANSPARENT_HUGEPAGE_PUD) \
+    $(wildcard include/config/HAVE_ARCH_SOFT_DIRTY) \
+    $(wildcard include/config/ARCH_ENABLE_THP_MIGRATION) \
+    $(wildcard include/config/HAVE_ARCH_HUGE_VMAP) \
+    $(wildcard include/config/X86_ESPFIX64) \
+  arch/arm/include/asm/pgtable.h \
+  arch/arm/include/asm/proc-fns.h \
+    $(wildcard include/config/BIG_LITTLE) \
+    $(wildcard include/config/HARDEN_BRANCH_PREDICTOR) \
+  arch/arm/include/asm/glue-proc.h \
+    $(wildcard include/config/CPU_ARM7TDMI) \
+    $(wildcard include/config/CPU_ARM720T) \
+    $(wildcard include/config/CPU_ARM740T) \
+    $(wildcard include/config/CPU_ARM9TDMI) \
+    $(wildcard include/config/CPU_ARM920T) \
+    $(wildcard include/config/CPU_ARM922T) \
+    $(wildcard include/config/CPU_ARM925T) \
+    $(wildcard include/config/CPU_ARM926T) \
+    $(wildcard include/config/CPU_ARM940T) \
+    $(wildcard include/config/CPU_ARM946E) \
+    $(wildcard include/config/CPU_ARM1020) \
+    $(wildcard include/config/CPU_ARM1020E) \
+    $(wildcard include/config/CPU_ARM1022) \
+    $(wildcard include/config/CPU_ARM1026) \
+    $(wildcard include/config/CPU_MOHAWK) \
+    $(wildcard include/config/CPU_FEROCEON) \
+    $(wildcard include/config/CPU_V6K) \
+    $(wildcard include/config/CPU_PJ4B) \
+    $(wildcard include/config/CPU_V7) \
+  include/asm-generic/pgtable-nopud.h \
+  include/asm-generic/pgtable-nop4d.h \
+  arch/arm/include/asm/pgtable-hwdef.h \
+  arch/arm/include/asm/pgtable-2level-hwdef.h \
+  arch/arm/include/asm/tlbflush.h \
+    $(wildcard include/config/SMP_ON_UP) \
+    $(wildcard include/config/CPU_TLB_V4WT) \
+    $(wildcard include/config/CPU_TLB_FA) \
+    $(wildcard include/config/CPU_TLB_V4WBI) \
+    $(wildcard include/config/CPU_TLB_FEROCEON) \
+    $(wildcard include/config/CPU_TLB_V4WB) \
+    $(wildcard include/config/CPU_TLB_V6) \
+    $(wildcard include/config/CPU_TLB_V7) \
+    $(wildcard include/config/ARM_ERRATA_720789) \
+    $(wildcard include/config/ARM_ERRATA_798181) \
+  arch/arm/include/asm/pgtable-2level.h \
+  include/asm-generic/pgtable_uffd.h \
+    $(wildcard include/config/HAVE_ARCH_USERFAULTFD_WP) \
+  include/linux/huge_mm.h \
+  include/linux/sched/coredump.h \
+    $(wildcard include/config/CORE_DUMP_DEFAULT_ELF_HEADERS) \
+  include/linux/fs.h \
+    $(wildcard include/config/READ_ONLY_THP_FOR_FS) \
+    $(wildcard include/config/FS_POSIX_ACL) \
+    $(wildcard include/config/CGROUP_WRITEBACK) \
+    $(wildcard include/config/IMA) \
+    $(wildcard include/config/FILE_LOCKING) \
+    $(wildcard include/config/FSNOTIFY) \
+    $(wildcard include/config/FS_ENCRYPTION) \
+    $(wildcard include/config/FS_VERITY) \
+    $(wildcard include/config/EPOLL) \
+    $(wildcard include/config/UNICODE) \
+    $(wildcard include/config/QUOTA) \
+    $(wildcard include/config/FS_DAX) \
+  include/linux/wait_bit.h \
+  include/linux/kdev_t.h \
+  include/uapi/linux/kdev_t.h \
+  include/linux/dcache.h \
+  include/linux/rculist_bl.h \
+  include/linux/list_bl.h \
+  include/linux/lockref.h \
+    $(wildcard include/config/ARCH_USE_CMPXCHG_LOCKREF) \
+  include/linux/stringhash.h \
+    $(wildcard include/config/DCACHE_WORD_ACCESS) \
+  include/linux/hash.h \
+    $(wildcard include/config/HAVE_ARCH_HASH) \
+  include/linux/path.h \
+  include/linux/list_lru.h \
+  include/linux/capability.h \
+  include/uapi/linux/capability.h \
+  include/linux/semaphore.h \
+  include/linux/fcntl.h \
+    $(wildcard include/config/ARCH_32BIT_OFF_T) \
+  include/uapi/linux/fcntl.h \
+  arch/arm/include/uapi/asm/fcntl.h \
+  include/uapi/asm-generic/fcntl.h \
+  include/uapi/linux/openat2.h \
+  include/linux/migrate_mode.h \
+  include/linux/percpu-rwsem.h \
+  include/linux/rcuwait.h \
+  include/linux/sched/signal.h \
+    $(wildcard include/config/SCHED_AUTOGROUP) \
+    $(wildcard include/config/BSD_PROCESS_ACCT) \
+    $(wildcard include/config/TASKSTATS) \
+  include/linux/signal.h \
+    $(wildcard include/config/PROC_FS) \
+  include/linux/sched/jobctl.h \
+  include/linux/sched/task.h \
+    $(wildcard include/config/HAVE_EXIT_THREAD) \
+    $(wildcard include/config/ARCH_WANTS_DYNAMIC_TASK_STRUCT) \
+    $(wildcard include/config/HAVE_ARCH_THREAD_STRUCT_WHITELIST) \
+  include/linux/uaccess.h \
+    $(wildcard include/config/SET_FS) \
+  include/linux/fault-inject-usercopy.h \
+    $(wildcard include/config/FAULT_INJECTION_USERCOPY) \
+  arch/arm/include/asm/uaccess.h \
+    $(wildcard include/config/CPU_SW_DOMAIN_PAN) \
+    $(wildcard include/config/CPU_USE_DOMAINS) \
+    $(wildcard include/config/HAVE_EFFICIENT_UNALIGNED_ACCESS) \
+    $(wildcard include/config/UACCESS_WITH_MEMCPY) \
+  arch/arm/include/asm/domain.h \
+    $(wildcard include/config/IO_36) \
+    $(wildcard include/config/CPU_CP15_MMU) \
+  arch/arm/include/generated/asm/unaligned.h \
+  include/asm-generic/unaligned.h \
+  include/linux/unaligned/packed_struct.h \
+  arch/arm/include/generated/asm/extable.h \
+  include/asm-generic/extable.h \
+  include/linux/cred.h \
+    $(wildcard include/config/DEBUG_CREDENTIALS) \
+  include/linux/key.h \
+    $(wildcard include/config/KEY_NOTIFICATIONS) \
+    $(wildcard include/config/NET) \
+  include/linux/sysctl.h \
+  include/uapi/linux/sysctl.h \
+  include/linux/assoc_array.h \
+    $(wildcard include/config/ASSOCIATIVE_ARRAY) \
+  include/linux/sched/user.h \
+    $(wildcard include/config/WATCH_QUEUE) \
+  include/linux/percpu_counter.h \
+  include/linux/rcu_sync.h \
+  include/linux/delayed_call.h \
+  include/linux/errseq.h \
+  include/linux/ioprio.h \
+  include/linux/sched/rt.h \
+  include/linux/iocontext.h \
+  include/uapi/linux/ioprio.h \
+  include/linux/fs_types.h \
+  include/linux/mount.h \
+  include/linux/mnt_idmapping.h \
+  include/uapi/linux/fs.h \
+  include/uapi/linux/ioctl.h \
+  arch/arm/include/generated/uapi/asm/ioctl.h \
+  include/asm-generic/ioctl.h \
+  include/uapi/asm-generic/ioctl.h \
+  include/linux/quota.h \
+    $(wildcard include/config/QUOTA_NETLINK_INTERFACE) \
+  include/uapi/linux/dqblk_xfs.h \
+  include/linux/dqblk_v1.h \
+  include/linux/dqblk_v2.h \
+  include/linux/dqblk_qtree.h \
+  include/linux/projid.h \
+  include/uapi/linux/quota.h \
+  include/linux/nfs_fs_i.h \
+  include/linux/vmstat.h \
+    $(wildcard include/config/VM_EVENT_COUNTERS) \
+    $(wildcard include/config/DEBUG_TLBFLUSH) \
+    $(wildcard include/config/DEBUG_VM_VMACACHE) \
+  include/linux/vm_event_item.h \
+    $(wildcard include/config/MEMORY_BALLOON) \
+    $(wildcard include/config/BALLOON_COMPACTION) \
+  include/linux/gpio/consumer.h \
+    $(wildcard include/config/GPIOLIB) \
+    $(wildcard include/config/OF_GPIO) \
+    $(wildcard include/config/GPIO_SYSFS) \
+  include/linux/ptp_clock_kernel.h \
+    $(wildcard include/config/PTP_1588_CLOCK) \
+  include/linux/pps_kernel.h \
+    $(wildcard include/config/NTP_PPS) \
+  include/uapi/linux/pps.h \
+  include/linux/cdev.h \
+  include/uapi/linux/ptp_clock.h \
+  include/linux/timecounter.h \
+  include/linux/skbuff.h \
+    $(wildcard include/config/NF_CONNTRACK) \
+    $(wildcard include/config/BRIDGE_NETFILTER) \
+    $(wildcard include/config/NET_TC_SKB_EXT) \
+    $(wildcard include/config/DEBUG_KMAP_LOCAL_FORCE_MAP) \
+    $(wildcard include/config/NET_SOCK_MSG) \
+    $(wildcard include/config/SKB_EXTENSIONS) \
+    $(wildcard include/config/IPV6_NDISC_NODETYPE) \
+    $(wildcard include/config/NET_SWITCHDEV) \
+    $(wildcard include/config/NET_CLS_ACT) \
+    $(wildcard include/config/NET_REDIRECT) \
+    $(wildcard include/config/TLS_DEVICE) \
+    $(wildcard include/config/NET_SCHED) \
+    $(wildcard include/config/NET_RX_BUSY_POLL) \
+    $(wildcard include/config/XPS) \
+    $(wildcard include/config/NETWORK_SECMARK) \
+    $(wildcard include/config/PAGE_POOL) \
+    $(wildcard include/config/NETWORK_PHY_TIMESTAMPING) \
+    $(wildcard include/config/XFRM) \
+    $(wildcard include/config/MPTCP) \
+    $(wildcard include/config/NETFILTER_XT_TARGET_TRACE) \
+    $(wildcard include/config/NF_TABLES) \
+    $(wildcard include/config/IP_VS) \
+  include/linux/bvec.h \
+  include/linux/highmem.h \
+  include/linux/hardirq.h \
+  include/linux/context_tracking_state.h \
+    $(wildcard include/config/CONTEXT_TRACKING) \
+  include/linux/ftrace_irq.h \
+    $(wildcard include/config/HWLAT_TRACER) \
+    $(wildcard include/config/OSNOISE_TRACER) \
+  include/linux/vtime.h \
+    $(wildcard include/config/VIRT_CPU_ACCOUNTING) \
+    $(wildcard include/config/IRQ_TIME_ACCOUNTING) \
+  arch/arm/include/asm/hardirq.h \
+  arch/arm/include/asm/irq.h \
+    $(wildcard include/config/SPARSE_IRQ) \
+  include/asm-generic/hardirq.h \
+  include/linux/irq.h \
+    $(wildcard include/config/GENERIC_IRQ_EFFECTIVE_AFF_MASK) \
+    $(wildcard include/config/GENERIC_IRQ_IPI) \
+    $(wildcard include/config/IRQ_DOMAIN_HIERARCHY) \
+    $(wildcard include/config/GENERIC_IRQ_MIGRATION) \
+    $(wildcard include/config/GENERIC_PENDING_IRQ) \
+    $(wildcard include/config/HARDIRQS_SW_RESEND) \
+    $(wildcard include/config/GENERIC_IRQ_LEGACY) \
+    $(wildcard include/config/GENERIC_IRQ_MULTI_HANDLER) \
+  include/linux/irqhandler.h \
+  include/linux/irqreturn.h \
+  include/linux/irqnr.h \
+  include/uapi/linux/irqnr.h \
+  arch/arm/include/generated/asm/irq_regs.h \
+  include/asm-generic/irq_regs.h \
+  include/linux/irqdesc.h \
+    $(wildcard include/config/GENERIC_IRQ_DEBUGFS) \
+    $(wildcard include/config/IRQ_DOMAIN) \
+    $(wildcard include/config/HANDLE_DOMAIN_IRQ) \
+  arch/arm/include/asm/hw_irq.h \
+  arch/arm/include/asm/cacheflush.h \
+    $(wildcard include/config/ARM_ERRATA_411920) \
+    $(wildcard include/config/CPU_CACHE_VIPT) \
+    $(wildcard include/config/OUTER_CACHE) \
+    $(wildcard include/config/FRAME_POINTER) \
+    $(wildcard include/config/CPU_ICACHE_MISMATCH_WORKAROUND) \
+  arch/arm/include/asm/glue-cache.h \
+    $(wildcard include/config/CPU_CACHE_V4) \
+    $(wildcard include/config/CPU_CACHE_V4WB) \
+    $(wildcard include/config/CACHE_B15_RAC) \
+  arch/arm/include/asm/cachetype.h \
+    $(wildcard include/config/CPU_CACHE_VIVT) \
+  arch/arm/include/asm/outercache.h \
+    $(wildcard include/config/OUTER_CACHE_SYNC) \
+  include/linux/highmem-internal.h \
+  arch/arm/include/asm/highmem.h \
+    $(wildcard include/config/DEBUG_HIGHMEM) \
+  arch/arm/include/asm/fixmap.h \
+  include/asm-generic/fixmap.h \
+  include/linux/socket.h \
+  arch/arm/include/generated/uapi/asm/socket.h \
+  include/uapi/asm-generic/socket.h \
+  arch/arm/include/generated/uapi/asm/sockios.h \
+  include/uapi/asm-generic/sockios.h \
+  include/uapi/linux/sockios.h \
+  include/linux/uio.h \
+    $(wildcard include/config/ARCH_HAS_UACCESS_FLUSHCACHE) \
+    $(wildcard include/config/ARCH_HAS_COPY_MC) \
+  include/uapi/linux/uio.h \
+  include/uapi/linux/socket.h \
+  include/linux/net.h \
+  include/linux/random.h \
+    $(wildcard include/config/ARCH_RANDOM) \
+  include/linux/once.h \
+  include/uapi/linux/random.h \
+  include/linux/prandom.h \
+  include/linux/siphash.h \
+  include/linux/sockptr.h \
+  include/uapi/linux/net.h \
+  include/linux/textsearch.h \
+  include/net/checksum.h \
+  arch/arm/include/asm/checksum.h \
+  include/linux/in6.h \
+  include/uapi/linux/in6.h \
+  include/uapi/linux/libc-compat.h \
+  include/linux/dma-mapping.h \
+    $(wildcard include/config/DMA_API_DEBUG) \
+    $(wildcard include/config/HAS_DMA) \
+    $(wildcard include/config/NEED_DMA_MAP_STATE) \
+  include/linux/dma-direction.h \
+  include/linux/mem_encrypt.h \
+    $(wildcard include/config/ARCH_HAS_MEM_ENCRYPT) \
+  include/linux/netdev_features.h \
+  include/linux/sched/clock.h \
+    $(wildcard include/config/HAVE_UNSTABLE_SCHED_CLOCK) \
+  include/net/flow_dissector.h \
+  include/uapi/linux/if_ether.h \
+  include/linux/splice.h \
+  include/linux/pipe_fs_i.h \
+  include/uapi/linux/if_packet.h \
+  include/net/flow.h \
+  include/net/page_pool.h \
+  include/linux/ptr_ring.h \
+  include/linux/netfilter/nf_conntrack_common.h \
+  include/uapi/linux/netfilter/nf_conntrack_common.h \
+  include/uapi/linux/spi/spi.h \
+  include/linux/regulator/consumer.h \
+    $(wildcard include/config/REGULATOR) \
+  include/linux/suspend.h \
+    $(wildcard include/config/VT) \
+    $(wildcard include/config/SUSPEND) \
+    $(wildcard include/config/HIBERNATION) \
+    $(wildcard include/config/HIBERNATION_SNAPSHOT_DEV) \
+    $(wildcard include/config/PM_SLEEP_DEBUG) \
+    $(wildcard include/config/PM_AUTOSLEEP) \
+  include/linux/swap.h \
+    $(wildcard include/config/FRONTSWAP) \
+    $(wildcard include/config/MEMCG_SWAP) \
+  include/linux/memcontrol.h \
+  include/linux/cgroup.h \
+    $(wildcard include/config/CGROUP_CPUACCT) \
+    $(wildcard include/config/SOCK_CGROUP_DATA) \
+    $(wildcard include/config/CGROUP_DATA) \
+    $(wildcard include/config/CGROUP_BPF) \
+  include/uapi/linux/cgroupstats.h \
+  include/uapi/linux/taskstats.h \
+  include/linux/seq_file.h \
+  include/linux/ns_common.h \
+  include/linux/nsproxy.h \
+  include/linux/user_namespace.h \
+    $(wildcard include/config/INOTIFY_USER) \
+    $(wildcard include/config/FANOTIFY) \
+    $(wildcard include/config/PERSISTENT_KEYRINGS) \
+  include/linux/kernel_stat.h \
+  include/linux/interrupt.h \
+    $(wildcard include/config/IRQ_FORCED_THREADING) \
+    $(wildcard include/config/GENERIC_IRQ_PROBE) \
+    $(wildcard include/config/IRQ_TIMINGS) \
+  arch/arm/include/asm/sections.h \
+  include/asm-generic/sections.h \
+  include/linux/cgroup-defs.h \
+    $(wildcard include/config/CGROUP_NET_CLASSID) \
+    $(wildcard include/config/CGROUP_NET_PRIO) \
+  include/linux/u64_stats_sync.h \
+  include/linux/bpf-cgroup.h \
+  include/linux/bpf.h \
+    $(wildcard include/config/BPF_JIT) \
+    $(wildcard include/config/BPF_JIT_ALWAYS_ON) \
+    $(wildcard include/config/INET) \
+  include/uapi/linux/bpf.h \
+    $(wildcard include/config/BPF_LIRC_MODE2) \
+    $(wildcard include/config/EFFICIENT_UNALIGNED_ACCESS) \
+    $(wildcard include/config/IP_ROUTE_CLASSID) \
+    $(wildcard include/config/BPF_KPROBE_OVERRIDE) \
+    $(wildcard include/config/FUNCTION_ERROR_INJECTION) \
+  include/uapi/linux/bpf_common.h \
+  include/linux/file.h \
+  include/linux/rbtree_latch.h \
+  include/linux/module.h \
+    $(wildcard include/config/MODULES_TREE_LOOKUP) \
+    $(wildcard include/config/STACKTRACE_BUILD_ID) \
+    $(wildcard include/config/MODULE_SIG) \
+    $(wildcard include/config/KALLSYMS) \
+    $(wildcard include/config/BPF_EVENTS) \
+    $(wildcard include/config/DEBUG_INFO_BTF_MODULES) \
+    $(wildcard include/config/EVENT_TRACING) \
+    $(wildcard include/config/KPROBES) \
+    $(wildcard include/config/MODULE_UNLOAD) \
+    $(wildcard include/config/CONSTRUCTORS) \
+  include/linux/buildid.h \
+    $(wildcard include/config/CRASH_CORE) \
+  include/linux/kmod.h \
+  include/linux/umh.h \
+  include/linux/elf.h \
+    $(wildcard include/config/ARCH_USE_GNU_PROPERTY) \
+    $(wildcard include/config/ARCH_HAVE_ELF_PROT) \
+  arch/arm/include/asm/elf.h \
+  arch/arm/include/asm/vdso_datapage.h \
+  include/vdso/datapage.h \
+    $(wildcard include/config/ARCH_HAS_VDSO_DATA) \
+  include/uapi/asm-generic/errno-base.h \
+  include/vdso/clocksource.h \
+    $(wildcard include/config/GENERIC_GETTIMEOFDAY) \
+  arch/arm/include/asm/vdso/clocksource.h \
+  include/vdso/processor.h \
+  arch/arm/include/asm/vdso/gettimeofday.h \
+    $(wildcard include/config/ARM_ARCH_TIMER) \
+  arch/arm/include/asm/vdso/cp15.h \
+    $(wildcard include/config/CPU_CP15) \
+  arch/arm/include/asm/user.h \
+  include/uapi/linux/elf.h \
+  include/uapi/linux/elf-em.h \
+  include/linux/moduleparam.h \
+    $(wildcard include/config/ALPHA) \
+    $(wildcard include/config/PPC64) \
+  include/linux/error-injection.h \
+  include/asm-generic/error-injection.h \
+  include/linux/cfi.h \
+    $(wildcard include/config/CFI_CLANG_SHADOW) \
+  arch/arm/include/asm/module.h \
+    $(wildcard include/config/ARM_UNWIND) \
+    $(wildcard include/config/ARM_MODULE_PLTS) \
+  include/asm-generic/module.h \
+    $(wildcard include/config/HAVE_MOD_ARCH_SPECIFIC) \
+    $(wildcard include/config/MODULES_USE_ELF_REL) \
+    $(wildcard include/config/MODULES_USE_ELF_RELA) \
+  include/linux/kallsyms.h \
+    $(wildcard include/config/KALLSYMS_ALL) \
+  include/linux/sched/mm.h \
+    $(wildcard include/config/ARCH_HAS_MEMBARRIER_CALLBACKS) \
+  include/linux/sync_core.h \
+    $(wildcard include/config/ARCH_HAS_SYNC_CORE_BEFORE_USERMODE) \
+  include/linux/bpfptr.h \
+  include/linux/psi_types.h \
+  include/linux/cgroup_subsys.h \
+    $(wildcard include/config/CGROUP_DEVICE) \
+    $(wildcard include/config/CGROUP_FREEZER) \
+    $(wildcard include/config/CGROUP_PERF) \
+    $(wildcard include/config/CGROUP_HUGETLB) \
+    $(wildcard include/config/CGROUP_PIDS) \
+    $(wildcard include/config/CGROUP_RDMA) \
+    $(wildcard include/config/CGROUP_MISC) \
+    $(wildcard include/config/CGROUP_DEBUG) \
+  include/linux/page_counter.h \
+  include/linux/vmpressure.h \
+  include/linux/eventfd.h \
+  include/linux/writeback.h \
+  include/linux/flex_proportions.h \
+  include/linux/backing-dev-defs.h \
+    $(wildcard include/config/DEBUG_FS) \
+  include/linux/blk_types.h \
+    $(wildcard include/config/FAIL_MAKE_REQUEST) \
+    $(wildcard include/config/BLK_CGROUP_IOCOST) \
+    $(wildcard include/config/BLK_INLINE_ENCRYPTION) \
+    $(wildcard include/config/BLK_DEV_INTEGRITY) \
+  include/linux/blk-cgroup.h \
+    $(wildcard include/config/BLK_CGROUP_FC_APPID) \
+  include/linux/blkdev.h \
+    $(wildcard include/config/BLK_RQ_ALLOC_TIME) \
+    $(wildcard include/config/BLK_WBT) \
+    $(wildcard include/config/BLK_DEV_ZONED) \
+    $(wildcard include/config/BLK_DEV_THROTTLING) \
+    $(wildcard include/config/BLK_DEBUG_FS) \
+  include/uapi/linux/major.h \
+  include/linux/genhd.h \
+    $(wildcard include/config/BLOCK_HOLDER_DEPRECATED) \
+    $(wildcard include/config/CDROM) \
+  include/linux/mempool.h \
+  include/linux/bio.h \
+  include/uapi/linux/blkzoned.h \
+  include/linux/sbitmap.h \
+  include/linux/elevator.h \
+  include/linux/hashtable.h \
+  include/linux/blk-mq.h \
+    $(wildcard include/config/FAIL_IO_TIMEOUT) \
+  include/linux/node.h \
+    $(wildcard include/config/HMEM_REPORTING) \
+    $(wildcard include/config/MEMORY_HOTPLUG_SPARSE) \
+  include/linux/pagemap.h \
+  include/linux/hugetlb_inline.h \
+  include/uapi/linux/mempolicy.h \
+  include/linux/freezer.h \
+  drivers/net/can/m_can/m_can.h \
+  include/linux/can/core.h \
+  include/uapi/linux/can.h \
+  include/linux/netdevice.h \
+    $(wildcard include/config/DCB) \
+    $(wildcard include/config/HYPERV_NET) \
+    $(wildcard include/config/WLAN) \
+    $(wildcard include/config/AX25) \
+    $(wildcard include/config/MAC80211_MESH) \
+    $(wildcard include/config/NET_IPIP) \
+    $(wildcard include/config/NET_IPGRE) \
+    $(wildcard include/config/IPV6_SIT) \
+    $(wildcard include/config/IPV6_TUNNEL) \
+    $(wildcard include/config/RPS) \
+    $(wildcard include/config/NETPOLL) \
+    $(wildcard include/config/XDP_SOCKETS) \
+    $(wildcard include/config/BQL) \
+    $(wildcard include/config/RFS_ACCEL) \
+    $(wildcard include/config/FCOE) \
+    $(wildcard include/config/XFRM_OFFLOAD) \
+    $(wildcard include/config/NET_POLL_CONTROLLER) \
+    $(wildcard include/config/LIBFCOE) \
+    $(wildcard include/config/WIRELESS_EXT) \
+    $(wildcard include/config/NET_L3_MASTER_DEV) \
+    $(wildcard include/config/IPV6) \
+    $(wildcard include/config/VLAN_8021Q) \
+    $(wildcard include/config/NET_DSA) \
+    $(wildcard include/config/TIPC) \
+    $(wildcard include/config/IRDA) \
+    $(wildcard include/config/ATALK) \
+    $(wildcard include/config/DECNET) \
+    $(wildcard include/config/MPLS_ROUTING) \
+    $(wildcard include/config/MCTP) \
+    $(wildcard include/config/NETFILTER_INGRESS) \
+    $(wildcard include/config/PCPU_DEV_REFCNT) \
+    $(wildcard include/config/GARP) \
+    $(wildcard include/config/MRP) \
+    $(wildcard include/config/MACSEC) \
+    $(wildcard include/config/NET_FLOW_LIMIT) \
+    $(wildcard include/config/ETHTOOL_NETLINK) \
+  include/linux/dynamic_queue_limits.h \
+  include/net/net_namespace.h \
+    $(wildcard include/config/IEEE802154_6LOWPAN) \
+    $(wildcard include/config/IP_SCTP) \
+    $(wildcard include/config/NETFILTER) \
+    $(wildcard include/config/WEXT_CORE) \
+    $(wildcard include/config/MPLS) \
+    $(wildcard include/config/CAN) \
+    $(wildcard include/config/CRYPTO_USER) \
+    $(wildcard include/config/SMC) \
+    $(wildcard include/config/NET_NS) \
+  include/net/netns/core.h \
+  include/net/netns/mib.h \
+    $(wildcard include/config/XFRM_STATISTICS) \
+    $(wildcard include/config/TLS) \
+  include/net/snmp.h \
+  include/uapi/linux/snmp.h \
+  include/net/netns/unix.h \
+  include/net/netns/packet.h \
+  include/net/netns/ipv4.h \
+    $(wildcard include/config/IP_MULTIPLE_TABLES) \
+    $(wildcard include/config/IP_MROUTE) \
+    $(wildcard include/config/IP_MROUTE_MULTIPLE_TABLES) \
+    $(wildcard include/config/IP_ROUTE_MULTIPATH) \
+  include/net/inet_frag.h \
+  include/net/netns/ipv6.h \
+    $(wildcard include/config/IPV6_MULTIPLE_TABLES) \
+    $(wildcard include/config/IPV6_SUBTREES) \
+    $(wildcard include/config/IPV6_MROUTE) \
+    $(wildcard include/config/IPV6_MROUTE_MULTIPLE_TABLES) \
+    $(wildcard include/config/NF_DEFRAG_IPV6) \
+  include/net/dst_ops.h \
+  include/uapi/linux/icmpv6.h \
+  include/net/netns/nexthop.h \
+  include/net/netns/ieee802154_6lowpan.h \
+  include/net/netns/sctp.h \
+  include/net/netns/netfilter.h \
+    $(wildcard include/config/NETFILTER_FAMILY_ARP) \
+    $(wildcard include/config/NETFILTER_FAMILY_BRIDGE) \
+    $(wildcard include/config/NF_DEFRAG_IPV4) \
+  include/linux/netfilter_defs.h \
+  include/uapi/linux/netfilter.h \
+  include/linux/in.h \
+  include/uapi/linux/in.h \
+  include/net/netns/conntrack.h \
+    $(wildcard include/config/NF_CT_PROTO_DCCP) \
+    $(wildcard include/config/NF_CT_PROTO_SCTP) \
+    $(wildcard include/config/NF_FLOW_TABLE) \
+    $(wildcard include/config/NF_CT_PROTO_GRE) \
+    $(wildcard include/config/NF_CONNTRACK_EVENTS) \
+    $(wildcard include/config/NF_CONNTRACK_LABELS) \
+  include/linux/list_nulls.h \
+  include/linux/netfilter/nf_conntrack_tcp.h \
+  include/uapi/linux/netfilter/nf_conntrack_tcp.h \
+  include/linux/netfilter/nf_conntrack_dccp.h \
+  include/uapi/linux/netfilter/nf_conntrack_tuple_common.h \
+  include/linux/netfilter/nf_conntrack_sctp.h \
+  include/uapi/linux/netfilter/nf_conntrack_sctp.h \
+  include/net/netns/nftables.h \
+  include/net/netns/xfrm.h \
+  include/uapi/linux/xfrm.h \
+  include/net/netns/mpls.h \
+  include/net/netns/can.h \
+  include/net/netns/xdp.h \
+  include/net/netns/smc.h \
+  include/net/netns/bpf.h \
+  include/linux/bpf-netns.h \
+  include/net/netns/mctp.h \
+  include/linux/seq_file_net.h \
+  include/net/netprio_cgroup.h \
+  include/net/xdp.h \
+  include/uapi/linux/neighbour.h \
+  include/linux/netlink.h \
+  include/net/scm.h \
+    $(wildcard include/config/SECURITY_NETWORK) \
+  include/linux/security.h \
+    $(wildcard include/config/SECURITY_INFINIBAND) \
+    $(wildcard include/config/SECURITY_NETWORK_XFRM) \
+    $(wildcard include/config/SECURITY_PATH) \
+    $(wildcard include/config/SECURITYFS) \
+  include/linux/kernel_read_file.h \
+  include/uapi/linux/netlink.h \
+  include/uapi/linux/netdevice.h \
+  include/uapi/linux/if.h \
+  include/uapi/linux/hdlc/ioctl.h \
+  include/linux/if_ether.h \
+  include/linux/if_link.h \
+  include/uapi/linux/if_link.h \
+  include/uapi/linux/if_bonding.h \
+  include/uapi/linux/pkt_cls.h \
+  include/uapi/linux/pkt_sched.h \
+  include/linux/can/led.h \
+    $(wildcard include/config/CAN_LEDS) \
+  include/linux/leds.h \
+    $(wildcard include/config/LEDS_TRIGGERS) \
+    $(wildcard include/config/LEDS_BRIGHTNESS_HW_CHANGED) \
+    $(wildcard include/config/LEDS_TRIGGER_DISK) \
+    $(wildcard include/config/LEDS_TRIGGER_MTD) \
+    $(wildcard include/config/LEDS_TRIGGER_CAMERA) \
+    $(wildcard include/config/NEW_LEDS) \
+    $(wildcard include/config/LEDS_TRIGGER_CPU) \
+    $(wildcard include/config/LEDS_TRIGGER_AUDIO) \
+  include/dt-bindings/leds/common.h \
+  include/linux/clk.h \
+    $(wildcard include/config/COMMON_CLK) \
+    $(wildcard include/config/HAVE_CLK_PREPARE) \
+    $(wildcard include/config/HAVE_CLK) \
+  include/linux/of.h \
+    $(wildcard include/config/OF_DYNAMIC) \
+    $(wildcard include/config/SPARC) \
+    $(wildcard include/config/OF_PROMTREE) \
+    $(wildcard include/config/OF_KOBJ) \
+    $(wildcard include/config/OF_NUMA) \
+    $(wildcard include/config/OF_OVERLAY) \
+  include/linux/property.h \
+  include/linux/of_device.h \
+  include/linux/cpu.h \
+    $(wildcard include/config/PM_SLEEP_SMP) \
+    $(wildcard include/config/PM_SLEEP_SMP_NONZERO_CPU) \
+    $(wildcard include/config/HOTPLUG_SMT) \
+  include/linux/cpuhotplug.h \
+  include/linux/platform_device.h \
+    $(wildcard include/config/HIBERNATE_CALLBACKS) \
+    $(wildcard include/config/SUPERH) \
+  include/linux/of_platform.h \
+    $(wildcard include/config/OF_ADDRESS) \
+  include/linux/pm_runtime.h \
+  include/linux/can/dev.h \
+  include/linux/can/bittiming.h \
+    $(wildcard include/config/CAN_CALC_BITTIMING) \
+  include/uapi/linux/can/netlink.h \
+  include/uapi/linux/can/error.h \
+  include/linux/can/length.h \
+  include/linux/can/skb.h \
+  include/net/sock.h \
+    $(wildcard include/config/SOCK_RX_QUEUE_MAPPING) \
+    $(wildcard include/config/SOCK_VALIDATE_XMIT) \
+  include/linux/filter.h \
+    $(wildcard include/config/HAVE_EBPF_JIT) \
+  include/linux/compat.h \
+    $(wildcard include/config/ARCH_HAS_SYSCALL_WRAPPER) \
+    $(wildcard include/config/X86_X32_ABI) \
+    $(wildcard include/config/COMPAT_OLD_SIGACTION) \
+    $(wildcard include/config/ODD_RT_SIGACTION) \
+  include/uapi/linux/aio_abi.h \
+  arch/arm/include/generated/asm/compat.h \
+  include/asm-generic/compat.h \
+    $(wildcard include/config/COMPAT_FOR_U64_ALIGNMENT) \
+  include/linux/set_memory.h \
+    $(wildcard include/config/ARCH_HAS_SET_MEMORY) \
+    $(wildcard include/config/ARCH_HAS_SET_DIRECT_MAP) \
+  arch/arm/include/asm/set_memory.h \
+  include/linux/if_vlan.h \
+  include/linux/etherdevice.h \
+  include/linux/crc32.h \
+  include/linux/bitrev.h \
+    $(wildcard include/config/HAVE_ARCH_BITREVERSE) \
+  arch/arm/include/asm/bitrev.h \
+  include/linux/rtnetlink.h \
+    $(wildcard include/config/NET_INGRESS) \
+    $(wildcard include/config/NET_EGRESS) \
+  include/uapi/linux/rtnetlink.h \
+  include/uapi/linux/if_addr.h \
+  include/uapi/linux/if_vlan.h \
+  include/crypto/sha1.h \
+  include/net/sch_generic.h \
+  include/uapi/linux/pkt_cls.h \
+  include/net/gen_stats.h \
+  include/uapi/linux/gen_stats.h \
+  include/net/rtnetlink.h \
+  include/net/netlink.h \
+  include/net/flow_offload.h \
+  include/uapi/linux/filter.h \
+  include/linux/rculist_nulls.h \
+  include/linux/poll.h \
+  include/uapi/linux/poll.h \
+  arch/arm/include/generated/uapi/asm/poll.h \
+  include/uapi/asm-generic/poll.h \
+  include/uapi/linux/eventpoll.h \
+  include/linux/indirect_call_wrapper.h \
+  include/net/dst.h \
+  include/net/neighbour.h \
+  include/net/tcp_states.h \
+  include/uapi/linux/net_tstamp.h \
+  include/net/l3mdev.h \
+  include/net/fib_rules.h \
+  include/uapi/linux/fib_rules.h \
+  include/net/fib_notifier.h \
+  include/linux/pinctrl/consumer.h \
+  include/linux/pinctrl/pinctrl-state.h \
+  include/linux/gpio.h \
+    $(wildcard include/config/ARCH_HAVE_CUSTOM_GPIO_H) \
+  arch/arm/include/asm/gpio.h \
+  include/asm-generic/gpio.h \
+    $(wildcard include/config/ARCH_NR_GPIO) \
+  include/linux/gpio/driver.h \
+    $(wildcard include/config/GPIO_GENERIC) \
+    $(wildcard include/config/GPIOLIB_IRQCHIP) \
+  include/linux/irqchip/chained_irq.h \
+  include/linux/irqdomain.h \
+    $(wildcard include/config/IRQ_DOMAIN_NOMAP) \
+  include/linux/pinctrl/pinctrl.h \
+    $(wildcard include/config/GENERIC_PINCONF) \
+  include/linux/pinctrl/devinfo.h \
+  include/linux/pinctrl/pinconf-generic.h \
+  include/linux/pinctrl/machine.h \
+
+drivers/net/can/m_can/tcan4x5x.o: $(deps_drivers/net/can/m_can/tcan4x5x.o)
+
+$(deps_drivers/net/can/m_can/tcan4x5x.o):
diff -Naur A/drivers/net/can/m_can/tcan4x5x-regmap.c B/drivers/net/can/m_can/tcan4x5x-regmap.c
--- A/drivers/net/can/m_can/tcan4x5x-regmap.c	2023-06-26 14:34:49.967944560 +0530
+++ B/drivers/net/can/m_can/tcan4x5x-regmap.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,135 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-//
-// tcan4x5x - Texas Instruments TCAN4x5x Family CAN controller driver
-//
-// Copyright (c) 2020 Pengutronix,
-//                    Marc Kleine-Budde <kernel@pengutronix.de>
-// Copyright (c) 2018-2019 Texas Instruments Incorporated
-//                    http://www.ti.com/
-
-#include "tcan4x5x.h"
-
-#define TCAN4X5X_SPI_INSTRUCTION_WRITE (0x61 << 24)
-#define TCAN4X5X_SPI_INSTRUCTION_READ (0x41 << 24)
-
-#define TCAN4X5X_MAX_REGISTER 0x87fc
-
-static int tcan4x5x_regmap_gather_write(void *context,
-					const void *reg, size_t reg_len,
-					const void *val, size_t val_len)
-{
-	struct spi_device *spi = context;
-	struct tcan4x5x_priv *priv = spi_get_drvdata(spi);
-	struct tcan4x5x_map_buf *buf_tx = &priv->map_buf_tx;
-	struct spi_transfer xfer[] = {
-		{
-			.tx_buf = buf_tx,
-			.len = sizeof(buf_tx->cmd) + val_len,
-		},
-	};
-
-	memcpy(&buf_tx->cmd, reg, sizeof(buf_tx->cmd.cmd) +
-	       sizeof(buf_tx->cmd.addr));
-	tcan4x5x_spi_cmd_set_len(&buf_tx->cmd, val_len);
-	memcpy(buf_tx->data, val, val_len);
-
-	return spi_sync_transfer(spi, xfer, ARRAY_SIZE(xfer));
-}
-
-static int tcan4x5x_regmap_write(void *context, const void *data, size_t count)
-{
-	return tcan4x5x_regmap_gather_write(context, data, sizeof(__be32),
-					    data + sizeof(__be32),
-					    count - sizeof(__be32));
-}
-
-static int tcan4x5x_regmap_read(void *context,
-				const void *reg_buf, size_t reg_len,
-				void *val_buf, size_t val_len)
-{
-	struct spi_device *spi = context;
-	struct tcan4x5x_priv *priv = spi_get_drvdata(spi);
-	struct tcan4x5x_map_buf *buf_rx = &priv->map_buf_rx;
-	struct tcan4x5x_map_buf *buf_tx = &priv->map_buf_tx;
-	struct spi_transfer xfer[2] = {
-		{
-			.tx_buf = buf_tx,
-		}
-	};
-	struct spi_message msg;
-	int err;
-
-	spi_message_init(&msg);
-	spi_message_add_tail(&xfer[0], &msg);
-
-	memcpy(&buf_tx->cmd, reg_buf, sizeof(buf_tx->cmd.cmd) +
-	       sizeof(buf_tx->cmd.addr));
-	tcan4x5x_spi_cmd_set_len(&buf_tx->cmd, val_len);
-
-	if (spi->controller->flags & SPI_CONTROLLER_HALF_DUPLEX) {
-		xfer[0].len = sizeof(buf_tx->cmd);
-
-		xfer[1].rx_buf = val_buf;
-		xfer[1].len = val_len;
-		spi_message_add_tail(&xfer[1], &msg);
-	} else {
-		xfer[0].rx_buf = buf_rx;
-		xfer[0].len = sizeof(buf_tx->cmd) + val_len;
-
-		if (TCAN4X5X_SANITIZE_SPI)
-			memset(buf_tx->data, 0x0, val_len);
-	}
-
-	err = spi_sync(spi, &msg);
-	if (err)
-		return err;
-
-	if (!(spi->controller->flags & SPI_CONTROLLER_HALF_DUPLEX))
-		memcpy(val_buf, buf_rx->data, val_len);
-
-	return 0;
-}
-
-static const struct regmap_range tcan4x5x_reg_table_yes_range[] = {
-	regmap_reg_range(0x0000, 0x002c),	/* Device ID and SPI Registers */
-	regmap_reg_range(0x0800, 0x083c),	/* Device configuration registers and Interrupt Flags*/
-	regmap_reg_range(0x1000, 0x10fc),	/* M_CAN */
-	regmap_reg_range(0x8000, 0x87fc),	/* MRAM */
-};
-
-static const struct regmap_access_table tcan4x5x_reg_table = {
-	.yes_ranges = tcan4x5x_reg_table_yes_range,
-	.n_yes_ranges = ARRAY_SIZE(tcan4x5x_reg_table_yes_range),
-};
-
-static const struct regmap_config tcan4x5x_regmap = {
-	.reg_bits = 24,
-	.reg_stride = 4,
-	.pad_bits = 8,
-	.val_bits = 32,
-	.wr_table = &tcan4x5x_reg_table,
-	.rd_table = &tcan4x5x_reg_table,
-	.max_register = TCAN4X5X_MAX_REGISTER,
-	.cache_type = REGCACHE_NONE,
-	.read_flag_mask = (__force unsigned long)
-		cpu_to_be32(TCAN4X5X_SPI_INSTRUCTION_READ),
-	.write_flag_mask = (__force unsigned long)
-		cpu_to_be32(TCAN4X5X_SPI_INSTRUCTION_WRITE),
-};
-
-static const struct regmap_bus tcan4x5x_bus = {
-	.write = tcan4x5x_regmap_write,
-	.gather_write = tcan4x5x_regmap_gather_write,
-	.read = tcan4x5x_regmap_read,
-	.reg_format_endian_default = REGMAP_ENDIAN_BIG,
-	.val_format_endian_default = REGMAP_ENDIAN_BIG,
-	.max_raw_read = 256,
-	.max_raw_write = 256,
-};
-
-int tcan4x5x_regmap_init(struct tcan4x5x_priv *priv)
-{
-	priv->regmap = devm_regmap_init(&priv->spi->dev, &tcan4x5x_bus,
-					priv->spi, &tcan4x5x_regmap);
-	return PTR_ERR_OR_ZERO(priv->regmap);
-}
diff -Naur A/drivers/spi/spi.c B/drivers/spi/spi.c
--- A/drivers/spi/spi.c	2023-06-26 14:34:50.467944542 +0530
+++ B/drivers/spi/spi.c	2023-06-26 15:22:55.747842662 +0530
@@ -1348,14 +1348,14 @@
 
 	spi_set_cs(msg->spi, true, false);
 
-	SPI_STATISTICS_INCREMENT_FIELD(statm, messages);
-	SPI_STATISTICS_INCREMENT_FIELD(stats, messages);
+	//SPI_STATISTICS_INCREMENT_FIELD(statm, messages);
+	//SPI_STATISTICS_INCREMENT_FIELD(stats, messages);
 
 	list_for_each_entry(xfer, &msg->transfers, transfer_list) {
 		trace_spi_transfer_start(msg, xfer);
 
-		spi_statistics_add_transfer_stats(statm, xfer, ctlr);
-		spi_statistics_add_transfer_stats(stats, xfer, ctlr);
+		//spi_statistics_add_transfer_stats(statm, xfer, ctlr);
+		//spi_statistics_add_transfer_stats(stats, xfer, ctlr);
 
 		if (!ctlr->ptp_sts_supported) {
 			xfer->ptp_sts_word_pre = 0;
@@ -1363,7 +1363,7 @@
 		}
 
 		if ((xfer->tx_buf || xfer->rx_buf) && xfer->len) {
-			reinit_completion(&ctlr->xfer_completion);
+			//reinit_completion(&ctlr->xfer_completion);
 
 fallback_pio:
 			ret = ctlr->transfer_one(ctlr, msg->spi, xfer);
@@ -1376,20 +1376,20 @@
 					goto fallback_pio;
 				}
 
-				SPI_STATISTICS_INCREMENT_FIELD(statm,
-							       errors);
-				SPI_STATISTICS_INCREMENT_FIELD(stats,
-							       errors);
+				//SPI_STATISTICS_INCREMENT_FIELD(statm,
+				//			       errors);
+				//SPI_STATISTICS_INCREMENT_FIELD(stats,
+				//			       errors);
 				dev_err(&msg->spi->dev,
 					"SPI transfer failed: %d\n", ret);
-				goto out;
+				//goto out;
 			}
 
-			if (ret > 0) {
+			/*if (ret > 0) {
 				ret = spi_transfer_wait(ctlr, msg, xfer);
 				if (ret < 0)
 					msg->status = ret;
-			}
+			}*/
 		} else {
 			if (xfer->len)
 				dev_err(&msg->spi->dev,
@@ -1402,14 +1402,14 @@
 			xfer->ptp_sts_word_post = xfer->len;
 		}
 
-		trace_spi_transfer_stop(msg, xfer);
+		//trace_spi_transfer_stop(msg, xfer);
 
 		if (msg->status != -EINPROGRESS)
 			goto out;
 
 		spi_transfer_delay_exec(xfer);
 
-		if (xfer->cs_change) {
+		/*if (xfer->cs_change) {
 			if (list_is_last(&xfer->transfer_list,
 					 &msg->transfers)) {
 				keep_cs = true;
@@ -1418,7 +1418,7 @@
 				_spi_transfer_cs_change_delay(msg, xfer);
 				spi_set_cs(msg->spi, true, false);
 			}
-		}
+		}*/
 
 		msg->actual_length += xfer->len;
 	}
@@ -1430,10 +1430,10 @@
 	if (msg->status == -EINPROGRESS)
 		msg->status = ret;
 
-	if (msg->status && ctlr->handle_err)
+	/*if (msg->status && ctlr->handle_err)
 		ctlr->handle_err(ctlr, msg);
 
-	spi_finalize_current_message(ctlr);
+	spi_finalize_current_message(ctlr);*/
 
 	return ret;
 }
@@ -1485,10 +1485,10 @@
 	spin_lock_irqsave(&ctlr->queue_lock, flags);
 
 	/* Make sure we are not already running a message */
-	if (ctlr->cur_msg) {
+	/*if (ctlr->cur_msg) {
 		spin_unlock_irqrestore(&ctlr->queue_lock, flags);
 		return;
-	}
+	}*/
 
 	/* If another context is idling the device then defer */
 	if (ctlr->idling) {
@@ -1499,7 +1499,7 @@
 
 	/* Check if the queue is idle */
 	if (list_empty(&ctlr->queue) || !ctlr->running) {
-		if (!ctlr->busy) {
+		/*if (!ctlr->busy) {
 			spin_unlock_irqrestore(&ctlr->queue_lock, flags);
 			return;
 		}
@@ -1527,16 +1527,16 @@
 		ctlr->dummy_rx = NULL;
 		kfree(ctlr->dummy_tx);
 		ctlr->dummy_tx = NULL;
-		if (ctlr->unprepare_transfer_hardware &&
+		/*if (ctlr->unprepare_transfer_hardware &&
 		    ctlr->unprepare_transfer_hardware(ctlr))
 			dev_err(&ctlr->dev,
 				"failed to unprepare transfer hardware\n");
 		spi_idle_runtime_pm(ctlr);
 		trace_spi_controller_idle(ctlr);
 
-		spin_lock_irqsave(&ctlr->queue_lock, flags);
+		spin_lock_irqsave(&ctlr->queue_lock, flags);*/
 		ctlr->idling = false;
-		spin_unlock_irqrestore(&ctlr->queue_lock, flags);
+		//spin_unlock_irqrestore(&ctlr->queue_lock, flags);
 		return;
 	}
 
@@ -1551,7 +1551,7 @@
 		ctlr->busy = true;
 	spin_unlock_irqrestore(&ctlr->queue_lock, flags);
 
-	mutex_lock(&ctlr->io_mutex);
+	/*mutex_lock(&ctlr->io_mutex);
 
 	if (!was_busy && ctlr->auto_runtime_pm) {
 		ret = pm_runtime_get_sync(ctlr->dev.parent);
@@ -1585,7 +1585,7 @@
 		}
 	}
 
-	trace_spi_message_start(msg);
+	trace_spi_message_start(msg);*/
 
 	if (ctlr->prepare_message) {
 		ret = ctlr->prepare_message(ctlr, msg);
@@ -1594,17 +1594,17 @@
 				ret);
 			msg->status = ret;
 			spi_finalize_current_message(ctlr);
-			goto out;
+			//goto out;
 		}
 		ctlr->cur_msg_prepared = true;
 	}
 
-	ret = spi_map_msg(ctlr, msg);
+	/*ret = spi_map_msg(ctlr, msg);
 	if (ret) {
 		msg->status = ret;
 		spi_finalize_current_message(ctlr);
 		goto out;
-	}
+	}*/
 
 	if (!ctlr->ptp_sts_supported && !ctlr->transfer_one) {
 		list_for_each_entry(xfer, &msg->transfers, transfer_list) {
@@ -1617,15 +1617,15 @@
 	if (ret) {
 		dev_err(&ctlr->dev,
 			"failed to transfer one message from queue\n");
-		goto out;
+		//goto out;
 	}
 
-out:
-	mutex_unlock(&ctlr->io_mutex);
+/*out:
+	mutex_unlock(&ctlr->io_mutex);*/
 
 	/* Prod the scheduler in case transfer_one() was busy waiting */
-	if (!ret)
-		cond_resched();
+	/*if (!ret)
+		cond_resched();*/
 }
 
 /**
@@ -1758,7 +1758,7 @@
 		return PTR_ERR(ctlr->kworker);
 	}
 
-	kthread_init_work(&ctlr->pump_messages, spi_pump_messages);
+	//kthread_init_work(&ctlr->pump_messages, spi_pump_messages);
 
 	/*
 	 * Controller config will indicate if this controller should run the
@@ -1767,8 +1767,8 @@
 	 * request and the scheduling of the message pump thread. Without this
 	 * setting the message pump thread will remain at default priority.
 	 */
-	if (ctlr->rt)
-		spi_set_thread_rt(ctlr);
+	/*if (ctlr->rt)
+		spi_set_thread_rt(ctlr);*/
 
 	return 0;
 }
@@ -1844,14 +1844,14 @@
 		}
 	}
 
-	spin_lock_irqsave(&ctlr->queue_lock, flags);
+	//spin_lock_irqsave(&ctlr->queue_lock, flags);
 	ctlr->cur_msg = NULL;
 	ctlr->cur_msg_prepared = false;
 	ctlr->fallback = false;
-	kthread_queue_work(ctlr->kworker, &ctlr->pump_messages);
+	/*kthread_queue_work(ctlr->kworker, &ctlr->pump_messages);
 	spin_unlock_irqrestore(&ctlr->queue_lock, flags);
 
-	trace_spi_message_done(mesg);
+	trace_spi_message_done(mesg);*/
 
 	mesg->state = NULL;
 	if (mesg->complete)
@@ -1863,7 +1863,7 @@
 {
 	unsigned long flags;
 
-	spin_lock_irqsave(&ctlr->queue_lock, flags);
+	//spin_lock_irqsave(&ctlr->queue_lock, flags);
 
 	if (ctlr->running || ctlr->busy) {
 		spin_unlock_irqrestore(&ctlr->queue_lock, flags);
@@ -1872,9 +1872,9 @@
 
 	ctlr->running = true;
 	ctlr->cur_msg = NULL;
-	spin_unlock_irqrestore(&ctlr->queue_lock, flags);
+	//spin_unlock_irqrestore(&ctlr->queue_lock, flags);
 
-	kthread_queue_work(ctlr->kworker, &ctlr->pump_messages);
+	//kthread_queue_work(ctlr->kworker, &ctlr->pump_messages);
 
 	return 0;
 }
@@ -1952,8 +1952,8 @@
 	msg->status = -EINPROGRESS;
 
 	list_add_tail(&msg->queue, &ctlr->queue);
-	if (!ctlr->busy && need_pump)
-		kthread_queue_work(ctlr->kworker, &ctlr->pump_messages);
+	/*if (!ctlr->busy && need_pump)
+		kthread_queue_work(ctlr->kworker, &ctlr->pump_messages);*/
 
 	spin_unlock_irqrestore(&ctlr->queue_lock, flags);
 	return 0;
@@ -1980,11 +1980,11 @@
 		ctlr->transfer_one_message = spi_transfer_one_message;
 
 	/* Initialize and start queue */
-	ret = spi_init_queue(ctlr);
+	/*ret = spi_init_queue(ctlr);
 	if (ret) {
 		dev_err(&ctlr->dev, "problem initializing queue\n");
 		goto err_init_queue;
-	}
+	}*/
 	ctlr->queued = true;
 	ret = spi_start_queue(ctlr);
 	if (ret) {
@@ -1995,7 +1995,7 @@
 	return 0;
 
 err_start_queue:
-	spi_destroy_queue(ctlr);
+	//spi_destroy_queue(ctlr);
 err_init_queue:
 	return ret;
 }
@@ -3520,11 +3520,11 @@
 
 	if (!spi->bits_per_word)
 		spi->bits_per_word = 8;
-
-	status = __spi_validate_bits_per_word(spi->controller,
+	spi->bits_per_word = 128;
+	/*status = __spi_validate_bits_per_word(spi->controller,
 					      spi->bits_per_word);
 	if (status)
-		return status;
+		return status;*/
 
 	if (spi->controller->max_speed_hz &&
 	    (!spi->max_speed_hz ||
@@ -3689,23 +3689,23 @@
 		if (ctlr->max_speed_hz && xfer->speed_hz > ctlr->max_speed_hz)
 			xfer->speed_hz = ctlr->max_speed_hz;
 
-		if (__spi_validate_bits_per_word(ctlr, xfer->bits_per_word))
-			return -EINVAL;
+		/*if (__spi_validate_bits_per_word(ctlr, xfer->bits_per_word))
+			return -EINVAL;*/
 
 		/*
 		 * SPI transfer length should be multiple of SPI word size
 		 * where SPI word size should be power-of-two multiple
 		 */
-		if (xfer->bits_per_word <= 8)
+		/*if (xfer->bits_per_word <= 8)
 			w_size = 1;
 		else if (xfer->bits_per_word <= 16)
 			w_size = 2;
 		else
-			w_size = 4;
+			w_size = 4;*/
 
 		/* No partial transfers accepted */
-		if (xfer->len % w_size)
-			return -EINVAL;
+		/*if (xfer->len % w_size)
+			return -EINVAL;*/
 
 		if (xfer->speed_hz && ctlr->min_speed_hz &&
 		    xfer->speed_hz < ctlr->min_speed_hz)
@@ -3719,7 +3719,7 @@
 		 * 1. check the value matches one of single, dual and quad
 		 * 2. check tx/rx_nbits match the mode in spi_device
 		 */
-		if (xfer->tx_buf) {
+		/*if (xfer->tx_buf) {
 			if (spi->mode & SPI_NO_TX)
 				return -EINVAL;
 			if (xfer->tx_nbits != SPI_NBITS_SINGLE &&
@@ -3732,9 +3732,9 @@
 			if ((xfer->tx_nbits == SPI_NBITS_QUAD) &&
 				!(spi->mode & SPI_TX_QUAD))
 				return -EINVAL;
-		}
+		}*/
 		/* check transfer rx_nbits */
-		if (xfer->rx_buf) {
+		/*if (xfer->rx_buf) {
 			if (spi->mode & SPI_NO_RX)
 				return -EINVAL;
 			if (xfer->rx_nbits != SPI_NBITS_SINGLE &&
@@ -3750,10 +3750,10 @@
 		}
 
 		if (_spi_xfer_word_delay_update(xfer, spi))
-			return -EINVAL;
+			return -EINVAL;*/
 	}
 
-	message->status = -EINPROGRESS;
+	//message->status = -EINPROGRESS;
 
 	return 0;
 }
@@ -3920,8 +3920,8 @@
 	message->context = &done;
 	message->spi = spi;
 
-	SPI_STATISTICS_INCREMENT_FIELD(&ctlr->statistics, spi_sync);
-	SPI_STATISTICS_INCREMENT_FIELD(&spi->statistics, spi_sync);
+	//SPI_STATISTICS_INCREMENT_FIELD(&ctlr->statistics, spi_sync);
+	//SPI_STATISTICS_INCREMENT_FIELD(&spi->statistics, spi_sync);
 
 	/* If we're not using the legacy transfer method then we will
 	 * try to transfer in the calling context so special case.
@@ -3945,14 +3945,14 @@
 		 * can.
 		 */
 		if (ctlr->transfer == spi_queued_transfer) {
-			SPI_STATISTICS_INCREMENT_FIELD(&ctlr->statistics,
-						       spi_sync_immediate);
-			SPI_STATISTICS_INCREMENT_FIELD(&spi->statistics,
-						       spi_sync_immediate);
+			//SPI_STATISTICS_INCREMENT_FIELD(&ctlr->statistics,
+			//			       spi_sync_immediate);
+			//SPI_STATISTICS_INCREMENT_FIELD(&spi->statistics,
+			//			       spi_sync_immediate);
 			__spi_pump_messages(ctlr, false);
 		}
 
-		wait_for_completion(&done);
+		//wait_for_completion(&done);
 		status = message->status;
 	}
 	message->context = NULL;
diff -Naur A/drivers/spi/spi-imx.c B/drivers/spi/spi-imx.c
--- A/drivers/spi/spi-imx.c	2023-06-26 14:34:50.459944543 +0530
+++ B/drivers/spi/spi-imx.c	2023-06-26 15:23:18.523841858 +0530
@@ -1577,8 +1577,6 @@
 				struct spi_transfer *transfer)
 {
 	struct spi_imx_data *spi_imx = spi_master_get_devdata(spi->master);
-	unsigned long transfer_timeout;
-	unsigned long timeout;
 
 	spi_imx->tx_buf = transfer->tx_buf;
 	spi_imx->rx_buf = transfer->rx_buf;
@@ -1592,16 +1590,6 @@
 
 	spi_imx->devtype_data->intctrl(spi_imx, MXC_INT_TE);
 
-	transfer_timeout = spi_imx_calculate_timeout(spi_imx, transfer->len);
-
-	timeout = wait_for_completion_timeout(&spi_imx->xfer_done,
-					      transfer_timeout);
-	if (!timeout) {
-		dev_err(&spi->dev, "I/O Error in PIO\n");
-		spi_imx->devtype_data->reset(spi_imx);
-		return -ETIMEDOUT;
-	}
-
 	return transfer->len;
 }
 
